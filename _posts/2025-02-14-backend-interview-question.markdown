---
layout: post
comments: true
title: "[WEB][JAVA] 개발자 취업 후기"
subtitle: "백엔드 및 웹개발, IT 직군 기술면접 준비"
description: 
date: 2025-03-29
categories: WEB JAVA
background: '/img/port.jpg'
---

## [WEB][JAVA] 개발자 취업 후기 및 백엔드 및 웹개발, IT 직군 기술면접 준비

### 1. 서론

와 벌써 2월 중순인데, 가장 최근 올렸던 글이 12월 28일 올린 글이다. 
매번 꾸준히 포스트를 올리는 것이 너무 어렵다. 리액트 관련 라이브러리 소개 포스트를 올릴까 했는데 
솔직히 너무 바쁘다, 그리고 퇴근하고 집에 와서는 시간이 없어서 글을 도저히 쓸 수가 없다...

아무튼 최근 꽤 많은 곳의 면접을 다녀왔는데, 크게는 중견기업 ERP 개발 직무부터, 웹 개발, 그리고 풀스택 개발 직무, 또 작게는 SI 중소기업까지 면접을 보았는데, 
내가 취업하기까지 받은 질문들과 면접 질문에 대한 답변을 한번 정리해보고자 한다. 물론 엄청 고등한 대기업은 지원조차 하지 않았지만 이정도면 누군가는 충분히 도움을 받을 수 있을 것 같다.

그리고 이 글은 현재, 3월 29일에 취업하고 약 두달 쯤 뒤에 다시 관조해가며 쓰는 글인데 지금까지 내가 느낀 점 등이 다른 사람에게 도움이 되기를 바라는 마음이 있다.

#### 현재 IT 취업은 겨울인가?

<img src="/img/posts/interview/winter.jpg" style="width: 80%">

여기에 대한 솔직한 대답을 한다면 **"그렇다"** 고 생각한다.
겨울이 다 지나고 봄이 온 지금이지만 개발자 취업은 좀 현실적으로 어려워졌다고 느낀다.
내 실력이 부족함을 지적한다면, 그건 당연히 맞다. 

하지만 이제 현실적으로 봤을때 **모든 사람들이(취업문을 두드리는 사회 초년생들이) 현업자 수준의 실력을 갖추는 건**, 그게 더 말도 안되는 것을 요구하는
것이지 않을까? 이건 간신히 취업을 한 지금도 동일하게 생각한다.

왜냐면 아무리 정말 다양한 기술스택을(아래에서 더 설명할 것이지만) 많이 알고 능숙하게 이용한다고 해도 
본인이 입사할 회사에서(심지어 어떤 회사에 들어갈 지도 모른다) **그 스택을 어떤 버전을 어떤 방법으로 이용할 지 알 수 없기 때문이다.**

하지만 이제 내 생각에는 그래도 개인의 노력으로 어찌저찌 보완할 부분이 분명히 존재하고, 취업 준비 등으로 전공자, 비전공자 불문하고 한계를 깰 수 있다고
분명 생각한다.

#### 기술 스택

<img src="/img/posts/interview/skill-2.png" style="width: 80%">

기술 스택에 대해 이야기를 해 보면, 위 그림에 나와있는 것도 정말 많다고 느껴지지만 저것들은 정말 극소수고 
현재 존재하는, 그리고 지금도 개발되고 있는 이 수없이 많은 기술과 제품들을 모조리 학습한다고 해서 좋은 걸까?

그렇다면 필연적으로 각각의 이해도는 분명 낮아질 수밖에는 없을 텐데, 어느 정도까지 이해도를 높혀야 하고 어느 정도까지 범위를 넖혀야 할 것인지
고민이 될 수밖에는 없다. 나도 그랬고.

스프링으로 예를 들면, 스프링에 대한 무한한 이해, 그러니까 공식 문서를 완전 달달달 외워서 그 공식 문서를 한줄한줄 스터디 하는게 과연 옳은 걸까?
개발자 커뮤니티나 흔히 말하는 인프런 등에서 이루어지는 스터디를 보면 이런식의 스터디를 하는 경우가 많이 보이는데(이게 아무런 의미가 없다는 건 아니다)
내 식견이 짧아서 그런 것일 수도 있곘지만 이게 무슨 의미가 있나 싶다.

이력서에 한줄 적는 의미가 있나? 그래서 만약 모든 것을 완벽히 통달한다면 그것도 좋을지도 모른다. 면접에서 10년차 개발자에게 하나도 틀리지 않고
잘 기억해서 설명할 자신이 있다면.

게다가 만약 본인이 맞게 알고 면접자가 틀리게 안다고 하더라도- 그것도 문제다. 면접장에서 면접관에게 '아니, 제가 맞고 당신이 틀렸습니다' 라고 
핏대 세워 토론할 것도 아니기 때문이다. 실제로 이런 경우가 분명 있다. 

물론 이러한 이론적인 지식이 필요 없다는 것은 분명 아니다. 너무 중요한 지식이라는 것에 동의하지만 
내 생각에 주니어 개발자, 아니 주니어라고 할 수도 없지, 아직 개발자가 되기도 전이니까. 아무튼 이런 개발자 취업을 준비하는 사람이라면
이러한 공부는 할 필요가 없다고, 적어도 나는 생각한다.

오히려 그것보다는 **해당 기술을 통해서 어떤 문제를 해결했고, 어떻게 문제를 해결할 수 있었는지, 왜 해당 기술을 사용했는지** 제대로 
생각하는게 우선이라고 본다.

<iframe width="560" height="315" src="https://www.youtube.com/embed/gXfEE6v5bSI?si=wHGvNLtnyjRtU8FZ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

판교 뚜벅쵸님의 이 동영상이 정말 도움이 많이 될 수 있다고 생각하는데(무조건 다 봐야된다고 생각하지만)
혹시라도 먼저 내용을 알고 싶다면 

* 면접자리는 지식 배틀하는 자리가 아니다.
* 수십개 고등한 기술스택을 아는 사람이 채용되는 것이 아니라, 해당 회사와 가장 잘 들어맞는 기술 스택을 가진 사람이 채용된다.

등등, 아무튼 내가 하고 싶은 말은 이 두가지다. 
본인이 정말 고등하게 쿠버네티스와 헬름 차트를 이용해 CI/CD를 구현했고 카프카를 이용해 이벤트 기반 동시성 처리를 했으며, 
AI기능은 뭘 집어넣었고, 레디스를 이용해 속도를 개선했으며(당연히 개선되었겠지, 램위에 올렸는데)...이런 화려한 기술스택으로 포장된 프로젝트를 이력서에 써 봐야
해당 프로젝트가 결국 이용자가 1명에 그치는 **포트폴리오용 프로젝트**라는 점에서 벗어날 수 없을 뿐만 아니라
면접을 보러간 회사에서 해당 기술을 사용하고 있다면 채용되겠지만 아니라면 **"어쩌라고?"** 라는 소리만 듣다 나올 것이다.

만약 본인이 대기업을(그것도 네카라쿠배당토라고 하는 IT 서비스 계열만 특정된다. 일반 대기업이나 금융권들은 훨신 레거시한 기술을 사용한다)
지망하고 능력도 있다면, 더 열심히 하면 되겠지만

**네가 레거시 기업에서 일해서 그런 말을 하는 것이 아니냐?** 고 한다면 어느정도 인정한다. 하지만 
만약 본인이 그게 아니라 나와 같이 상위 20퍼센트 정도 되는 평범한 정규분포 상에 있다면 
오히려 이런 것보다는 기술 면접에서 질문하는 기본기 관련 질문들, 네트워크, DB, 웹기술, 스프링 등에 올바르게 대답하는 것이 오히려 더 높은 점수를 받을 수 있을 것이다.

게다가 요즘 Chat-gpt로 대표되는 인공지능 도구의 발달로 인해서 너무 포트폴리오 자체를 맹신하지 않는 느낌도 있다(고 들었다).

### 2. 코딩테스트

또 개발자 채용에 대해서 코딩테스트에 대한 이야기를 하지 않을 수가 없는데, 코딩테스트를 하는 기업이 있고 그렇지 않은 기업들이 존재한다(당연하겠지만). 그런데 코딩테스트 방법도 좀 다른데, 크게 보자면

* 구름, 프로그래머스등의 플랫폼을(혹은 자체 플랫폼) 이용하여 코딩테스트를 진행하는 기업
* 면접 전 간단히 **종이에 손코딩을 해가며** 직접 코딩테스트를 진행하는 기업

이렇게 두 가지 방법으로 코딩테스트를 진행하는데, 나는 처음 코딩테스트를 볼 때 어쩌면 당연히 백준처럼 
온라인에서 코딩테스트를 진행하는 기업이 많을 것이라고 생각했는데, **오히려 면접 전 종이에 손코딩을 해가며 진행하는 기업이 더 많았다.** 그러니까, 손코딩을 꼭 어느정도는 익숙해져 있어야 한다고 생각이 든다.

왜냐하면 내가 가장 최악의 면접이었다고 생각하는(내가 너무 대답을 못해서) 브레인즈 컴퍼니의 면접에서 js관련 간단한 문제를(심지어 1번이었는데) 손코딩을 하라고 했기 때문이다. 진짜 너무 못해서 가끔씩 그 상황이 꿈에서도 나오는데 나중에 이야기를 할 수 있으면 하도록 하고.

그리고 또 특이했던 코딩테스트 중에 하나는 온라인으로 진행은 하지만, 구름이나 프로그래머스와는 다르게 
온라인상에서 코드를 실행시킬 수 없고, 그냥 txt로 코드를 작성하는 것과 다름없는 방식이었다. 

대기업은 물론 코딩테스트가 엄청 어렵고 백준 골드 및 플래티넘 문제까지는 준비해 가야 하는 경우가 많겠지만 내가 느끼기엔 중소 및 중견기업에서는 그것보다는 인성면접이나, 대학 생활, 서류 및 포트폴리오가 조금 더 중요하게 보는 경우가 많은 것 같다.

#### 2.1 손코딩

개인적으로 내 생각에, 앞으로도 직접 종이에 펜으로 손코딩을 하도록 하는 기업들이 많아질 것 같다. 뭐 그냥 감이기는 하지만, AI 도구들 때문에 집에서 코딩을 온라인으로 하는 경우에 치팅을 막을 수 없어질 것 같기 때문이다. 

그리고 **영세한 기업들만 손코딩 하는게 아니냐?** 이렇게 생각할 수도 있는데, 내 경험상 꽤 큰 기업(신입사원 기준 초봉 5000만원 이상)에서도 손코딩을 하는 경우가 많았다. 

게다가 요즘 개발이 AI 도구 (Chat-gpt 및 Cursor, 코파일럿 등)들이 IDE 형태로 제공되는 경우가 많아지고 있다 보니까 보일러플레이트 코드나 간단하거나 템플릿이 있는 코드 같은 경우에는 자동완성되는 경우가 많아지는데 이런 경우 간단한 코드 작성 또한 중요해질 수 있으니까 기본적인 코딩 실력은 반드시 필요하다고 생각한다.

손코딩의 경우에는 내가 받아봤던 문제들은

* 별찍기 문제
* 피보나치 수열 문제
* **팩토리 메서드 패턴** 구현
* **SQL 쿼리 문제** << **안나왔던 회사가 하나도 없을 정도로 중요하다**
* 상속 관련 문제
* js 프로미스 구현 문제
* 정보처리기사 실기형 문제
* 재귀함수(메소드 작성)

등등이 있었는데, 대부분이 그렇게 어렵다고는 할 수 없는 문제들이었지만 문제 다 합쳐서 A4용지 기준 다섯 장 정도는 썼던 것 같다. 기본적인 문법 문제(프로미스나 상속, 예외처리)가 중심이고, SQL 쿼리 및 조인문제가 대부분이었다.

그리고 당연하겠지만, 지정한 언어로 문제를 풀이해야 하는데, 나같은 경우는 자바 개발자를 목표로 하고 있었기 때문에(대부분의 웹개발자들은 그렇겠지만) 자바로 문제를 풀이해야 했다. PS를 빠르게 준비하고자 할 때 파이썬을 주로 공부하는 경우도 있는데 그런 경우에는 낭패를 볼 수 있겠다.

또한 자바 개발자라고 해도 자바스크립트 문제도 같이 제시하는 경우도 꽤 많았다. 이 둘은 아무래도 웹개발에서는 필수이다 보니 어쩔 수 없긴 하다. 그런데 이제 자바만 공부한 경우에는 자바스크립트 문제에 대해서 모르는 경우가 많아질 수 있으니 조금 주의해야 한다.

**SQL 쿼리**는 정말 농담이 아니라 단 한곳의 회사에서도 빠짐없이 출제가 되었는데. 테이블을 몇 개 주고, 두 테이블을 조인하고 정렬하거나, 조인해서 집계함수를 사용하거나 하는 문제였다. 물론 SQL 쿼리 정도는 대부분 잘 작성하겠지만 막상 시험에서 처음부터 쓰라고 하면 곤란할 수도 있다. 갑자기 ORDER BY 절이 기억이 안날수도 있잖아.

조인을 하지 않는 경우는 없었다. 정말 한번도 없었는데, 조인이 SQL에서 가장 중요한 개념이기 때문에 그럴 수 있다고 생각하고.

각각 조인의 성질을 묻는 경우도 있었다. 예를 들어서, 사원 테이블과 카드 테이블이 있는데 사원이 어떤 카드도 이용하지 않는 경우에도 카드 테이블이 빈칸으로 나오도록 출력하려면 어떤 조인을 사용해야 할지 물어보는 경우도 있었다(LEFT OUTER JOIN을 물어보는 문제였다).

### 2.2 개발자 취업 트렌드

트렌드라고 해야하나? 대부분을 다대다 면접을 본 입장에서, 어느정도 다른 면접자들의 면접 질문도 듣고, 경쟁자들이 어느정도 준비해 왔는지 느껴볼 수 있는 시간이었는데 일단 정리해 보면

* **전공자 + 부트캠프 출신이 생각보다 매우 많음.**

(일단 나는 SSAFY 출신은 아니긴 하지만 부트캠프 출신이기는 하다) 나와 같이 지원한 지원자들의 대부분이 SSAFY 출신이셨고, 컴퓨터 공학 전공자들이었다. 전공자들이라고 해도, 실제 포트폴리오 준비를 하려면 어쩔 수 없이 어느정도 부트캠프(국비교육)에 들어가야 하기 때문에 그런 것 같기는 하다. 

커뮤니티에서는 국비교육이나 부트캠프를 엄청 내려치고 뭐라고 하는 경우가 좀 있었는데, 실제 면접장에서 봤을 때 과장이 아니라 정말 전부가 국비교육이나 부트캠프를 이용한 경험이 있었다. 내가 느끼기엔 요즘 너무 취업이 어려워지기도 하고, 취업 준비를 하는 사람이 워낙 많다 보니 단순 전공자라고 해서 큰 메리트가 있지는 않기 때문인 것 같다.

비전공자이신 분들도 계셨는데, 이런 분들 중에서는 전부가 부트캠프를 수료하셨고 어느정도의 직무경험이 있으신 분들이 많았다.

실제로 내가 면접을 본 서울에 있는 서비스 기업에서 3대3 면접을 했었는데, 나 외의 두분 모두 SSAFY 출신이시고 약 1년정도의 경력을 가지고 있었다. 여담이지만 그래서 너무 면접도 잘 보시고 대답을 잘 하는 모습을 보고 멘탈이 갈려서 그냥 다른 지원자들의 질문을 듣고 다음에 다른 면접을 볼 때 참고해야겠다고 생각했다.

* **1년정도의 중고신입인 경우가 많음.**

괜찮은 기업으로 가면 갈 수록 1년정도의 경력을 가지고 있는 지원자들이 많아진다. 초봉 4600만원 정도의 중견기업에서 나를 제외한 두 사람 모두 1년정도의 경력(비정규직이나 정규직 가리지 않고)을 가지고 있었다. 최근 슈카월드에서도 올라왔지만 중고신입 및 경력직 선호 현상이 심해지고 있다 보니, **신입 채용이라고 하더라도 싸워야 하는 상대가 경력직인 경우가 꽤나 많다.** 

### 3. 포트폴리오

흔히 개발자 취업에서 포트폴리오가 정말로 중요하다고 많이 말하고 실력이 뛰어나면 학벌이고 뭐고 상관없다고 많이 말하기는 하지만, 과연 그런가? 싶은 생각도 조금 든다. 

결국 면접을 보기 위해서는 서류를 통과해야 하고, 서류를 통과하기 위해서는 이력서도 그만큼 중요한 것 같긴 하다.

그러니까 내가 말하고 싶은 건, **포트폴리오와 기술스택도 정말 중요하지만 그게 전부가 아니고, 고도한 기술스택을 많이 사용한다고 점수가 올라가는건 아닌 것 같다.** 어떤 상황에 어떤 기술을 써야할지, 어떤 프레임워크가 어떤 상황에서 적합한지 어느정도 자기 자신이 알고 있어야 하고, 문제를 해결하는 방법을 말로 잘 표현할 수 있는 것도 중요하다.

그리고 면접보기 전, 자신이 작성한 포트폴리오 결과물에 대해서 정말 자세히 알고 있는게 그 무엇보다도 중요하다. 

대부분 지원자들의 포트폴리오를 보면, 자바 스프링 프레임워크 + 리액트로 작성된 프론트엔드 프로젝트가 대부분이고, 여기에 RDB를 사용하고, 젠킨스 및 도커 정도의 컨테이너 도구를 사용하는 경우가 많았다. 생각보다 레디스 같은 캐시 도구를 사용한다고 했을때 눈에 띄는지 면접관이 질문하는 경우가 있었고, 카프카 및 메시지 큐 같은 경우에는 왜 사용했는지 구체적으로 질문하는 경우가 있었다.

당연히 대부분은 오버엔지니어링이지만(내가 면접봤을 때 실제적으로 포트폴리오에서 대규모 서비스를 구현한 경우는 없었음), 그래도 최소한 왜 이런 기술을 사용했는지, 기술에 대해 자세한 이유를 말할 수 있는 것이 중요하다.

지원자들의 포트폴리오는 대부분이 자신들만의 새로운 웹 서비스 프로젝트였는데, 게시판같은 CRUD에 치중한 간단한 프로젝트는 없던 것 같다. 

리액트가 거의 표준적인 프론트엔드 프레임워크이기는 하지만 Vue.js 와 같은 프레임워크를 사용해 봤냐고 물어보는 경우도 있었기 때문에 상대적으로 특별해 보일 것도 같다.

### 4. 면접

그리고 대망의 면접인데, 솔직히 나는 면접을 정말 못해서 뭐라고 말해야 할지는 모르겠지만 일단 그래도 면접을 한 10개 이상 보면서 사소한 거라고 해도 내가 받은 질문 및, 같이 면접을 보는 면접자가 받은 질문과 그에 대한 답변을 정리해보고자 한다.

#### 4.1 기술면접

##### Q1. JPA를 누가 사용하자고 했나요?
사실 나는 스프링 기반 웹 프로젝트에서 어쩌면 당연하게 JPA를 사용하는 경우가 많아서 팀 프로젝트에서 JPA를 기본적으로 깔고 접근을 했기 때문에 이 질문을 받았을때 조금 당황했다.

내가 팀장이었기 때문에 내가 사용하자고 했고, 사용한 이유를 덧붙여서 이야기 했다. JPA를 사용한 이유는:
- JPA를 이용할 때 객체지향적으로 도메인을 설계할 수 있음
- 데이터베이스 조작을 쉽게 할 수 있음
- 쿼리 작성 시간을 줄일 수 있음

##### Q2. JPA를 이용할 때 성능상의 단점은 없었나요?
이 질문은 받았을 때 조금 당황했는데, 왜냐하면 아무래도 실제 운영되는 프로젝트에서는 대규모 데이터를 처리해야 하기 때문에 JPA를 이용할 때 성능적인 문제가 체감 될 수 있겠지만, 소규모의, 흔히 말하는 포트폴리오용 웹 프로젝트에서는 성능적인 문제를 체감하기 힘들기 때문이다.

나의 답변:
**"대규모 데이터를 다뤄본 적이 없기 때문에 실제 성능적인 문제를 겪어본 적은 없었지만, N+1 문제, 지연로딩이나 즉시로딩 문제 등 그런 문제를 겪어본 적이 있고 해당 문제를 해결한 적이 있다"**

##### Q3. 웹 서버와 WAS의 차이는 무엇인가요?
이건 중소 SI 기업에서 면접을 볼 때 받은 질문이었는데, 일단 웹 서버는 웹 브라우저에서 요청한 정적 컨텐츠를 제공하는 서버이고, WAS는 동적 컨텐츠를 제공하는 서버이다. DB에서 데이터를 가져온다거나 하는 작업을 하는 것이 WAS이다.

##### Q4. 프로젝트를 살펴봤는데 크롤링을 하는 코드가 있었는데, 회사에 들어오면 크롤링 보다는 크롤링을 막는 입장입니다. 그럴 때 어떻게 방지할 수 있을까요?
나의 답변:
- **Robots.txt 파일을 만들어서 크롤링을 금지한다고 공지**
- 동적 페이지로 구현하여 셀레니움 같은 브라우저 자동화 도구 없이는 크롤링이 어렵게 만듦
- 크롤링으로 의심되는 짧은 시간 내의 과도한 요청은 IP 차단

##### Q5. 그러면 세션으로 크롤링을 막을 수 있을까요?
이 질문을 받고는 당황했는데 그래서 실제 면접에서 대답을 제대로 하지 못했다. 세션을 통해 크롤링을 완전히 막는 것은 어렵지만, 세션을 활용하여 크롤링을 어렵게 만들 수는 있다.

세션을 이용한 크롤링 방지 방법:
1. **세션 기반 인증**
   - 사용자가 로그인해야만 콘텐츠에 접근할 수 있도록 설정
   - 세션을 통해 사용자의 인증 상태를 확인하고, 인증되지 않은 요청은 차단

2. **세션 만료 시간 설정**
   - 세션의 유효 기간을 짧게 설정
   - 세션이 만료되면 다시 인증을 요구
   - 자동화된 스크립트가 지속적으로 세션을 갱신해야 하므로 크롤링을 어렵게 만듦

##### Q6. Spring에서 어떤 디자인패턴이 활용되고 있나요?
처음엔 MVC 패턴이 사용된다고 대답했는데, 답이 아니라고 하길래 조금 당황했다. 면접관님이 원하는 답은 싱글톤 패턴이었다. 

스프링의 주요 디자인 패턴:
- **싱글톤 패턴**: 스프링 컨테이너에서 빈을 관리하고 인스턴스를 하나만 생성하여 애플리케이션 전반에 걸쳐 공유
- **팩토리 패턴**: 객체 생성을 캡슐화
- **프록시 패턴**: AOP 구현에 활용

##### Q7. Spring에서 DI를 사용하는 이유는 무엇인가요?
나의 답변: "스프링에서 DI를 사용하는 이유는 빈의 생성이나 실행 순서등을 개발자가 관리하는 것이 아니라 스프링이 관리함으로써, 개발자는 서비스 로직에만 집중할 수 있다."

DI의 장점:
- 객체 간의 결합도를 낮춤
- 유연성을 높임
- 테스트 용이성 증가
- 객체 생성 로직을 캡슐화하여 코드를 더 깔끔하게 만듦

##### Q7-1. 이는 객체지향의 어떤 원칙을 지키는 것인가요?
이는 객체지향의 원칙 중 하나인 의존성 역전 원칙(DIP)을 지키는 것이다. 이는 추상화에 의존하고, 구체화에 의존하지 않는 것을 의미한다.

나는 여기에서 제대로 대답을 못했는데, 면접에 익숙하지 않아서 그런 것도 있는 것 같다. 면접관 앞에서 SOLID 원칙을 일일이 나열하며 설명하기가 어려웠다.

##### Q8. Spring을 사용해 보면서 Spring은 어떤 프로젝트에 사용하기 좋은것 같나요?
나의 답변: "스프링 같은 경우에는 노드나 파이썬의 fast api에 비해서 보다 더 전문적인 엔터프라이즈, 즉 큰 프로젝트에서 사용하기 좋은 프레임워크라고 생각한다. 왜냐하면 스프링은 필터 및 인터셉터등을 이용해서 더 구체적인 접근 통제 및 인가 관리가 가능하다고 생각하기 때문이다."

스프링의 장점:
- 풍부한 에코시스템: Spring Boot, Spring Data, Spring Security 등 다양한 모듈 제공
- 강력한 커뮤니티 지원: 오랜 역사와 풍부한 문서
- 유연한 설정: XML, Java Config, 어노테이션 기반 설정 지원

##### Q9. 프론트엔드와 백엔드 중 어떤 것이 더 중요한가요?
 - 저는 백엔드 개발자를 희망하며 공부했기 때문에 백엔드가 더 중요하다고 생각하지만, 여러 프로젝트를 진행해보며, 중요하다고 생각했던 서비스 로직, 예를들어 카드 결제 시스템과 같은 로직을 구현할 때 백엔드가 아닌 프론트엔드에서 구현하는 경우를 겪은 적이 있었다. 이런 경험을 보았을 때, 프론트엔드와 백엔드가 모두 중요하다고 생각하게 되었고 프론트엔드 라이브러리 즉, 리액트 및 자바스크립트 모두 사용할 수 있다.

##### Q10. 실제 서버에 데이터베이스를 설치해보셨나요?
이 질문은 중소 SI에서 면접을 볼 때 받은 질문이었는데, 이런 질문을 받고 조금 당황했다. **그러면 면접보러 오는 사람중에 혹시 DB를 깔아본 적이 없는 사람이 있기도 한건가? 그러니까 물어보는 거겠지?**

나의 답변: "당연히 설치해 봤고, 그 외에도 젠킨스등을 설치하고 이용해서 간단한 배포 자동화를 진행해 본 적이 있을 뿐만 아니라 실제 프로젝트를 클라우드 서버를 이용해서 배포를 한 적이 있습니다."

##### Q11. 데이터베이스를 단순히 조회해서 표시하는 게 아니라, 데이터를 가공해서 서빙해 본 경험이 있나요?
나의 경험:
- Open API의 chat-gpt API를 사용한 프로젝트에서는 단순 데이터 표시만 했음
- 공공주차장 조회 프로젝트에서는 선형회귀를 이용해서 예상 주차가능 대수를 제공한 경험이 있음

##### Q11-1. 해당 예측 결과는 잘 맞았나요?
솔직히 잘 맞지 않았다고 대답했다.

##### Q12. 어떤 DB를 사용해 보셨나요?

##### Q13. 쿼리는 잘 작성하세요?

##### Q14. HTTP 에러 코드 400번대와 500번대는 어떤 차이가 있나요?
- 400번대: 클라이언트 오류 (400, 401, 403, 404 등)
- 500번대: 서버 오류

클라이언트 오류는 공부하는 입장에서 많이 봤던 경우가 많은데, 서버 오류는 보기 드물어서 모르는 경우가 많다.

##### Q15. 기술 스택에 안드로이드 스튜디오가 적혀있는데, 안드로이드를 어느정도로 개발할 수 있으신가요?
의외로 안드로이드 관련 질문을 꽤 많이 받았는데(서비스 기업 및 SI 기업 둘 모두) 웹개발 직무라고 해도 자사 서비스 또는 SI 프로젝트에서 웹 기반 서비스를 모바일로 확장해야 하는 경우가 많기 때문인 것 같다.

나의 경험:
- 학교에서 모바일 프로그래밍이라는 과목을 수강
- 안드로이드 개발 경험 보유

실제 현업에서도 **전문적으로 모바일 개발을 하지는 않더라도 담당자가 자리를 비우거나 했을 때 오류를 잡을 수 있는 정도만 된다고 하더라도 많은 도움이 되고 메리트가 있다**고 한다. 이력서를 쓸 때 기술스택에 도움이 될 수 있는 정보라고 생각된다.

##### Q16. 프로젝트를 진행할 때 협업을 어떻게 진행하나요?

##### Q17. 성장하는 개발자가 되고 싶다고 말씀하시고, 현재 기술스택을 보면 최신 프레임워크를 사용하고 있는데, 실제 입사한다면 레거시 코드를 다루는 경우가 많을 것 같은데 어떻게 할 생각입니까?
개별적으로 답변을 준비해 가면 좋을 것 같다.

##### Q18. 포트폴리오를 보니 카프카가 있는데, 왜 카프카를 사용하셨죠?
카프카는 비동기 메시징 시스템으로, 데이터 스트림 처리에 특화되어 있다. 

카프카를 사용한 이유:
1. **높은 처리량**
   - 대량의 데이터를 신속하게 처리 가능
2. **분산 시스템**
   - 여러 대의 서버에서 데이터를 분산 처리 가능

이렇게 대답했어야 했지만, 이 부분에서 대답을 제대로 하지 못했다. 내 실패한 면접 대부분이 카프카로 주접떠다가 망한게 좀 있다. 오버 엔지니어링이었지만, 학습하는 과정에서 카프카를 사용해 봤다는 식으로 대답했는데, 이런 경우에는 카프카에 대한 자세한 설명을 해야 되지 않을까 하는 생각이 든다.

##### Q19. 정보처리기사를 졸업 이후에 취득했는데, 왜 학교다닐때 취득하지 않았나요?
이 질문은 다대다 면접에서 공통질문으로 받았다.

답변 사례들:
- 나의 답변: "4학년때 3회차 정보처리기사를 취득하려고 했지만 떨어졌기 때문에 졸업 이후에 취득했습니다."
- 다른 지원자의 답변: "정보처리기사의 쓸모가 없다고 생각했기 때문에 취득하지 않았습니다"

이 질문을 받은 회사가 엄청 영세한 회사도 아니고 꽤 규모가 있는 솔루션 회사였기 때문에 왜 이런 질문을 했는지 아직도 궁금하다.

##### Q20. 2025년의 기술 트렌드는 무엇이 있을까요?
대부분의 답변:
- 양자컴퓨팅
- 생성형 AI


