<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-09-11T22:14:14+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Tensor Studio</title><subtitle>텐서 스튜디오</subtitle><author><name>ash tensor</name></author><entry><title type="html">[WEB][Spring] 스프링 N + 1 문제</title><link href="http://localhost:4000/web/java/2024/08/26/spring-n-plus-1-problem.html" rel="alternate" type="text/html" title="[WEB][Spring] 스프링 N + 1 문제" /><published>2024-08-26T00:00:00+09:00</published><updated>2024-08-26T00:00:00+09:00</updated><id>http://localhost:4000/web/java/2024/08/26/spring-n-plus-1-problem</id><content type="html" xml:base="http://localhost:4000/web/java/2024/08/26/spring-n-plus-1-problem.html"><![CDATA[<h2 id="webspring-스프링-n--1-문제">[WEB][Spring] 스프링 N + 1 문제</h2>

<h3 id="1-서론">1. 서론</h3>

<p><img src="/img/posts/spring/1.png" width="80%" /></p>

<p>프로젝트를 진행 중에, 스프링에서 N + 1 문제가 발생했다. 현재 사진에서 보이는 것과 같이, 쿼리 시간이 약 30초 씩이나 걸리는 문제가 있었는데 
과거에 했던 프로젝트에서 해당 문제가 N+1 문제 때문에 발생한다는 것을 이미 알고 있었기 때문에 트러블 슈팅에 어려움을 겪지는 않았지만,
이번에 문제를 해결하면서 다시 한 번 정리해 보고자 했다.</p>

<p><img src="/img/posts/spring/2.png" width="80%" /></p>

<p>이는 해당 N + 1 문제를 해결한 뒤에 나온 API 테스트 결과이다. 30초에 달하던 쿼리 시간이 1.7초로 줄어든 것을 볼 수 있다.</p>

<h3 id="2-배경">2. 배경</h3>

<p><img src="/img/posts/spring/3.png" width="80%" /></p>

<p>문제가 되는 테이블은 다음과 같았다. (테이블 설계나 구조, 그리고 네이밍 컨벤션등이 이상하다고 지적한다면, 부끄럽지만 맞다. 
하지만, 이는 이미 구축된 시스템을 수정하는 과정에서 이미 데이터가 저장된 테이블 구조를 바꾸기 어려워서 그대로 사용하게 되었다.)
아무튼, 구조를 살펴보자면</p>

<ol>
  <li>주문을 저장하는 orders 라는 테이블이 존재하고</li>
  <li>각각 주문의 상세 내역을 저장하는 orderitem 라는 테이블이 존재한다. 그리고 이 테이블은 orders 테이블과 1:N 관계를 가지고 있다.
orderItem 테이블은 orders 테이블의 id를 참조하는 외래키를 가지고 있다. 
하지만 orderitem 테이블은 orders 테이블의 id를 참조하는 외래키를 가지고 있지 않다.</li>
</ol>

<p>이를 스프링 JPA로 구현하면 다음과 같다.</p>

<h4 id="orderjava">Order.java</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">jakarta.persistence.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Getter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Setter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.time.LocalDateTime</span><span class="o">;</span>

<span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"orders"</span><span class="o">)</span>
<span class="nd">@Getter</span> <span class="nd">@Setter</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Order</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span><span class="o">(</span><span class="n">fetch</span> <span class="o">=</span> <span class="nc">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">,</span> <span class="n">optional</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"customerID"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Customer</span> <span class="n">customer</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span><span class="o">(</span><span class="n">fetch</span> <span class="o">=</span> <span class="nc">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">,</span> <span class="n">optional</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"kioskID"</span><span class="o">,</span> <span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Kiosk</span> <span class="n">kiosk</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"date_time"</span><span class="o">,</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">LocalDateTime</span> <span class="n">dateTime</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"total_price"</span><span class="o">,</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">totalPrice</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"is_packaged"</span><span class="o">,</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">isPackaged</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"payment_uid"</span><span class="o">,</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">paymentUid</span><span class="o">;</span>

    <span class="c1">// 결제 환불을 위한 join</span>
    <span class="nd">@OneToOne</span><span class="o">(</span><span class="n">cascade</span> <span class="o">=</span> <span class="nc">CascadeType</span><span class="o">.</span><span class="na">REMOVE</span><span class="o">)</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"order_module_dto"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">OrderModuleDTO</span> <span class="n">orderModuleDTO</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="orderitemjava">OrderItem.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.annotation.JsonIgnoreProperties</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">jakarta.persistence.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Getter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Setter</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.math.BigDecimal</span><span class="o">;</span>

<span class="nd">@Entity</span>
<span class="nd">@Getter</span> <span class="nd">@Setter</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"orderitem"</span><span class="o">)</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderItem</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"orderID"</span><span class="o">,</span> <span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Order</span> <span class="n">order</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"menuID"</span><span class="o">,</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Menu</span> <span class="n">menu</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"custom_optionID"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">CustomOption</span> <span class="n">customOption</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kt">int</span> <span class="n">quantity</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="nc">Long</span> <span class="n">price</span><span class="o">;</span>

<span class="o">}</span>

</code></pre></div></div>

<ol>
  <li>여기서 ordermoduledto 라는 테이블이 존재하는데, 이 테이블은 orders 테이블과 1:1 관계를 가지고 있다.
ordermoduledto 테이블은 orders 테이블의 id를 참조하는 외래키를 가지고 있다.</li>
</ol>

<h3 id="3-문제-발생">3. 문제 발생</h3>

<p>그리고 문제가 발생했는데, order_complete를 이용해서 완료되지 않은 orders를 가져오는 API를 만들었는데,
이 API를 호출하면서 orders 테이블을 찾고, 그 과정에서 orders와 연결된 ordermoduledto 테이블을 추가적으로 찾는 N + 1 이 발생했고,
또 다시 orderitem 테이블을 쿼리하면서 약 30초간 쿼리 시간이 걸리는 문제가 발생했다.</p>

<p>다행히도, orderitem 테이블을 쿼리할 때는 N + 1 문제가 발생하지 않았다. 그 이유는 orderitem 테이블이 orders 테이블과 연결되어 있지만 
캐시되어 있기 때문이다.</p>

<h3 id="4-문제-해결">4. 문제 해결</h3>

<p>이 문제를 해결하기 위해서 일단 나는 <em>패치 조인</em>을 이용해서 해결했다.</p>

<h4 id="ordercompleterepositoryjava">OrderCompleteRepository.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">ac.su.kiosk.domain.OrderComplete</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">jakarta.transaction.Transactional</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.JpaRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.Modifying</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.Query</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">OrderCompleteRepository</span> <span class="kd">extends</span> <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="nc">OrderComplete</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">OrderComplete</span><span class="o">&gt;</span> <span class="nf">findAllByOrderId</span><span class="o">(</span><span class="nc">Long</span> <span class="n">orderId</span><span class="o">);</span>

    <span class="nd">@Transactional</span>
    <span class="nd">@Modifying</span>
    <span class="nd">@Query</span><span class="o">(</span><span class="s">"update OrderComplete oc set oc.complete = true where oc.id = :id"</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">updateById</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">);</span>

    <span class="nd">@Query</span><span class="o">(</span><span class="s">"select "</span> <span class="o">+</span>
            <span class="s">"oc from OrderComplete oc "</span> <span class="o">+</span>
            <span class="s">"JOIN FETCH oc.order o "</span> <span class="o">+</span>
            <span class="s">"JOIN FETCH o.orderModuleDTO omd "</span> <span class="o">+</span>
            <span class="s">"where oc.complete = :target"</span><span class="o">)</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">OrderComplete</span><span class="o">&gt;</span> <span class="nf">findAllByComplete</span><span class="o">(</span><span class="nc">Boolean</span> <span class="n">target</span><span class="o">);</span>

</code></pre></div></div>

<ol>
  <li>
    <p>처음에는 OrderComplete와 Order 테이블을 패치해 봤는데, 35초에 달하는 쿼리 속도가 약 28초 정도로 줄긴 했지만, 여전히 느리다.
그리고 ordermoduledto 테이블을 패치해 봤는데, 이 결과 약 1.7초로 줄어들어서 문제가 해결되었다.</p>
  </li>
  <li>
    <p><strong>Where in</strong> 을 이용해서 해결했는데, 이건 직접적으로 N + 1 쿼리를 줄이는 것은 아니지만,
이미 존재하던 코드의 방식으로는 select * from orderitem where orderID = ? 이런 식으로 쿼리를 날리는데,
이걸 where in을 이용해서 select * from orderitem where orderID in (?,?,?,…) 이런 식으로 쿼리를 날리는 방식으로 변경했다.
이는 타 프로젝트에서 쿼리 시간을 개선할 때 가장 큰 효과를 보았던 방식이다.</p>
  </li>
  <li>
    <p>그리고 <strong>batch size</strong>를 50으로 설정했는데, 프로젝트가 크지 않아서 이 정도의 배치 사이즈로도 큰 효과를 보았다.</p>
  </li>
</ol>

<h3 id="5-패치-조인">5. 패치 조인</h3>

<p>일단 패치 조인을 이용할 때, 내가 신경쓰였던 점은 List<OrderComplete> findAllByComplete(Boolean target); 이 메소드에서
리턴해야 할 객체가 List<OrderComplete> 인데,</OrderComplete></OrderComplete></p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    <span class="nv">"select "</span> <span class="o">+</span>
            <span class="nv">"oc from OrderComplete oc "</span> <span class="o">+</span>
            <span class="nv">"JOIN FETCH oc.order o "</span> <span class="o">+</span>
            <span class="nv">"JOIN FETCH o.orderModuleDTO omd "</span> <span class="o">+</span>
            <span class="nv">"where oc.complete = :target"</span>
            
</code></pre></div></div>

<p>이런 식으로 패치 조인을 이용하면 List<OrderComplete> 가 아닌 List&lt;Object[]&gt; 가 리턴될 수 있지 않을까? 라는 걱정이었다.
왜냐면 결과가 OrderComplete, Order, OrderModuleDTO 세 개의 객체가 조인된 객체가 리턴되기 때문이다.</OrderComplete></p>

<p>하지만 이런 걱정은 굳이 할 필요가 없었다. 스프링 JPA는 이런 경우에도 List<OrderComplete> 가 리턴된다.</OrderComplete></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>즉, JPQL 쿼리에서 

select oc from OrderComplete oc... 

와 같이 특정 엔티티를 선택하면, 
결과는 List&lt;OrderComplete&gt;로 반환되고, 이 경우 JPA는 OrderComplete 객체를 생성하고 
패치 조인으로 로드된 관련 엔티티(Order와 OrderModuleDTO)는 해당 객체의 필드에 자동으로 매핑된다.
</code></pre></div></div>

<p>그리고, 이번에 공부할 수 있었던 건, <strong>OrderComplete와 Order와는 연결되어 있지만, OrderModuleDTO는 연결되어 있지 않아도
패치 조인을 이용해서 Order를 타고 Order에 연결되어 있는 OrderModuleDTO를 가져올 수 있었다는 점이다.</strong></p>

<h3 id="6-마치며">6. 마치며</h3>

<p>N + 1 매핑을 해결하는 다양한 방법중에, 패치 조인을 이용한 방법을 정리해 보았다. 엔티티 그래프나 그 외의 
다양한 방법들이 존재하지만 과거에 이 방법을 사용했을 때 가장 효과적이었기 때문에 이 방법을 사용했고,
엔티티 그래프나 그 외의 방법들도 한 번 정리해 보고 싶다.</p>]]></content><author><name>ash tensor</name></author><category term="WEB" /><category term="JAVA" /><summary type="html"><![CDATA[[WEB][Spring] 스프링 N + 1 문제]]></summary></entry><entry><title type="html">[WEB][AWS] AWS Rekognition Face Detection Spring Boot 설정</title><link href="http://localhost:4000/web/java/2024/08/22/aws-rekognition-spring-setup.html" rel="alternate" type="text/html" title="[WEB][AWS] AWS Rekognition Face Detection Spring Boot 설정" /><published>2024-08-22T00:00:00+09:00</published><updated>2024-08-22T00:00:00+09:00</updated><id>http://localhost:4000/web/java/2024/08/22/aws-rekognition-spring-setup</id><content type="html" xml:base="http://localhost:4000/web/java/2024/08/22/aws-rekognition-spring-setup.html"><![CDATA[<h2 id="webaws-aws-rekognition-face-detection-spring-boot-설정">[WEB][AWS] AWS Rekognition Face Detection Spring Boot 설정</h2>

<h3 id="1-서론">1. 서론</h3>

<p>흔히 인터넷에서 많이 본 기능중에, 사진을 업로드하면 해당 사진 속의 얼굴을 인식하여 박스를 그리고, 얼굴의 감정 및 나이, 특징등을 
분석해서 보여주는 사진을 많이 보았을 것이다. 뜬금 없는 사진에서 역겨움이나 놀람, 행복 등으로 웃음을 주는 밈들을 생각해 보면 바로 떠올릴 수 있을 것이다.
…이런 식으로</p>

<p><img src="/img/posts/aws_face_rekognition/1.jpeg" width="80%" /></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
    </span><span class="nl">"faceDetails"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"boundingBox"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"width"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.38674828</span><span class="p">,</span><span class="w">
                </span><span class="nl">"height"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.37040558</span><span class="p">,</span><span class="w">
                </span><span class="nl">"left"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.30599424</span><span class="p">,</span><span class="w">
                </span><span class="nl">"top"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.19806679</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"ageRange"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"low"</span><span class="p">:</span><span class="w"> </span><span class="mi">20</span><span class="p">,</span><span class="w">
                </span><span class="nl">"high"</span><span class="p">:</span><span class="w"> </span><span class="mi">26</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"smile"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
                </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">99.86501</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"eyeglasses"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
                </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">99.99978</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"sunglasses"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
                </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">99.95743</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"gender"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">57.465927</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"beard"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
                </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">98.73258</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"mustache"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
                </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">99.56685</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"eyesOpen"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
                </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">99.998924</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"mouthOpen"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
                </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">99.27673</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"emotions"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CALM"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">100.0</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SAD"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.009685755</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CONFUSED"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.0065863132</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"DISGUSTED"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.0038862228</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ANGRY"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.003117323</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"HAPPY"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.0012536843</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SURPRISED"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">8.2701445E-4</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"FEAR"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">2.2947788E-4</span><span class="w">
                </span><span class="p">}</span><span class="w">
            </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p>일단 내 정장 사진을 입은 모습으로 테스트해 본 결과인데 나이는 20세에서 26세 정도로 나오고, 
웃음이 없고 안경을 썼으며, 남자로 판단하고, 수염은 없다고 판단하고, 눈은 떠있고, 입은 닫혀있으며, 감정은 차분하다고 판단했다.
혹시 몰라서 다른 사진으로도 테스트 해 보면</p>

<p><img src="/img/posts/aws_face_rekognition/2.jpeg" width="80%" /></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
    </span><span class="nl">"faceDetails"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
            </span><span class="s2">"ageRange"</span><span class="err">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"low"</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w">
                </span><span class="nl">"high"</span><span class="p">:</span><span class="w"> </span><span class="mi">16</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="err">...</span><span class="w">
            </span><span class="s2">"gender"</span><span class="err">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">99.85323</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="err">...</span><span class="w">
            </span><span class="s2">"emotions"</span><span class="err">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CALM"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">96.09375</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SURPRISED"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">2.1915436</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CONFUSED"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.54200494</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"DISGUSTED"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.11892319</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"HAPPY"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.086530045</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ANGRY"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.013077259</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SAD"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.003439188</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"FEAR"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">4.529953E-4</span><span class="w">
                </span><span class="p">}</span><span class="w">
            </span><span class="p">],</span><span class="w">
            </span><span class="err">...</span><span class="w">
</span><span class="err">}</span><span class="w">

</span></code></pre></div></div>

<p>일단 나이가 생각보다 정확하게 나온다는 점에서 놀랐는데, 일단 동양인의 얼굴은 나이가 보다 더 어려보이게 나오는 것 같기는 하다.
나의 경우에도 20세는 턱도 없이 어린 나이인데도 20세로 나오고, 카리나의 경우에는 10세에서 16세로 나왔다. 물론 AWS API이므로
만 나이겠지만, 아무리 그래도 10세는 너무 어린 나이로 나오는게 아닐까ㅋㅋㅋ 그리고 내 성별의 경우에도 남자일 확률이 57% 밖에는 
확신할 수 없다는 점이 좀 웃겼다.</p>

<p>아무튼, 이런 기능을 구현하기 위해서는 AWS Rekognition API를 사용하면 된다. 
내 다른 프로젝트에서 얼굴 인식, 즉 나이대와 성별을 체크하는 기능을 구현하고자 했는데 이를 위해서 AWS Rekognition API를 사용하였다.
그런데 AWS의 자습서 내용이 형편없기도 하고, 그리고 한국어로 된 Spring Boot에서 AWS Rekognition API를 사용하는 방법에 대한 자료가 많이 없어서
이렇게 직접 구현하면서 정리해보려고 한다.</p>

<h3 id="2-의존성-추가">2. 의존성 추가</h3>

<p>일단 메이븐의 경우에는 아래와 같이 의존성을 추가해주면 된다.</p>

<h4 id="pomxml">pom.xml</h4>
<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>com.amazonaws<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>aws-java-sdk-rekognition<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;version&gt;</span>1.12.770<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
   
</code></pre></div></div>

<p>자바 버전 17, 그리고 스프링 부트 버전 3.3.1을 사용했고, AWS Rekognition API의 버전은 1.12.770을 사용했다.
그래들의 경우에는</p>

<h4 id="buildgradle">build.gradle</h4>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
    </span><span class="err">implementation</span><span class="w"> </span><span class="err">'com.amazonaws:aws-java-sdk-rekognition:</span><span class="mf">1.12</span><span class="err">.</span><span class="mi">770</span><span class="err">'</span><span class="w">
    </span><span class="err">implementation</span><span class="w"> </span><span class="err">'com.amazonaws:aws-java-sdk-core:</span><span class="mf">1.12</span><span class="err">.</span><span class="mi">770</span><span class="err">'</span><span class="w">
    
</span></code></pre></div></div>

<p>이 의존성을 추가해 주어야 한다. 이 의존성을 추가해 주면 다음과 같은 경고 메시지가 나오는데</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2024-08-22T21:12:40.570+09:00  WARN 2168 --- [           main] com.amazonaws.util.VersionInfoUtils      : The 
AWS SDK for Java 1.x entered maintenance mode starting July 31, 2024 and will reach end of support on December 
31, 2025. For more information, see https://aws.amazon.com/blogs/developer/the-aws-sdk-for-java-1-x-is-in-
maintenance-mode-effective-july-31-2024/
You can print where on the file system the AWS SDK for Java 1.x core runtime is located by setting the AWS_JAVA_V1_
PRINT_LOCATION environment variable or aws.java.v1.printLocation system property to 'true'.
This message can be disabled by setting the AWS_JAVA_V1_DISABLE_DEPRECATION_ANNOUNCEMENT environment variable or 
aws.java.v1.disableDeprecationAnnouncement system property to 'true'.
The AWS SDK for Java 1.x is being used here:
</code></pre></div></div>

<p>이런 경고 메시지가 나오는데, 이는 AWS SDK for Java 1.x가 2025년 12월 31일까지 지원이 중단된다는 것을 알려주는 메시지이다.
메이븐 센트럴에서도 확인해 봤지만 일단 1.x 버전이 최신 버전이라서 1.x 버전을 사용해야 하는 것 같다. 2 버전은 출시되지는 않았다.</p>

<p><img src="/img/posts/aws_face_rekognition/3.png" width="80%" /></p>

<h3 id="3-aws-키-설정">3. AWS 키 설정</h3>

<p>그리고 AWS Rekognition API를 사용하기 위해서는 AWS키를 설정해 주어야 하는데, 나는 귀찮아서 루트키를 발급 받았지만 AWS에서는 IAM 사용자를 생성해서
키를 생성하는 것을 권장하고 있다. IAM 사용자를 생성하고, 해당 사용자에게 RekognitionFullAccess 권한을 부여하고, 해당 사용자의 키를 사용하면 된다.</p>

<p>혹시라도 어떻게 하는지 모르겠으면 <a href="&quot;https://aws.amazon.com/de/blogs/security/wheres-my-secret-access-key/&quot;">여기</a>를 참고하면 된다.</p>

<p><img src="/img/posts/aws_face_rekognition/4.png" width="80%" /></p>

<p>그리고 원래는 환경변수로 설정해 주는 것을 권장하지만, 일단 빠른 테스트를 위해 application.properties에 직접 삽입했다.</p>

<h4 id="applicationproperties">application.properties</h4>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="py">aws.accessKeyId</span><span class="p">=</span><span class="s">your-access-key</span>
<span class="py">aws.secretKey</span><span class="p">=</span><span class="s">your-secret-key</span>

</code></pre></div></div>

<h3 id="4-awsrekognitionconfiguration">4. AWSRekognitionConfiguration</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">com.amazonaws.auth.AWSStaticCredentialsProvider</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.auth.BasicAWSCredentials</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.regions.Regions</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.rekognition.AmazonRekognition</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.rekognition.AmazonRekognitionClientBuilder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AwsRekognitionConfiguration</span> <span class="o">{</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${aws.access-key}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">accessKey</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${aws.secret-key}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">secretKey</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">AmazonRekognition</span> <span class="nf">amazonRekognition</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">BasicAWSCredentials</span> <span class="n">credentials</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BasicAWSCredentials</span><span class="o">(</span><span class="n">accessKey</span><span class="o">,</span> <span class="n">secretKey</span><span class="o">);</span>
        <span class="k">return</span> <span class="nc">AmazonRekognitionClientBuilder</span>
                <span class="o">.</span><span class="na">standard</span><span class="o">()</span>
                <span class="o">.</span><span class="na">withRegion</span><span class="o">(</span><span class="nc">Regions</span><span class="o">.</span><span class="na">EU_WEST_1</span><span class="o">)</span>
                <span class="o">.</span><span class="na">withCredentials</span><span class="o">(</span><span class="k">new</span> <span class="nc">AWSStaticCredentialsProvider</span><span class="o">(</span><span class="n">credentials</span><span class="o">))</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<p>이렇게 AWSRekognitionConfiguration을 만들어서 AmazonRekognition 객체를 Bean으로 등록해 주면 된다. 
이 이후에는 AWSRekognitionService를 만들어서 실제 얼굴 인식을 하는 메소드를 만들어 주면 된다.</p>

<h3 id="5-awsrekognitionservice-및-awsrekognitioncontroller-생성">5. AWSRekognitionService 및 AWSRekognitionController 생성</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.rekognition.AmazonRekognition</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.rekognition.model.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.multipart.MultipartFile</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.ByteBuffer</span><span class="o">;</span>

<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AwsRekognitionService</span> <span class="o">{</span>
    
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">AmazonRekognition</span> <span class="n">client</span><span class="o">;</span>

    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">DetectFacesResult</span> <span class="nf">detectFacesRequest</span><span class="o">(</span><span class="nc">MultipartFile</span> <span class="n">multipartFile</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">DetectFacesRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DetectFacesRequest</span><span class="o">()</span>
                <span class="o">.</span><span class="na">withImage</span><span class="o">(</span><span class="k">new</span> <span class="nc">Image</span><span class="o">().</span><span class="na">withBytes</span><span class="o">(</span><span class="nc">ByteBuffer</span><span class="o">.</span><span class="na">wrap</span><span class="o">(</span><span class="n">multipartFile</span><span class="o">.</span><span class="na">getBytes</span><span class="o">())))</span>
                <span class="o">.</span><span class="na">withAttributes</span><span class="o">(</span><span class="nc">Attribute</span><span class="o">.</span><span class="na">ALL</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">client</span><span class="o">.</span><span class="na">detectFaces</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="kn">import</span> <span class="nn">com.amazonaws.services.rekognition.model.DetectFacesRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.rekognition.model.DetectFacesResult</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.example.awsrekognition.service.AwsRekognitionService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.http.ResponseEntity</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.multipart.MultipartFile</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>

<span class="nd">@RestController</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AwsRekognitionRestController</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">AwsRekognitionService</span> <span class="n">awsRekognitionService</span><span class="o">;</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/images/test-face"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">DetectFacesResult</span><span class="o">&gt;</span> <span class="nf">detectFaces</span><span class="o">(</span><span class="nd">@RequestPart</span> <span class="nc">MultipartFile</span> <span class="n">image</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">(</span><span class="n">awsRekognitionService</span><span class="o">.</span><span class="na">detectFacesRequest</span><span class="o">(</span><span class="n">image</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>이러면 이미지를 업로드하면 해당 이미지의 얼굴을 인식하는 기능을 구현할 수 있다.</p>

<h3 id="6-마무리">6. 마무리</h3>

<p>이렇게 AWS Rekognition API를 사용하여 Spring Boot에서 얼굴 인식을 구현하는 방법을 정리해 보았다.
이런 방법 말고도 S3 버킷에 이미지를 업로드하면 해당 이미지의 URL을 가져와서 얼굴 인식을 하는 방법도 있긴 하고,
여러 사진 중에서 해당 사진의 얼굴을 찾는 방법도 있다. 아마도 출입국 심사대나 보안 설정 같은 곳에서 유용하게 사용할 수 있지 않을까 싶다.</p>

<p>끝!</p>]]></content><author><name>ash tensor</name></author><category term="WEB" /><category term="JAVA" /><summary type="html"><![CDATA[AWS Rekognition API를 사용하여 Spring Boot에서 얼굴 인식을 구현.]]></summary></entry><entry><title type="html">[WEB][GCP] Spring Boot에서 GCP Bucket에 파일 업로드하기</title><link href="http://localhost:4000/web/java/2024/08/20/spring-gcp-bucket.html" rel="alternate" type="text/html" title="[WEB][GCP] Spring Boot에서 GCP Bucket에 파일 업로드하기" /><published>2024-08-20T00:00:00+09:00</published><updated>2024-08-20T00:00:00+09:00</updated><id>http://localhost:4000/web/java/2024/08/20/spring-gcp-bucket</id><content type="html" xml:base="http://localhost:4000/web/java/2024/08/20/spring-gcp-bucket.html"><![CDATA[<h2 id="webgcp-spring-boot에서-gcp-bucket에-파일-업로드하기">[WEB][GCP] Spring Boot에서 GCP Bucket에 파일 업로드하기</h2>

<h3 id="문제-설명">문제 설명</h3>

<p>사실 구현한지는 두달은 된 것 같은데, 프로젝트를 제대로 정리할 시간이 없다 보니까 이제서야 정리하게 되었다.
음, 일단 AWS S3보다 GCP 클라우드 버켓을 사용하는 경우가 더 적다 보니까, 인터넷에 잘 정리되어 있는 자료가 많지 않았다.
물론 클라우드 버켓이 S3보다 더 좋은 서비스를 제공하지는 않지만, AWS의 프리티어보다 GCP 프리티어의 제공량이 더 많기도 하고,
새 계정을 만들 경우에는 300$ 크레딧을 제공하기 때문에, 한번 새로운 계정을 만들어서 사용하는 것도 나쁘지 않다.</p>

<p>사실 GCP 버켓에 파일을 업로드하는 것은 AWS S3에 파일을 업로드하는 것과 크게 다르지 않다.</p>

<h3 id="gcpconfig">GCPConfig</h3>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
    </span><span class="err">dependencies</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">'implementation</span><span class="w"> </span><span class="err">'com.google.cloud:spring-cloud-gcp-starter-storage:</span><span class="mf">5.3</span><span class="err">.</span><span class="mi">0</span><span class="err">'</span><span class="w">
    </span><span class="p">}</span><span class="w">
    
</span></code></pre></div></div>

<p>일단 gradle에 위와 같은 의존성을 추가해 준다. GPT는 starter 의존성을 추가하는게 아니라.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="err">implementation</span><span class="w"> </span><span class="err">'com.google.cloud:google-cloud-storage:latest_version'</span><span class="w">

</span></code></pre></div></div>

<p>이렇게 개별 의존성을 추가하는 식으로 조언해 주는데, 공식 문서에서는 starter 의존성을 추가하는 방향으로
설명하고 있어서, 해당 의존성을 추가했다.
그리고 GCP 버켓에 접속할 수 있도록 서비스 계정을 생성하고 인증 키를 만들어야 한다.</p>

<p><img src="/img/posts/gcp/bucket/1.png" width="80%" /></p>

<ol>
  <li>Google Cloud Console에 접속.</li>
  <li>IAM &amp; Admin &gt; Service Accounts에서 새로운 서비스 계정을 생성.</li>
  <li>서비스 계정에 적절한 역할(예: Storage Admin 또는 Storage Object Admin)을 부여.</li>
  <li>서비스 계정의 키를 생성하고 JSON 파일을 다운로드.</li>
</ol>

<h3 id="환경변수-추가">환경변수 추가</h3>

<p>그리고 해당 키를 스프링에서 사용할 수 있게 하기 위해서 해당 키 파일을 환경변수로 설정해주거나, 
직접 키 파일을 프로젝트 내에 삽입하는 방법이 있다. 물론 보안상으로 당연히 환경변수로 설정하는 것이 좋다.
mac 기준으로 자신의 .zshrc에 해당 키를 환경변수로 설정해주면 된다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nb">sudo </span>nano ~/.zshrc

// 해당 키를 환경변수로 설정<span class="o">(</span>마지막줄에 추가해주면 된다<span class="o">)</span>

<span class="nb">export </span><span class="nv">GOOGLE_APPLICATION_CREDENTIALS</span><span class="o">=</span><span class="s2">"/path/to/your-service-account-file.json"</span>

</code></pre></div></div>

<p>배포때도 해당 키를 환경변수로 설정해주면 되는데, 서버의 경우 대부분이 우분투이기 때문에 .bashrc에 해당 키를 설정해주면 된다.
그리고 로컬 환경에서 해당 키를 설정해 주었는데도 오류가 나는 경우가 있는데, 배포는 문제 없이 잘 작동하는데 로컬에서만 오류가 나는 경우가 있었다.
내 경우에는 IntelliJ에서 해당 키를 인식하지 못한게 그 이유였는데 이를 해결하기 위해서는 인텔리제이의 환경변수에 해당 키를 추가해주면 된다.</p>

<p>인텔리제이에서 해당 키를 직접 추가하는 방법으로는</p>

<ol>
  <li>Run &gt; Edit Configurations</li>
</ol>

<p><img src="/img/posts/gcp/bucket/2.png" width="80%" /></p>

<ol>
  <li>Environment Variables에 해당 키를 추가해주면 된다.</li>
</ol>

<p><img src="/img/posts/gcp/bucket/3.png" width="80%" /></p>

<h3 id="gcpconfigjava">GcpConfig.java</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">ac.su.kiosk.config</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.google.auth.oauth2.GoogleCredentials</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.google.cloud.storage.Storage</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.google.cloud.storage.StorageOptions</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.FileInputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">GCPConfig</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">GCPConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">Storage</span> <span class="nf">storage</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">credentialsPath</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">getenv</span><span class="o">(</span><span class="s">"GOOGLE_APPLICATION_CREDENTIALS"</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">credentialsPath</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"GOOGLE_APPLICATION_CREDENTIALS environment variable is not set."</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Using GOOGLE_APPLICATION_CREDENTIALS from: "</span> <span class="o">+</span> <span class="n">credentialsPath</span><span class="o">);</span>

        <span class="k">try</span> <span class="o">(</span><span class="nc">FileInputStream</span> <span class="n">credentialsStream</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="n">credentialsPath</span><span class="o">))</span> <span class="o">{</span>
            <span class="nc">GoogleCredentials</span> <span class="n">credentials</span> <span class="o">=</span> <span class="nc">GoogleCredentials</span><span class="o">.</span><span class="na">fromStream</span><span class="o">(</span><span class="n">credentialsStream</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">createScoped</span><span class="o">(</span><span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"https://www.googleapis.com/auth/cloud-platform"</span><span class="o">));</span>
            <span class="k">return</span> <span class="nc">StorageOptions</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">().</span><span class="na">setCredentials</span><span class="o">(</span><span class="n">credentials</span><span class="o">).</span><span class="na">build</span><span class="o">().</span><span class="na">getService</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"Failed to load GoogleCredentials from path: "</span> <span class="o">+</span> <span class="n">credentialsPath</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
            <span class="k">throw</span> <span class="n">e</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>이렇게 GCPConfig를 만들어서 Storage를 Bean으로 등록해주면 된다. 
이렇게 하면 GCP 버켓에 접근할 수 있는 Storage 객체를 사용할 수 있다.</p>

<ul>
  <li>파일 입력 스트림 생성
  FileInputStream credentialsStream = new FileInputStream(credentialsPath):
  지정된 경로의 인증 파일(JSON)을 읽기 위해 파일 입력 스트림을 생성.
  try-with-resources 문을 사용하여 스트림이 자동으로 닫히도록 함.</li>
  <li>
    <p>GoogleCredentials 객체 생성 및 스코프 설정
  GoogleCredentials.fromStream(credentialsStream):
  파일 입력 스트림에서 인증 정보를 읽어와 GoogleCredentials 객체를 생성.
  .createScoped(List.of(“https://www.googleapis.com/auth/cloud-platform”)):
  필요한 OAuth 2.0 스코프를 설정.
  여기서는 cloud-platform 스코프를 사용하여 GCP의 모든 리소스에 대한 액세스 권한을 부여.
  필요에 따라 더 제한적인 스코프를 설정할 수 있음.
  https://www.googleapis.com/auth/devstorage.read_only: 읽기 전용 액세스</p>

    <p>https://www.googleapis.com/auth/devstorage.read_write: 읽기 및 쓰기 액세스</p>

    <p>https://www.googleapis.com/auth/devstorage.full_control: 완전한 제어 권한</p>
  </li>
  <li>Storage 객체 생성
  StorageOptions.newBuilder().setCredentials(credentials).build().getService():
  StorageOptions 빌더를 사용하여 GoogleCredentials를 설정하고 Storage 서비스 객체를 생성.
  이렇게 생성된 Storage 객체를 반환하여 애플리케이션 내에서 GCS와 상호 작용할 수 있도록 함.</li>
</ul>

<h3 id="storageservicejava">StorageService.java</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">com.google.cloud.storage.BlobInfo</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.google.cloud.storage.Storage</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.RequiredArgsConstructor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RestController</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.multipart.MultipartFile</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>

<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StorageService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Storage</span> <span class="n">storage</span><span class="o">;</span>
    
    <span class="c1">// application.properties에 설정한 버킷 이름을 가져옴</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${spring.cloud.gcp.storage.bucket-name}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">bucketName</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">uploadFile</span><span class="o">(</span><span class="nc">MultipartFile</span> <span class="n">file</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">blobName</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="na">getOriginalFilename</span><span class="o">();</span>
        <span class="nc">BlobInfo</span> <span class="n">blobInfo</span> <span class="o">=</span> <span class="n">storage</span><span class="o">.</span><span class="na">create</span><span class="o">(</span>
                <span class="nc">BlobInfo</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">(</span><span class="n">bucketName</span><span class="o">,</span> <span class="n">blobName</span><span class="o">).</span><span class="na">build</span><span class="o">(),</span>
                <span class="n">file</span><span class="o">.</span><span class="na">getBytes</span><span class="o">()</span>
        <span class="o">);</span>
        <span class="k">return</span> <span class="n">blobInfo</span><span class="o">.</span><span class="na">getMediaLink</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>uploadFile 메소드는 업로드된 파일의 URL을 반환한다. 나는 application.properties에 버킷 이름을 설정했는데, 
문자열로 직접 설정해도 상관 없다.</p>

<h3 id="storagecontrollerjava">StorageController.java</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    <span class="nd">@RestController</span>
    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/upload_test"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">restImage</span><span class="o">(</span><span class="nd">@RequestPart</span><span class="o">(</span><span class="s">"file"</span><span class="o">)</span> <span class="nc">MultipartFile</span> <span class="n">file</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">message</span> <span class="o">=</span> <span class="n">storageService</span><span class="o">.</span><span class="na">uploadFile</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
            <span class="nc">TestEntity</span> <span class="n">test</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TestEntity</span><span class="o">();</span>
            <span class="n">test</span><span class="o">.</span><span class="na">setTestString</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
            <span class="n">testRepo</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">test</span><span class="o">);</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nc">ResponseEntity</span><span class="o">&lt;&gt;(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">CREATED</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nc">ResponseEntity</span><span class="o">&lt;&gt;(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">INTERNAL_SERVER_ERROR</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
</code></pre></div></div>

<p>이렇게 파일을 업로드하는 컨트롤러를 만들어주면 된다. 업로드된 파일의 URL을 반환하고, 해당 URL을 DB에 저장하는 식으로 구현했다.
그리고 해당 컨트롤러는 RestController인데 파일을 업로드 하는 경우에, @RequestPart를 사용해야 한다.
이 부분에서 트러블슈팅에 시간이 많이 걸렸는데 @RequestBody나 @RequestParam을 사용하면 파일을 업로드할 수 없다.</p>

<p>@RequestPart와 @RequestParam, @RequestBody 가 정확히 뭔지 모르고 막연하게 사용하다가 이런 문제가 생겼는데, 이번에
확실히 정리하게 되어서 오히려 좋은 기회가 되었다고 생각한다.</p>

<h3 id="requestpart와-requestparam-requestbody">RequestPart와 RequestParam, RequestBody</h3>

<h4 id="requestpart에-대한-자세한-설명">@RequestPart에 대한 자세한 설명</h4>

<p>@RequestPart는 Spring MVC에서 멀티파트 요청(multipart request)에서 특정한 파트를 매핑하기 위해 사용되는 어노테이션이다. 
주로 파일 업로드 또는 복합 데이터(파일 + JSON 객체 등)를 처리할 때 사용되는데, 다음과 같은 시나리오에서 사용된다.</p>

<ol>
  <li>파일 업로드 시, 파일을 받기 위해 사용.</li>
  <li>파일과 함께 전송되는 다른 데이터를 받기 위해 사용.</li>
  <li>JSON 데이터와 파일을 함께 처리할 때 사용.</li>
</ol>

<h4 id="주요-특징">주요 특징</h4>
<ol>
  <li>다양한 데이터 타입 처리: @RequestPart는 MultipartFile뿐만 아니라, 문자열, JSON 객체, POJO 등 다양한 타입을 처리할 수 있다.</li>
  <li>
    <p>멀티파트 요청과 JSON 객체: 파일 외에도 JSON 객체를 함께 전송할 수 있으며, 이를 각각의 파트로 분리하여 처리할 수 있다.</p>
  </li>
  <li>
    <p>JSON 파싱 및 파일 업로드
@RequestPart는 JSON 데이터를 자동으로 파싱하여 POJO로 변환할 수 있으며, 동시에 파일 업로드도 처리할 수 있다. 이러한 기능은 파일과 관련된 메타데이터를 함께 처리해야 할 때 매우 유용하다.</p>
  </li>
  <li>Content-Type 헤더 요구사항
@RequestPart: multipart/form-data로 인코딩된 요청에서 특정 파트를 처리하는 데 적합하며, JSON 객체를 포함하는 멀티파트 요청의 <strong>Content-Type</strong>이 multipart/form-data로 지정되어야 한다.
@RequestParam: application/x-www-form-urlencoded와 같은 단순 폼 데이터에 적합하며, JSON 데이터를 처리하기에는 제한적.</li>
</ol>

<h4 id="requestbody와-requestpart의-차이점">@RequestBody와 @RequestPart의 차이점</h4>
<ol>
  <li>@RequestBody
주요 목적: HTTP 요청의 본문(body)에 포함된 데이터를 직접 매핑하여 자바 객체로 변환하는 데 사용된다.</li>
</ol>

<p>지원하는 Content-Type: @RequestBody는 주로 JSON, XML, plain text 등과 같은 데이터를 처리하는 데 사용된다. 이 경우 요청의 Content-Type이 application/json 또는 application/xml 같은 형식이 된다.</p>

<p>사용 사례:</p>

<p>단순한 JSON 객체를 자바 객체로 매핑할 때 주로 사용됨.
예를 들어, 클라이언트가 JSON으로 인코딩된 데이터를 전송하고, 서버가 이를 자바 객체로 변환하여 처리하는 경우에 적합함.</p>]]></content><author><name>ash tensor</name></author><category term="WEB" /><category term="JAVA" /><summary type="html"><![CDATA[[WEB][GCP] Spring Boot에서 GCP Bucket에 파일 업로드하기]]></summary></entry><entry><title type="html">[자격증][실기] 빅데이터 분석기사 2024년 1회(8회)실기 합격 후기</title><link href="http://localhost:4000/%EC%9E%90%EA%B2%A9%EC%A6%9D/2024/08/20/bigdata-processing-engineer.html" rel="alternate" type="text/html" title="[자격증][실기] 빅데이터 분석기사 2024년 1회(8회)실기 합격 후기" /><published>2024-08-20T00:00:00+09:00</published><updated>2024-08-20T00:00:00+09:00</updated><id>http://localhost:4000/%EC%9E%90%EA%B2%A9%EC%A6%9D/2024/08/20/bigdata-processing-engineer</id><content type="html" xml:base="http://localhost:4000/%EC%9E%90%EA%B2%A9%EC%A6%9D/2024/08/20/bigdata-processing-engineer.html"><![CDATA[<h2 id="자격증실기-빅데이터-분석기사-2024년-1회8회실기-합격-후기-및-시험-문제">[자격증][실기] 빅데이터 분석기사 2024년 1회(8회)실기 합격 후기 및 시험 문제</h2>

<h3 id="합격-인증">합격 인증</h3>

<p><img src="/img/posts/bigdata/3.png" width="80%" /></p>

<p>솔직히 좀 부끄럽긴 한데… 3과목 점수가 5점밖에 안나와서 남 보여줄만한 점수는 아니긴 해도, 일단 합격은 합격이니까.</p>

<h3 id="시험-총평">시험 총평</h3>

<p>나는 시험을 동부자격검정센터에서 실기 시험을 봤는데 생각보다 시험장이 조금 작긴 했다. 
일단 태릉입구 근방 주민은 쉽게 찾아갈 수 있는게, BYC 직영매장 근처에 바로 시험장이 있어서 찾아가기 쉽다.</p>

<p>일단 빅데이터 분석기사의 실기 시험을 공부하며 내가 느꼈던 점은, 필기가 더 어렵고, 실기가 더 쉽다고 느꼈던 점이었다.</p>

<h4 id="1과목">1과목</h4>

<p><img src="/img/posts/bigdata/6.png" width="80%" /></p>

<p>(8회 시험에서는 약 몇백줄 되는 CSV를 제공했는데 다양한 나라의 맥주 판매? 소비 데이터 중에서 특정 조건에 맞는 나라의 정보를 추출하는 문제였다.
즉 꼭 저런 식의 전처리 문제만 나오는 건 아니다..!)
1과목은 데이터 전처리 과목인데, 판다스 라이브러리 등을 사용해서 기초적인 데이터 조작을 할 수 있는지를 묻는 문제인데,
파이썬을 쓸 줄만 안다면 누구나 이 문제를 풀 수 있다. 왜냐하면 help와 dir 명령어를 사용할 수 있기 때문에 pandas를 사용하지 못한다고 하더라도
도움을 받을 수 있기 때문이다. 사실상 30점은 기본으로 가져가는 점수라고 생각한다.</p>

<h4 id="2과목">2과목</h4>

<p><img src="/img/posts/bigdata/7.png" width="80%" /></p>

<p>2과목은 분석 모델링 과목인데, 회귀 모델이나 분류 모델을 사용해서 주어진 문제에 따른 데이터를 반환하는 문제다.
이 문제는 40점 배점으로 이 문제도 어려운 문제는 아니다. 내 기준으로 RMSE가 100에서 120 사이에 있었는데 40점으로 만점을 받았다.</p>

<p>8회차 문제를 설명하자면, 두 지하철역의 주요 변수(이름, 날씨, 기온, 습도, 풍속, 미세먼지 등)를 이용해서 두 지하철역의 승하차 인원을 예측하는 문제였다.</p>

<p>일단 2과목에서 점수를 받지 못하면 합격이 어렵다고 봐야 한다. 2유형은 40점이라 배점이 크기도 하지만, 아예 0점이 나오는 경우가 많아서 
숙달될 수 있을 정도로 코드를 써보는 편이 좋다.
내 경험상 2유형을 정리해 보자면 일단 <strong>원본 데이터를 잘 살펴 봐야 한다.</strong> 예를 들어서, 범주형 변수인 경우에는
라벨 인코딩 보다는(물론 안하는 것보다는 성능이 좋겠지만) pandas의 get_dummies를 이용하는 원핫 인코딩을 사용하는 것이 좋다.</p>

<p>또한, 이번 8회차 시험 문제를 설명했듯이, 두 지하철역의 승하차 인원을 예측하는 문제였는데, 꽤 많은 사람들이 <strong>지하철 역 이름</strong>을 변수로 사용하지 않아서 
점수가 낮게 나왔는데(문제에서는 A역 B역으로 주어졌다) 아마도 A역, B역으로 익명화 되어 있어서 변수로 사용하지 않은 건 이해한다. 하지만 우리가 
실제 지하철 역을 이용할 때 항상 집에서 가까운 지하철 역을 이용하는 것처럼, 강남의 유동인구가 많기 때문에 강남역은 당연히 노선도의 끝의 지하철 역보다는
이용자수가 많을 것이 분명하다.</p>

<p>이런 점을 고려하지 않고 지하철 역 이름을 변수로 사용하지 않은 사람들이 많았는데, 물론 사용하지 않다고 하더라도 점수를 받을 수는 있지만 내가 시험장에서 해당 데이터를 기반으로
분석했을때, 해당 변수가 설명력이 가장 높은 변수였기 때문에 아마 점수가 조금 떨어졌을 것이다. 이렇듯 어느정도 실제 데이터를 살펴보는게 중요하다!</p>

<p><img src="/img/posts/bigdata/4.png" width="80%" /></p>

<p>그리고 돌아다니는 팁으로 랜덤포레스트 회귀 &amp; 분류를 암기해 가는 2과목 팁이 존재하는데 실제로 이 방법이 가장 좋은 것 같다. 실제 시험장에서 
결측치와 이상치 제거를 수행한 뒤에 선형 회귀 및 다양한 모델을 사용해서 예측을 수행했는데, 그냥 원 핫 인코딩을 적용한 랜덤포레스트 회귀가 가장 좋은 성능을 보였다.</p>

<p>그리고 0점 나오는 경우가 많았는데, 이는 csv 파일을 저장하지 않은 경우도 있겠지만 <strong>정답 행 갯수보다 적거나 많은 행을 제출</strong>해서 그렇다.
이런 경우에는 0점이 나올 수 있기 때문에 주의해야 한다. 앞에 있던 사진처럼 총 행의 갯수(학습용 데이터 수, 평가용 데이터 수)를 제공해주기 때문에 
무조건 csv 파일을 제출할 때 정답 행 갯수와 같은지 len() 함수 등을 이용해서 <strong>꼭꼭</strong> 확인해야 한다!!</p>

<h4 id="3과목">3과목</h4>

<p><img src="/img/posts/bigdata/8.png" width="80%" /></p>

<p>물론 5점 맞은 주제에 무슨 후기냐 싶겠지만, 변명을 하자면 문제가 두문제 나오는데, 각각 5점짜리 소문항 3개씩 15점짜리 문제 두 개였다.
각각 문제는 1번 소문항이 틀리면 나머지 두개의 문항도 모두 틀리는 구조이기 때문에 2번 문항에서 t-검정의 유의구간을 반대로 설정하는 
실수를 저질러서 모두 다 틀려버리고 말았다….</p>

<p>개인적으로는 3과목이 가장 어려운 과목이라고 생각하고, 앞으로도 계속 어려워 질 것이라고 생각한다.
그 이유는 일단 지금 3과목에서는 통계적 검정을 주로 물어보기는 하지만 꼭 통계적 검정(t 검정 혹은 카이제곱 검정)을 물어보지 않을 수도 있다는 점이다.
실제로 저 예시 문제에서 나온 것처럼 선형 회귀의 계수나 변수 중요도, 오즈비를 물어보는 경우가 대부분이었다.
실제 기 치뤄진 시험의 기출문제에서도 다른 통계적 지식을 물어보는 경우가 있었는데 이런 경우에는 정말 어려운 문제가 나올 수 있다고 느꼈다. 
게다가 빅분기 특성상 기출문제도 정확하지 않기 때문에, 추후에 이 시험의 난이도를 올리고자 한다면 2과목 점수를 낮추고 3과목 점수를 올리는 식으로 
변별력을 줄 수도 있지 않을까? 그런 생각이 들었다.</p>

<p><img src="/img/posts/bigdata/5.png" width="80%" /></p>

<p>게다가, 지금은 1과목과 2과목을 모두 맞추면 70점으로 무조건 합격이 가능하기에 떠도는 팁으로는 1과목 2과목만 준비해서 특정 방법(랜덤포레스트 회귀 또는 분류)
만 달달 외워서 시험보는 편이 팁이라고 돌아다니는데, 랜덤포레스트 특성상 이런 시험의 데이터 셋에서는 어느정도 무조건적으로 성능이 좋게 나올 수 밖에는 
없기 때문에… 시험 점수 등을 조정해서 3과목을 공부할 수 밖에는 없게끔 시험을 언젠가 바꿀 수도 있지 않을까 생각이 들었다.</p>

<h3 id="마치며">마치며</h3>

<p>빅데이터 분석기사는 일단 필기를 합격했다면 실기는 수월하게 합격할 수 있는 시험이라고 느꼈다. 비록 작업형 시험이기는 하지만 코드가 정말 익숙하지 않은 사람이라도 
충분히 합격할 수 있는 시험이다. 
일단 수험서로는 ㅇㄱㅈ 출판사의 책을 사용했는데, 솔직히 별로 좋지 않았다고 할 수 밖에는 없다. 내용이 완전 틀린 내용이 실려있기도 했고,
해설과 본문 내용이 충돌되는 경우도 많았다. 다른 출판사의 책을 보지는 않았지만 사는 것이 더 좋지 않을까? 그런 생각은 있다. 적어도 2024년에는..</p>

<p>아무튼, 이렇게 빅데이터 분석기사 24년 1회 후기를 마친다!!</p>]]></content><author><name>ash tensor</name></author><category term="자격증" /><summary type="html"><![CDATA[[자격증][실기] 빅데이터 분석기사 2024년 1회(8회)실기 합격 후기 및 시험 문제]]></summary></entry><entry><title type="html">[자격증][실기] 정보처리기사 2024년 1회 실기 합격 후기</title><link href="http://localhost:4000/%EC%9E%90%EA%B2%A9%EC%A6%9D/2024/08/06/engineer-information-processor.html" rel="alternate" type="text/html" title="[자격증][실기] 정보처리기사 2024년 1회 실기 합격 후기" /><published>2024-08-06T00:00:00+09:00</published><updated>2024-08-06T00:00:00+09:00</updated><id>http://localhost:4000/%EC%9E%90%EA%B2%A9%EC%A6%9D/2024/08/06/engineer-information-processor</id><content type="html" xml:base="http://localhost:4000/%EC%9E%90%EA%B2%A9%EC%A6%9D/2024/08/06/engineer-information-processor.html"><![CDATA[<h2 id="자격증실기-정보처리기사-2024년-1회-실기-합격-후기">[자격증][실기] 정보처리기사 2024년 1회 실기 합격 후기</h2>

<h3 id="합격-인증">합격 인증</h3>

<p><img src="/img/posts/information_processor/1.png" width="80%" /></p>

<p><img src="/img/posts/information_processor/2.png" width="80%" /></p>

<p>정보처리기사를 합격하고 합격한 내용을 정리해야지 생각했는데, 너무 바빠서 이제야 정리를 하게 되었다. 일단 정보처리기사와 같은 산업인력공단에서 주관하는 시험은
합격한 다음에 결과가 너무 늦게 나오기 때문에 솔직히 조금 짜증나는 감도 있다.</p>

<p>가채점 등으로 내가 합격했다고 생각이 들지만서도 결과가 나오기 전까지는 불안한 마음이 너무 들기 떄문에… 게다가 이번에는 이상이 있는 문제가 너무 많이 나와서
합격한 것이 맞는지도 의심이 들기도 했다. 벌써 2회차 시험이 끝났지만 일단 지금이라도 합격한 내용을 정리해보도록 하겠다.</p>

<h3 id="시험-총평">시험 총평</h3>

<p>일단 다양한 곳에서 제공하는 복원 문제를 본다면 당연히 알겠지만, 1회차 시험은 작년 3회차 시험에 비해 쉬운 시험이었다.
작년 3회차 시험은 일단 완전수 문제라고 부르는 1부터 100까지 계산해야되는 3중 for 문 문제와 더불어, 보기를 제공하지 않는 시험이었기 때문에
그 체감이 더 두드러졌던 것 같다.</p>

<p>개인적으로 정보처리기사 시험은 공부해 본 결과 코드 문제가 많이 나오면 나올수록 더 쉬운 시험이라고 생각하는데, 왜냐하면 외워야 하는 양이
정보처리기사의 경우에는 넓기 떄문에 코드 문제가 아닌 지식을 요구하는 문제가 나오면 더 잘 기억하는 사람이 합격하기 때문이다.
이번 시험도, 그리고 2024년 2회차 시험도 코드 문제가 많이 나오는 기조는 동일했다고 들었다. 
게다가 1회차 시험에서는 보기를 제공하는 문제가 많이 나왔다. 예를 들어서 <strong>디자인패턴</strong> 문제, 그리고 <strong>정보보안</strong>관련 문제에서 보기를 제공하고 
올바른 보기를 골라 쓰라는 문제가 나왔는데, 이와 같은 경우에는 공부를 했으면 정확히 암기하지 않는다고 하더라도 맞출 수 있는 내용이라 
흔히 말하는 ‘억까’ 문제가 나오지 않아서 좋았다. 내 기억에는 커버리지 관련 내용도 보기를 제공했던 것 같아서 15점은 무조건 맞출 수 있었다.</p>

<p>그리고 특이했던 점으로는 데이터베이스 파트에서 올바른 정규화 단계를 작성하라는 문제가 나왔는데 이런 문제는 기존에 나오지 않았던 문제라서
당황할 수 있었다. 내가 틀린 문제중에 하나였다.</p>

<p>프로그래밍 파트에서 -내가 생각하기에- 오류 문항이 두 문제 있었는데, 첫번째로는 C 관련 문제에서 return 문이 없어서 전원 정답 처리된 문제와
자바 실행 순서 관련 문제가 있었다. 자바 실행순서 관련 문제는, 개인적으로는 문제가 잘못되었다고 생각하는데, 문제는 다음과 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">// 10. 답안 : 6 3 1 7 2</span>
<span class="c1">// - JAVA언어, 상속 실행 순서, 5 → ( ) → ( ) → ( ) → ( ) → ( ), 번호 중복없이 작성</span>
<span class="c1">// - 출제 : [프로그래밍 언어21 - 2.JAVA언어 – 4)생성자, 상속, 오버라이딩, 오버로딩, 추상 클래스]</span>

<span class="kd">class</span> <span class="nc">ClassOne</span> <span class="o">{</span>
	<span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">;</span>
	<span class="nc">ClassOne</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">// ①</span>
		<span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kt">int</span> <span class="nf">getArea</span><span class="o">()</span> <span class="o">{</span>  <span class="c1">// ②</span>
		<span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">ClassTwo</span> <span class="kd">extends</span> <span class="nc">ClassOne</span> <span class="o">{</span>
	<span class="kt">int</span> <span class="n">x</span><span class="o">;</span>
	<span class="nc">ClassTwo</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">// ③</span>
		<span class="kd">super</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">x</span><span class="o">);</span> 
	<span class="o">}</span>
	<span class="kt">int</span> <span class="nf">getArea</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">// ④</span>
		<span class="k">return</span> <span class="n">x</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Gisafirst</span> <span class="o">{</span>  
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">// ⑤</span>
		<span class="nc">ClassOne</span> <span class="n">one</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ClassTwo</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>  <span class="c1">// ⑥</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">one</span><span class="o">.</span><span class="na">getArea</span><span class="o">());</span>  <span class="c1">// ⑦</span>
	<span class="o">}</span>
<span class="o">}</span>


</code></pre></div></div>

<p>출처 : <a href="https://www.gisafirst.com/board/n1/view.php?offset=0&amp;tq=1393907668&amp;reqCategory=&amp;idx=447&amp;word=&amp;s_type=&amp;s_content=&amp;s_terms=">기사퍼스트 : 정보처리기사 실기 가답안 (합격률 36.8%, 합격자 수 9,263명)</a></p>

<p>그런데 한 번씩만 작성하도록 되어 있는데, 자바 실행 순서가 스택프레임에 쌓이게 되면서 스택의 가장 위의 메서드가 실행될 텐데, 논리적인 순서가 해당 메소드가 여러번
쓰일 수 있게 된다. 재귀함수를 생각해보면 내가 무슨 말을 하는지 이해하기 쉬울 것이다.</p>

<p>합격 여부를 떠나서, 나라에서 진행하는 공적인 자격을 부여하는 시험에, 이런 식의 문제를 내는게 너무 이상하다고 생각한다.
오히려 프로그램의 실행 순서를 제대로 아는, 자바 스택 프레임이나 메모리 구조에 대해 자세히 아는 사람이 문제를 틀릴 가능성이 있고, 
제대로 겉핥기식으로 아는 사람이 문제를 맞출 가능성이 높은 게 이상한 것 같다(문제 낸 사람은 당연히 상속 관련만 고려했겠지만).</p>

<p>이 외에 다른 문제들 역시 기출문제에서 출제되었던 내용과 별다를바 없이 출제되었다.</p>

<p>C언어의 경우에는 기본적인 C언어 문법과 포인터를 묻는 문제, 자바의 경우에도 역시 기본적인 문법과 자바 상속과 오버라이딩 관련 문제, 
파이썬의 경우에는 항상 그랬듯이 기본적인 빌트인 함수와 슬라이싱 관련 문제가 출제되었고 개정된 후 기출문제가 그래도 충분히 쌓인 지금이라면
기출문제를 공부했다면 충분히 맞출 수 있지 않았을까 싶었다.</p>

<p>어려웠던 문제로는 계산이 필요했던 문제- 서브넷 마스크 개념을 묻는 네트워크 문제가 있었고, 또 운영체제 파트에서 페이징 관련해서 묻는 문제가 있었는데
앞으로도 이런 식으로 운영체제와 네트워크 부분이 더욱 어렵게 출제될 수도 있지 않을까 싶었다.</p>

<h3 id="공부법">공부법</h3>

<p>솔직히 정보처리기사는 어려운 시험이냐고 물으면 그렇지는 않다고 대답할 수는 있지만, 그렇다고 그냥 아무런 공부도 하지 않고
정보처리기사를 위한 시험공부를 하지 않고 붙을 수 있냐고 물어본다면 그렇지 않다고 대답할 수 있다고 생각한다.</p>

<p>일단 방대한 양의 지식을 외워야 하는 것은 둘째치고, 코드문제에서도 선술했던 각 언어의 특징을 잡아서 공부하는 것이 중요하기 때문이다.</p>

<p>알고리즘이나 자료구조에 대해 묻는 것도 아니고, 각 언어별로</p>

<ul>
  <li>C는 포인터</li>
  <li>자바는 상속과 오버라이딩</li>
  <li>파이썬은 슬라이싱과 빌트인 함수</li>
  <li>각종 잘 사용하지 않는 연산자들 (삼항연산자, 비트연산자, 각 연산자의 계산우선순위등)</li>
</ul>

<p>이런 식으로 각 언어별로 묻는 것이 많기 때문에, 이런 부분을 특징지어서 잘 알고 있어야 한다. 
내가 PS를 잘 푼다고는 생각하지는 않지만 알고리즘 문제를 푸는것을 좋아하는 사람이고, 각 언어에 충분히 익숙하다고 생각했는데, 
정보처리기사 시험 처음 기출문제를 풀면서 공부했을때는 코드문제를 많이 틀렸을 정도다.</p>

<p>그러니 전공자라고 해도 정보처리기사의 코드 문제를 따로 충분히 공부해야 한다고 생각하고,</p>

<p>외워야 하는 부분에 대해서는 수험서의 도움을 받아서 빈출되는 부분을 확실히 외워야 한다.
물론 정보처리기사가 60점만 넘으면 되는 시험이기는 해도, 작년 3회차처럼 말도 안되는 문제가 나올 수도 있고, 보기가 나오지 않을 수도 있기 때문에
보기가 없는 단답식 문제를 충분히 적어낼 수 있어야 된다. 게다가 나름 정보처리기사의 내용들이 완전 도움이 안되는 내용인 것도 아니니까….</p>

<h3 id="마치며">마치며</h3>

<p>대표적으로 많이 사용하는 수험서로는 시나공이나 수제비가 있는데 나는 수제비로 공부했다. 당연히 각 책의 장단점이 있다고 생각하고 둘 다 좋은 책이다.
두 책을 다 보기는 했는데, 내가 수제비를 중점으로 공부한 이유는 일단 수제비가 내용이 더 많다는 점에 있었다. 
내용이 적으면 당연히 더 좋지만(외울게 적으니까) 개인적으로는 이런 시험은 한 번 떨어지면 다시 다음에 또 봐야 되는데, 정보처리기사가 
1년에 세 번 있는데, 한 번 떨어지면 거의 반년간 기다려야 되니 조금이라도 떨어질 위험을 지고 싶지가 않았다.</p>

<p>아무튼, 이미 2회차 시험이 끝난 지금 살짝 늦은 감이 있지만, 이렇게 정보처리기사 24년 1회 후기를 마친다!!</p>

<p>참고로 저 수첩형 자격증은 합격 공고가 난 그날 바로 접수했는데 신청한지 약 1주 반 정도가 지나서야 배송됐다. 혹시라도 궁금해 하는 사람이
있을 수도 있을 것 같아서.</p>]]></content><author><name>ash tensor</name></author><category term="자격증" /><summary type="html"><![CDATA[[자격증][실기] 정보처리기사 2024년 1회 실기 합격 후기]]></summary></entry><entry><title type="html">[WEB] GCP App Engine을 이용한 프론트엔드 서비스 배포</title><link href="http://localhost:4000/web/2024/08/05/gcp-app-engine-frontend-deploy.html" rel="alternate" type="text/html" title="[WEB] GCP App Engine을 이용한 프론트엔드 서비스 배포" /><published>2024-08-05T00:00:00+09:00</published><updated>2024-08-05T00:00:00+09:00</updated><id>http://localhost:4000/web/2024/08/05/gcp-app-engine-frontend-deploy</id><content type="html" xml:base="http://localhost:4000/web/2024/08/05/gcp-app-engine-frontend-deploy.html"><![CDATA[<h2 id="web-gcp-app-engine을-이용한-리액트-프론트엔드-서비스-배포">[WEB] GCP App Engine을 이용한 리액트 프론트엔드 서비스 배포</h2>

<h3 id="gcp-app-engine">GCP App Engine</h3>

<p>와, 솔직히 너무 오랜만에 돌아왔다. 거의 세달 만인데 솔직히 이야기해서 너무 일이 많았다. 정보처리기사, 빅데이터분석기사와 같은 자격증들을 준비하느라 고생했고,
그리고 이제는 취업준비를 하느라 너무 바쁜 일상을 보내고 있다. 6월부터 7월 내내 팀 프로젝트를 진행하고 기간에 맞추느라 매번 배운 것들을 정리해야지, 정리해야지 하다가
프로젝트 배포가 끝나고 나서야 돌아오게 됐다. 프로젝트 배포를 하면서 GCP의 App Engine을 이용해서 프론트엔드 서비스를 배포했는데, 이번 기회에 그 과정을 정리해보려고 한다.
솔직히 어려운 것도 없지만… 그래도 정리해보자.</p>

<h3 id="프론트엔드">프론트엔드</h3>

<p>우선 프론트엔드는 React로 만들어진 프로젝트였다. 실제 배포한 프로젝트는 다음 링크로 들어가서 확인해보면 된다. 비밀번호는 1111, 1111로 설정되어 있다.</p>

<p><a href="http://white-faculty-427513-f2.de.r.appspot.com/users/login">Kiosk</a></p>

<p><img src="/img/posts/gcp/gcp_appengine/img.png" width="80%" /></p>

<p>이런 식의, PG사의 결제 모듈을 결합한 음성인식 지능형 키오스크를 제작하는 것이 목표인데, 백엔드는 스프링으로 제작했고 프론트엔드는 리액트로 작성했다.
일단 백엔드는 AWS의 EC2 프리티어를 이용해서 배포했는데, 팀원 중 한명이 프론트엔드를 배포하는데 어려움이 있어해서, 이번에 한번 처음으로 GCP의 App Engine을 이용해 보았다!</p>

<h3 id="cors-문제">CORS 문제</h3>

<p>우선 프론트엔드를 배포하기 전에 CORS 문제를 해결해야 했다. 팀원이 마주했던 문제가 바로 CORS 문제였다.</p>

<p><img src="/img/posts/gcp/gcp_appengine/img2.png" width="70%" /></p>

<p>지금은 문제를 해결해서 나오지 않지만, 위 화면의 개발자 도구 창의 콘솔을 보면 CORS 문제가 발생했다는 것을 알 수 있었다.</p>

<ul>
  <li>Access to XMLHttpRequest at ‘주소A’ from origin ‘주소B’ has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource.</li>
</ul>

<p>아무래도 스프링 콘솔이나 AWS의 EC2에서는 아무런 로그도 나오지 않기 때문에 이런 문제를 해결하기가 어려웠을 것이라고 생각한다.</p>

<p>백엔드는 AWS의 EC2 프리티어를 이용해서 배포했는데, 프론트엔드는 GCP의 App Engine을 이용해서 배포했기 때문에
서로 다른 도메인에서 서비스를 제공하게 되었다. 이런 경우에는 CORS 문제가 발생하는데, 이를 해결하기 위해서는 백엔드에서 CORS를 허용해주는 설정을 해주어야 했다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">ac.su.kiosk.config</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.config.annotation.CorsRegistry</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.config.annotation.WebMvcConfigurer</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebConfig</span> <span class="o">{</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">WebMvcConfigurer</span> <span class="nf">corsConfigurer</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addCorsMappings</span><span class="o">(</span><span class="nc">CorsRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addMapping</span><span class="o">(</span><span class="s">"/**"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">allowedOrigins</span><span class="o">(</span><span class="s">"http://white-faculty-427513-f2.de.r.appspot.com"</span><span class="o">)</span> <span class="c1">// React 앱의 URL</span>
                        <span class="o">.</span><span class="na">allowedMethods</span><span class="o">(</span><span class="s">"GET"</span><span class="o">,</span> <span class="s">"POST"</span><span class="o">,</span> <span class="s">"PUT"</span><span class="o">,</span> <span class="s">"DELETE"</span><span class="o">,</span> <span class="s">"OPTIONS"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">allowedHeaders</span><span class="o">(</span><span class="s">"*"</span><span class="o">)</span> <span class="c1">// 모든 헤더를 허용</span>
                        <span class="o">.</span><span class="na">allowCredentials</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span> <span class="c1">// 쿠키 및 인증 정보를 허용</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="npm-run-build">npm run build</h3>

<p>CORS 문제를 해결한 다음에는 리액트 앱을 빌드해 주어야 한다. npm run build로 프로젝트를 빌드해 주고, GCP의 APP Engine이 빌드하고 배포하는데 
필요한 환경설정을 해 주어야 한다.</p>

<p>일단 프로젝트 디렉토리에서 serve 패키지를 전역으로 설치한다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
npm <span class="nb">install</span> <span class="nt">-g</span> serve

</code></pre></div></div>

<p>이후에, package.json 파일을 열어서 scripts 부분을 수정해준다. scripts의 start 부분을 “serve -s build”로 수정해주면 된다.
자세한 예는 다음과 같다.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react-scripts start"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react-scripts build"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react-scripts test"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"eject"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react-scripts eject"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"serve"</span><span class="p">:</span><span class="w"> </span><span class="s2">"serve -s build"</span><span class="w">
  </span><span class="p">}</span><span class="err">,</span><span class="w">

</span></code></pre></div></div>

<h3 id="gcp-cli-설치">GCP CLI 설치</h3>

<p>이 이후에 GCP CLI를 설치해야 하는데, 이 과정이 조금은 번거롭다. 일단 GCP의 콘솔에 들어가서 프로젝트를 생성해주고, 프로젝트 ID를 확인해야 한다.
일단 https://cloud.google.com/sdk/docs/install?hl=ko#mac 를 들어가서 GCP CLI를 다운로드 받아, 압축을 푼 다음
google-cloud-sdk 폴더 내의 install.sh 파일을 실행하면 되는데, 구글 공식 홈페이지에는 특정 파이썬 버전을 권장한다고 쓰여 있지만
맥 기준 설치하면 알아서 해당 파이썬 버전을 설치해주기 때문에 그냥 넘어가도 된다.</p>

<p>또한 구글에서는 딱히 홈 루트에서 실행해야 된다는 말은 없는데, 다른 설치글에서는 홈 루트에서 실행을 권장하니까, 혹시 불안하거나 문제가 생긴다면 홈 루트에서 실행해보자.
그리고 환경변수 추가 및 다양한 설정에 대해 안내가 나오는데 환경변수를 나중에 추가하고 싶지 않다면 지금 추가하면 된다.</p>

<p>이 이후, 터미널을 열어서 gcloud init을 실행하면 로그인 창이 뜨는데, 로그인을 하고 프로젝트 ID를 입력하면 된다.</p>

<h3 id="appyaml-파일-생성">app.yaml 파일 생성</h3>

<p>이후에는 프로젝트 디렉토리에 app.yaml 파일을 생성해야 한다. 이 파일은 GCP의 App Engine이 프로젝트를 배포할 때 필요한 설정 파일이다.
이 파일은 프로젝트 디렉토리에 생성해야 한다. 이 부분에서 살짝 트러블 슈팅이 필요했는데, GPT가 안내한대로 진행했을때는 배포가 안되고 오로지 
흰색 화면만 뜨는 문제가 발생했다. 이 문제를 해결하기 위해서는 app.yaml 파일을 다음과 같이 수정해주어야 한다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
runtime: nodejs20

instance_class: F1

handlers:
  - url: /static
    static_dir: build/static

  - url: /<span class="o">(</span>.<span class="k">*</span><span class="o">)</span>
    static_files: build/index.html
    upload: build/index.html

</code></pre></div></div>

<p>handlers 부분에서 url: /static과 static_dir: build/static은 리액트 앱에서 사용하는 정적 파일들을 가리키는 부분이다.
url: /(.*)과 static_files: build/index.html은 리액트 앱의 라우팅을 위한 설정이다. 이 부분을 추가해주지 않으면 라우팅이 제대로 되지 않는다.
GPT는 이부분을 url: /.*과 static_files: build/index.html로 설정했는데, 이렇게 설정하면 라우팅이 제대로 되지 않는다. 이 점 주의하자.</p>

<p>또한 instance_class 부분은 F1로 설정해주면 된다. 이 부분은 GCP의 App Engine의 인스턴스 클래스를 설정하는 부분인데, F1은 무료 티어를 의미한다.</p>

<h3 id="배포">배포</h3>

<p>이제 배포를 해주면 된다. 배포는 다음과 같이 진행하면 된다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
gcloud app deploy

</code></pre></div></div>

<p>이렇게 입력하면 배포가 진행되는데, 배포가 완료되면 다음과 같은 화면이 뜨는데, 이 화면에서 배포된 프로젝트의 주소를 확인할 수 있다!!</p>

<p><img src="/img/posts/gcp/gcp_appengine/img3.png" width="70%" /></p>

<h3 id="마치며">마치며</h3>

<p>이렇게 GCP의 App Engine을 이용해서 프론트엔드 서비스를 배포하는 방법을 정리해보았다. 이번 프로젝트에서는 우연히도 GCP API를 많이 사용하게 되었는데,
아무래도 처음 시작할 때 300$의 크레딧을 제공해주는 것이 매력적이었던 것 같다. 또한 GCP 클라우드 버킷을 이용해서 이미지를 업로드하는 부분에서 
조금 고생했는데 이 부분도 나중에 정리해 보도록 해야겠다.</p>]]></content><author><name>ash tensor</name></author><category term="WEB" /><summary type="html"><![CDATA[[WEB] GCP App Engine을 이용한 리액트 프론트엔드 서비스 배포]]></summary></entry><entry><title type="html">[자격증][필기] 빅데이터 분석기사 8회 필기 분석 및 후기</title><link href="http://localhost:4000/%EC%9E%90%EA%B2%A9%EC%A6%9D/2024/05/03/bigdata-processor-engineer.html" rel="alternate" type="text/html" title="[자격증][필기] 빅데이터 분석기사 8회 필기 분석 및 후기" /><published>2024-05-03T00:00:00+09:00</published><updated>2024-05-03T00:00:00+09:00</updated><id>http://localhost:4000/%EC%9E%90%EA%B2%A9%EC%A6%9D/2024/05/03/bigdata-processor-engineer</id><content type="html" xml:base="http://localhost:4000/%EC%9E%90%EA%B2%A9%EC%A6%9D/2024/05/03/bigdata-processor-engineer.html"><![CDATA[<h2 id="자격증필기-빅데이터-분석기사-8회-후기">[자격증][필기] 빅데이터 분석기사 8회 후기</h2>

<h3 id="합격-인증">합격 인증</h3>

<p><img src="/img/posts/bigdata/1.png" width="80%" /></p>

<p>일단 합격 인증부터 올린다. 지난 4월경에 본 시험인데, 약 2주 정도 시험 공부를 했던 것 같다. 하루에 약 세시간 정도 공부했고, 
책은 이기적의 빅데이터 분석기사 필기 책을 통해서 공부했다.</p>

<h3 id="시험-내용">시험 내용</h3>

<p>시험이 4과목으로 나뉘어져 있는데 1과목은 빅데이터 분석 기획, 2과목은 빅데이터 탐색, 3과목은 빅데이터 모델링, 
4과목은 빅데이터 결과 해석으로 나뉘어져 있다. 1과목은 빅데이터에 대한 개론 및 기획에 대한 내용이고, 2과목은 주로 통계 기법에 대한 내용을 다룬다.
예를 들어서 통계 기법 중에서도 가설 검정, 회귀분석, 군집분석, PCA 등에 대한 내용이 나오고 간단한 계산 문제도 같이 출제된다.(ex. z값 계산, z값을 이용한 추정 등)</p>

<p>그리고 3과목은 모델에 관한 내용이 출제되는데 회귀분석, 의사결정나무, SVM, ANN, CNN, RNN 등 다양한 인공신경망과 머신러닝 기법, 
그리고 그 특징에 대해 출제된다. 4과목은 3과목과 (내가 느끼기엔) 그렇게 큰 차이는 없는 것 같다. 3과목에서 나온 내용을 바탕으로 해당 모델을 해석하는
방법 등을 물어보는데, 오즈비나 precision, recall, F1 score 등에 대한 내용을 빼면 결국에는 모델의 특징을 물어보는 문제가 주가 되기 때문이다.</p>

<p>그래서 나중에 데이터 카페에서도 문제를 복원할 때, 문제는 77문제 가까이 복원했지만 해당 문제가 어떤 과목인지 까지는 복원하지 않아서 
본인이 과락할지도 모르겠다고 겁먹은 사람들도 있었다.</p>

<p>그런데 그럴 수 밖에 없겠다고 느꼈던 이유 중에 하나가 이번 시험 문제가 꽤 어려웠기 때문이다!! 특히 3과목은 정말 어려웠다고 원성이 자자했다.</p>

<p>시험 보기 전에 이전 기출 회차를 거의 다 풀어보고 나서 시험을 봤는데, 7회 기출문제 수준이 아니어서 깜짝 놀랐다. 
이번 8회차가 어려웠던 이유는 문제가</p>

<blockquote>
  <p><strong>개념에 대해 완벽하게 알고 있는지</strong></p>
</blockquote>

<p>를 물어보기 때문이었다고 생각한다. 예를 들어서, 복원된 PCA문제를 보자.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[14] 주성분 분석(PCA)에 대한 설명으로 옳은 것을 모두 고르시오

(가) 정규성을 가정한다(뭐 이런 느낌의 선지였던 것 같다)

(나) 차원축소는 변수들간에 관계가 없어도 가능하다

(다) 분산이 크다

1. (가)

2. (다) ✅

3. (가), (다)

4. (가), (나), (다)
</code></pre></div></div>

<p>이런 식으로 출제되었는데, 일단 문제 자체가 (가) 를 모르면 풀 수 없게 설계가 되어 있고, (가)만 알아도 문제를 맞출 수 있었다.
나는 시험장에서 PCA가 정규성을 가정하지 않아도 된다는 것을 알고 있기 때문에 (가)를 제외하고 나니 남은 선지가 (다) 뿐이 없어서 2번을 선택했었는데 
PCA가 주성분 분석이라는 것, 각각 주성분에 대한 분산을 최대화 한다는 것을 대강 알고 있는 것 만으로는 풀 수 없는 문제였고, 
선형회귀와 로지스틱회귀 등에 대한 다음 문제를 보자.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[58] 선형회귀와 로지스틱회귀에 대한 설명으로 옳지 않은 것

1. 종속변수가 범주형인 경우 로지스틱 회귀 사용

2. 선형, 로지스틱 회귀 모두 잔차 정규성을 가정 ✅

3. 선형회귀 계수 LSE로 추정하면 불편추정량 ~~

4. 선형, 로지스틱 회귀 모두 MLE로 계수추정 가능
</code></pre></div></div>

<p>이런 식으로 출제되었는데, 이 문제도 마찬가지로 선형회귀와 로지스틱회귀에 대한 개념을 완벽하게 알고 있어야 풀 수 있는 문제였다. 
따라서 데이터 카페에서도 해당 회차에 대해 매우 어렵다는 의견이 많았다.</p>

<h3 id="공부법">공부법</h3>

<p>일단 대학교에서 3학점짜리 통계학 과목을 하나라도 수강했던 사람이라면 2과목 공부량이 매우 줄어들어서 3, 4 과목만 공부하면 된다. 
여기에 전공자이거나 해서 해서 머신러닝, 딥러닝에 대한 지식이 있는 사람이라면 3, 4과목에서 도움을 받을 수 있다.
그리고 데이터진흥원 시험은 계산기를 허용하지 않기 때문에 엄청 큰 수식을 계산하는 문제는 거의 나오지 않는다. 기껏해야 기본적인 통계 계산 정도가 전부이다.
z값 계산과 같은 각 통계 분포의 기초적인 통계량 계산과 검정 정도만 출제되기 때문에 대학에서 3학점으로 개설되는 기초 통계학이나 확률통계 과목들보다 난이도 자체는 더 쉽다.</p>

<p>그리고 3, 4과목은 머신러닝과 딥러닝에 대한 내용이 출제되는데, 8회차를 보면서 개인적으로는 단순히 책을 달달 외우는게 좋은 공부법은 아니라고 느꼈다. 
빅데이터 분석기사가 정보처리기사와는 다르게 단순히 기출문제를 많이 풀어서 <strong>키워드 기반으로 넓고 얕게 공부하는 것은 도움이 되지 않는것 같다.</strong> 
아직 시행된지 얼마 안 돼서 그럴 수도 있지만, 매 회차 과거 기출과 비슷한 문제가 나온다기 보다는 새로 출제되는 문제가 많기 때문이다.</p>

<p>따라서 해당 개념을 가지고 GPT에 물어보거나 아니면 다양한 자료를 접하면서 시험에 출제되는 개념을 다양하게 기억하는 것을 추천한다.</p>

<h3 id="합격률">합격률</h3>

<p><img src="/img/posts/bigdata/2.png" width="80%" /></p>

<p><a href="&quot;https://cafe.naver.com/sqlpd&quot;">출처 : 8회 빅데이터 분석기사 필기 합격률</a></p>

<p>솔직히 나도 시험을 보면서 꽤나 어려웠다고 생각했는데, 8회차 합격률은 꽤나 높은 52.6%에 달했다. 
이러면 앞으로도 시험이 쉬워지거나 하지는 않을 것으로 예상된다. 1년에 두번밖에 볼 수 없는 시험이니만큼 준비를 확실히 하는 편이 좋겠다고 생각이 든다.</p>

<p>나의 경우는 대학교에서 확률 통계 과목을 수강했고, 머신러닝, 딥러닝에 관한 과목도 한학기씩 수강해서 해당 과목들을 통해 얻은 지식이 많은 도움이 되었다.
물론 그렇다고 하더라도 모든 것을 기억하고 있지는 않는 데다가, 
앞서 말했듯이 키워드 기반 넓고 얕게 아는 것보다는 나오는 내용을 중심으로 자세히 아는 것이 더 중요하기 때문에 약 2주 정도 하루에 세시간 정도씩 공부했다.</p>

<p>비전공자인 경우에는 이보다 조금 더 공부해야 안정적으로 합격할 수 있지 않을까 싶다.</p>]]></content><author><name>ash tensor</name></author><category term="자격증" /><summary type="html"><![CDATA[[자격증][필기] 빅데이터 분석기사 8회 후기]]></summary></entry><entry><title type="html">[백준][JAVA] 백준 7562번 :: 나이트의 이동 :: 실버 1</title><link href="http://localhost:4000/java/ps/%EB%B0%B1%EC%A4%80/2024/05/02/boj7562.html" rel="alternate" type="text/html" title="[백준][JAVA] 백준 7562번 :: 나이트의 이동 :: 실버 1" /><published>2024-05-02T00:00:00+09:00</published><updated>2024-05-02T00:00:00+09:00</updated><id>http://localhost:4000/java/ps/%EB%B0%B1%EC%A4%80/2024/05/02/boj7562</id><content type="html" xml:base="http://localhost:4000/java/ps/%EB%B0%B1%EC%A4%80/2024/05/02/boj7562.html"><![CDATA[<h2 id="백준java-백준-7562번--나이트의-이동--실버-1">[백준][JAVA] 백준 7562번 :: 나이트의 이동 :: 실버 1</h2>

<h3 id="문제-설명">문제 설명</h3>

<p>체스판 위에 한 나이트가 놓여져 있다. 나이트가 한 번에 이동할 수 있는 칸은 아래 그림에 나와있다. 
나이트가 이동하려고 하는 칸이 주어진다. 나이트는 몇 번 움직이면 이 칸으로 이동할 수 있을까?</p>

<h3 id="문제-입력">문제 입력</h3>

<p>입력의 첫째 줄에는 테스트 케이스의 개수가 주어진다.</p>

<p>각 테스트 케이스는 세 줄로 이루어져 있다. 첫째 줄에는 체스판의 한 변의 길이 l(4 ≤ l ≤ 300)이 주어진다. 
체스판의 크기는 l × l이다. 체스판의 각 칸은 두 수의 쌍 {0, …, l-1} × {0, …, l-1}로 나타낼 수 있다. 
둘째 줄과 셋째 줄에는 나이트가 현재 있는 칸, 나이트가 이동하려고 하는 칸이 주어진다.</p>

<h3 id="출력">출력</h3>

<p>각 테스트 케이스마다 나이트가 최소 몇 번만에 이동할 수 있는지 출력한다.</p>

<h3 id="예제-입력">예제 입력</h3>

<p>3</p>

<p>8</p>

<p>0 0</p>

<p>7 0</p>

<p>100</p>

<p>0 0</p>

<p>30 50</p>

<p>10</p>

<p>1 1</p>

<p>1 1</p>

<h3 id="예제-출력">예제 출력</h3>

<p>5</p>

<p>28</p>

<p>0</p>

<h4 id="접근방법">접근방법</h4>

<p>오랜만에 푸는 알고리즘 문제였다!! 빅데이터 분석기사(필기), 정보처리기사(실기) 시험을 준비하느라 알고리즘 문제를 풀지 못했는데, 
오랜만에 풀어보니까 너무 재밌었다. 다행히 두 시험 다 합격했는데, 이제부터 조금씩이라도 알고리즘 문제를 풀고 싶다.</p>

<p>문제는 그렇게 어렵지 않아서 금방 풀 수 있었고, 살짝 흔한 BFS 문제였다. 나는 알고리즘 문제를 밀리의 서재에 있는
[주요기업/금융권 IT 디지털 직무 채용대비 한권으로 합격하는 취업 코딩테스트] 라는 책을 참고하면서 풀고 있는데, 
올해 안에 이 책의 모든 문제를 풀이하고 시간이 허락한다면 PCCP라는 알고리즘 자격증 시험에서 높은 점수를 얻는게 목표다(우선순위는 낮지만).</p>

<p>이 책은 솔직히 엄청 좋냐? 하면 그건 아닌 것 같은데 그렇다고 엄청 나쁘냐 하면 그렇지는 않다. 왜냐하면 알고리즘 문제는 그냥 많이 풀어보는게 답이라고 생각하기 때문이다.
시간을 들인 만큼 정직하게 결과가 나오기 떄문에 그냥 많이 풀어보는게 답이라고 생각한다. 그래서 이 책이 아니라 다른 책을 찾는다고 해도 
솔직히 큰 차이가 없을 것 같다.</p>

<p>아무튼 최소거리를 구하라고 하면 BFS 문제이고, 이동한 구체적인 루트를 적으라고 하지는 않았으니 노드 각각 방문한 노드를 개별로 구현할 필요는 없고, 
전체 BFS 내에서 방문한 노드를 체크하기만 하면 된다.</p>

<h3 id="코드">코드</h3>

<p>나이트 노드 클래스와 메인 클래스를 구현했는데, 지금 보니 KnightNode 클래스 내에 getKnightMoves 메소드를 구현하는 것이 더 좋았을 것 같다.
지금은 메인 클래스 내에 존재하는데, 객체지향적으로 생각했을때 좋은 설계가 아니었다는 생각이 든다.</p>

<p>KnightNode 클래스는 나이트의 현재 위치, 방문한 노드들, 깊이를 저장하는 클래스이고, 
나이트가 방문한 노드를 표시하는 int[][] visitedNodes를 가지고 있다. visitedNodes는 나이트 기물에 각각 생성되는 게 아니라,
전역의 visitedNodes를 가리킨다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">boj</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayDeque</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">KnightNode</span> <span class="o">{</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">coordinate</span><span class="o">;</span>
    <span class="kt">int</span><span class="o">[][]</span> <span class="n">visitedNodes</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">depth</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    
    <span class="c1">//최초의 나이트 노드 생성용</span>
    
    <span class="kd">public</span> <span class="nf">KnightNode</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">coordinate</span><span class="o">,</span> <span class="kt">int</span> <span class="n">boardLength</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">coordinate</span> <span class="o">=</span> <span class="n">coordinate</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">visitedNodes</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">boardLength</span><span class="o">][</span><span class="n">boardLength</span><span class="o">];</span>
        <span class="k">this</span><span class="o">.</span><span class="na">visit</span><span class="o">(</span><span class="n">coordinate</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="c1">// bfs를 돌며 생성되는 나이트 노드 생성용 생성자</span>
    <span class="kd">public</span> <span class="nf">KnightNode</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">coordinate</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">visitedNodes</span><span class="o">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">coordinate</span> <span class="o">=</span> <span class="n">coordinate</span><span class="o">;</span>
        
        <span class="c1">//new int[][] visitedNodes를 하지 않고 visitedNodes를 그대로 가리키게 하면</span>
        <span class="c1">//각각의 나이트 노드가 같은 visitedNodes를 가리키게 되어서</span>
        <span class="c1">//나이트 노드 각각의 visitedNodes가 생성되는 것이 아니라</span>
        <span class="c1">//전역의 visitedNodes를 가리키게 된다.</span>
        
        <span class="k">this</span><span class="o">.</span><span class="na">visitedNodes</span> <span class="o">=</span> <span class="n">visitedNodes</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">depth</span> <span class="o">=</span> <span class="n">depth</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">coordinate</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 방문한 노드를 표시한다.</span>
        <span class="k">this</span><span class="o">.</span><span class="na">visitedNodes</span><span class="o">[</span><span class="n">coordinate</span><span class="o">[</span><span class="mi">0</span><span class="o">]][</span><span class="n">coordinate</span><span class="o">[</span><span class="mi">1</span><span class="o">]]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">checkVisited</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">coordinate</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 방문했으면 참, 방문하지 않았으면 거짓</span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">visitedNodes</span><span class="o">[</span><span class="n">coordinate</span><span class="o">[</span><span class="mi">0</span><span class="o">]][</span><span class="n">coordinate</span><span class="o">[</span><span class="mi">1</span><span class="o">]]</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">newboj7562</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="n">testCaseNumber</span><span class="o">;</span>
    <span class="kd">static</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">[]&gt;&gt;</span> <span class="n">testCases</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="kd">static</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">[]&gt;</span> <span class="n">movementMetrix</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">visitedList</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="n">inputMethod</span><span class="o">(</span><span class="n">scanner</span><span class="o">);</span>
        
        <span class="c1">//나이트가 이동할 수 있는 방향을 저장한다.</span>
        
        <span class="n">movementMetrix</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{-</span><span class="mi">2</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">});</span>
        <span class="n">movementMetrix</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{-</span><span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">});</span>
        <span class="n">movementMetrix</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">2</span><span class="o">});</span>
        <span class="n">movementMetrix</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">2</span><span class="o">});</span>
        <span class="n">movementMetrix</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">});</span>
        <span class="n">movementMetrix</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{+</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">});</span>
        <span class="n">movementMetrix</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">});</span>
        <span class="n">movementMetrix</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">});</span>

        <span class="k">for</span><span class="o">(</span><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">[]&gt;</span> <span class="n">testCase</span> <span class="o">:</span> <span class="n">testCases</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">KnightNode</span> <span class="n">answerKnight</span> <span class="o">=</span> <span class="n">bfs</span><span class="o">(</span><span class="n">testCase</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">answerKnight</span><span class="o">.</span><span class="na">depth</span><span class="o">);</span>

        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">KnightNode</span> <span class="nf">bfs</span><span class="o">(</span><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">[]&gt;</span> <span class="n">testCase</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">boardLength</span> <span class="o">=</span> <span class="n">testCase</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nowPosition</span> <span class="o">=</span> <span class="n">testCase</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">destination</span> <span class="o">=</span> <span class="n">testCase</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>

        <span class="n">visitedList</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">boardLength</span><span class="o">[</span><span class="mi">0</span><span class="o">]][</span><span class="n">boardLength</span><span class="o">[</span><span class="mi">0</span><span class="o">]];</span>

        <span class="nc">ArrayDeque</span><span class="o">&lt;</span><span class="nc">KnightNode</span><span class="o">&gt;</span> <span class="n">model</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayDeque</span><span class="o">&lt;&gt;();</span>
        <span class="n">model</span><span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="k">new</span> <span class="nc">KnightNode2</span><span class="o">(</span><span class="n">nowPosition</span><span class="o">,</span> <span class="n">boardLength</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>

        <span class="k">while</span> <span class="o">(</span><span class="n">model</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">KnightNode</span> <span class="n">selectedKnight</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="na">pollFirst</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">selectedKnight</span><span class="o">.</span><span class="na">coordinate</span><span class="o">,</span> <span class="n">destination</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">selectedKnight</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">[]&gt;</span> <span class="n">coordinates</span> <span class="o">=</span> <span class="n">getKnightMoves</span><span class="o">(</span><span class="n">boardLength</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span>
                        <span class="n">selectedKnight</span><span class="o">.</span><span class="na">coordinate</span><span class="o">);</span>

                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">x</span> <span class="o">:</span> <span class="n">coordinates</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">selectedKnight</span><span class="o">.</span><span class="na">checkVisited</span><span class="o">(</span><span class="n">x</span><span class="o">))</span> <span class="o">{</span><span class="c1">// 방문했으면 pass</span>
                    <span class="o">}</span>
                    <span class="k">else</span> <span class="o">{</span>
                        <span class="nc">KnightNode</span> <span class="n">tempKnight</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">KnightNode2</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> 
                         <span class="n">selectedKnight</span><span class="o">.</span><span class="na">visitedNodes</span><span class="o">,</span> <span class="n">selectedKnight</span><span class="o">.</span><span class="na">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
                        <span class="n">tempKnight</span><span class="o">.</span><span class="na">visit</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
                        <span class="n">model</span><span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="n">tempKnight</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">[]&gt;</span> <span class="nf">getKnightMoves</span><span class="o">(</span><span class="kt">int</span> <span class="n">boardLength</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">coordinates</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">[]&gt;</span> <span class="n">returnArray</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">x</span> <span class="o">:</span> <span class="n">movementMetrix</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span><span class="o">[]</span> <span class="n">tempCoordinates</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
            <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">:</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">tempCoordinates</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">coordinates</span><span class="o">[</span><span class="n">i</span><span class="o">++]</span> <span class="o">+</span> <span class="n">y</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="n">checkBoardLimit</span><span class="o">(</span><span class="n">boardLength</span><span class="o">,</span> <span class="n">tempCoordinates</span><span class="o">))</span> <span class="o">{</span>
                <span class="c1">// BoardLimit내에 위치하면</span>
                <span class="n">returnArray</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">tempCoordinates</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">returnArray</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">checkBoardLimit</span><span class="o">(</span><span class="kt">int</span> <span class="n">boardLength</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">coordinate</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">:</span> <span class="n">coordinate</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&gt;=</span> <span class="n">boardLength</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">inputMethod</span><span class="o">(</span><span class="nc">Scanner</span> <span class="n">scanner</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">newboj7562</span><span class="o">.</span><span class="na">testCaseNumber</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="n">scanner</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">newboj7562</span><span class="o">.</span><span class="na">testCaseNumber</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">[]&gt;</span> <span class="n">testCase</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
            <span class="kt">int</span> <span class="n">boardLength</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
            <span class="n">testCase</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span><span class="n">boardLength</span><span class="o">});</span>
            <span class="n">scanner</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>

            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="nc">String</span> <span class="n">coordinates</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>
                <span class="kt">int</span><span class="o">[]</span> <span class="n">parsedLine</span> <span class="o">=</span> <span class="n">parsingString</span><span class="o">(</span><span class="n">coordinates</span><span class="o">);</span>
                <span class="n">testCase</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">parsedLine</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="n">testCases</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">testCase</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">parsingString</span><span class="o">(</span><span class="nc">String</span> <span class="n">string</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">tempString</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">ints</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>

        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">x</span> <span class="o">:</span> <span class="n">tempString</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
            <span class="n">ints</span><span class="o">[</span><span class="n">i</span><span class="o">++]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">ints</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>좀 더 깔끔하게 풀이할 수도 있을 것 같은데, 오랜만에 알고리즘 문제를 푼 것 치고는 감을 잡는데 도움이 된 것 같아서 만족스럽다.</p>]]></content><author><name>ash tensor</name></author><category term="JAVA" /><category term="PS" /><category term="백준" /><summary type="html"><![CDATA[[백준][JAVA] 백준 7562번 :: 나이트의 이동 :: 실버 1]]></summary></entry><entry><title type="html">[자격증] 리눅스 마스터 2급 2401회 합격 후기</title><link href="http://localhost:4000/%EC%9E%90%EA%B2%A9%EC%A6%9D/2024/03/28/linux-master.html" rel="alternate" type="text/html" title="[자격증] 리눅스 마스터 2급 2401회 합격 후기" /><published>2024-03-28T00:00:00+09:00</published><updated>2024-03-28T00:00:00+09:00</updated><id>http://localhost:4000/%EC%9E%90%EA%B2%A9%EC%A6%9D/2024/03/28/linux-master</id><content type="html" xml:base="http://localhost:4000/%EC%9E%90%EA%B2%A9%EC%A6%9D/2024/03/28/linux-master.html"><![CDATA[<h2 id="자격증-리눅스-마스터-2급-2401회-합격-후기--시험-정보">[자격증] 리눅스 마스터 2급 2401회 합격 후기 / 시험 정보</h2>

<h3 id="리눅스-마스터-2급">리눅스 마스터 2급</h3>

<p>2401회차 리눅스 마스터 2급 시험을 보고 합격했다. 온라인등에서 리눅스 마스터 2급은 이제 좀 누구나 합격하는 수준의 자격증이라는 느낌이지만,
내가 대신 약간의 변호를 하자면 평균 합격률이 약 30% 정도의 자격증으로 공부 하나도 필요 없이 하루 이틀 전에 공부해서 합격하는 수준은 아닌 것 같다. 
기사 수준의 시험도 합격률이 30%대인 시험도 많으니까 말이다. 그리고-</p>

<blockquote>
  <p>인터넷에서는 공부할 필요 없다, 하루 이틀 기출만 풀면 합격할 수 있다</p>
</blockquote>

<p>이런 말을 많이 하는데 이런 식의 말은 조금 무책임한 느낌이고, 혹시라도 누군가 이 시험을 도전할 사람이 있다면, 조금 더 차분히 공부해서 
기본적인 리눅스에 대한 지식을 어느정도 쌓고 가는 것이 좋다고 생각한다.</p>

<h4 id="시험-난이도">시험 난이도</h4>

<p>2022년 합격률은 약 22% 정도로, 2021년에 비해서는 하락했다. 2021년에는 약 30% 정도의 합격률이었는데, 2022년에는 22% 정도로 하락했다.
일단 리눅스 마스터 2급은 단순 암기 시험으로, 4지선다 80문제에 60점 이상 맞으면 합격인데…</p>

<p>말만 들으면 엄청 쉬운 시험이고 기출문제도 많이 있는 이상 기출을 많이 풀면 해결할 수 있다고 생각할 수 있지만 어려운 이유는 
문제가 꽤나 <strong>악의적으로</strong> 나온다는 점이다.</p>

<p>어떻게 예를 들어야 될지 잘 생각은 안나지만, 예를 들어서</p>

<ul>
  <li>리눅스 명령어 중에서 파일의 권한을 표시하는 문제가 출제되는데</li>
</ul>

<p>권한을 물어보다 보니까 “권한? chmod나 chown 인가?” 하고 생각하고 실제로 선지에도 그렇게 나오지만 실제로는 ls 라는 명령어를 선택해야한다. 
게다가, 그냥 ls 명령어를 실행하면 권한이 나오지 않고 옵션을 넣어서 검색해야 권한이 출력되고, 선지에도 ls 밖에는 표시되어 있지 않아서 사람을 헷갈리게 만든다.</p>

<ul>
  <li>또한 리눅스의 다양한 옵션들 (apt-get의 삭제 옵션이 -r인가 -R인가, e인가 d인가, 등)로 장난을 치는 것은 물론이다</li>
</ul>

<p>전부 다 생각나지는 않지만 꽤나 이렇듯 악의적인 문제가 많이 나온다. 게다가, 이제 2401회차와 전회차와 달라진 점으로는 더 이상 문제를 풀고
 문제지를 제공하지 않고 회수한다는 점에 있다. 이전에는 문제지를 제공하고 문제를 풀고 나서 문제지를 회수했기 때문에 기출문제를 
복원하기 쉬웠지만 이제부터는 기출문제를 복원하기가 어려워져서 앞으로의 난이도가 조금 더 어려워질 수 있다는 생각이 들었다.</p>

<p>그럼에도 불구하고, 쉬운 자격증인 건 맞다. 일단 계산문제가 나오지 않고, 단순히 리눅스 명령어를 많이 외우고, 리눅스에 대한 개념들만 머리속에
 정리해 가면 되기 때문에 어려운 자격증은 아니다. 그렇지만 단순히 기출문제를 암기하는 식으로 접근하기 보다는 리눅스에 대한 기본적인 지식을 쌓고 가는 것이 좋다.
그래야 남는 것도 있을테니까.</p>

<h4 id="공부법">공부법</h4>

<blockquote>
  <p>인터넷에 돌아다니는 리눅스 마스터 공부법에 대한 조언으로 기출문제 최대한 많이 풀기, 책은 살 필요 없음</p>
</blockquote>

<p>인데 책은 살 필요가 없는건 맞다…! 책은 살 필요가 없다. 그 이유는 어차피 위에서 말했듯, 단순 암기 시험이기도 하고, 문제가 악의적으로 나오기 때문에
 문제가 어떤 식으로 나오는지 감을 잡아야 하기 때문에 책을 사서 공부하는 것은 별로 의미가 없다고 생각한다. 오히려 책을 사서 공부하면 더 헷갈릴 수도 있다.
나는 밀리의 서재에 있는 리눅스 마스터 2급 책을 참고했는데, 솔직히 도움이 안 됐다… 오히려 기출문제와 인터넷에 돌아다니는 리눅스 마스터 2급 정리 PDF를 바탕으로
 내가 풀어본 기출문제에 새로 나왔거나, 개념이 어떻게 기출문제에 나오는지를 정리하면서 공부하는 것이 더 도움이 됐다.</p>

<p>음, 그런데 이제부터는 시험지를 나올때 제출하라고 하니까 기출문제를 복원하기가 어려워져서 앞으로는 기출문제를 풀어보는 것이 더 어려워질 수도 있다. 
왜냐면 나도 시험을 칠 때 기출문제에 안 나왔던 새로운 문제들이 보였기 때문이다. 그래서 혹시라도 책을 구매하려면 최신 기출문제가 수록되어있는
 책을 구매한다면, 그건 좋을 것 같다.</p>

<h4 id="마무리">마무리</h4>

<p>전공자 기준 약 2주 정도(암기를 못한다면) 시험 공부를 하는 게 좋을 것 같고, 비전공자 기준으로도 약 2주 정도 시험 공부를 하는 편이 좋다.
나는 기출문제 약 2년치 정도(8회분)를 1주일에 걸쳐서 풀고 정리하는 식으로 시험 공부를 하긴 했는데 시험 점수가 생각했던 것보다 아슬아슬하게 나와서(70점)
 떨어질 수도 있겠다 싶겠어서, 한 2주 정도는 차분히 공부하는 것이 좋을 것 같다.</p>

<p><img src="/img/posts/linuxmaster/1.png" style="width: 80%" /></p>

<p>아무튼 그래도 합격해서 다행이긴 하다! 떨어지는 것보다는 합격하는게 더 나으니까</p>]]></content><author><name>ash tensor</name></author><category term="자격증" /><summary type="html"><![CDATA[[자격증] 리눅스 마스터 2급 2401회 합격 후기 / 시험 정보]]></summary></entry><entry><title type="html">[백준][JAVA] 백준 12100번 :: 2048(Easy) :: 골드 2</title><link href="http://localhost:4000/java/ps/%EB%B0%B1%EC%A4%80/2024/03/28/boj12100.html" rel="alternate" type="text/html" title="[백준][JAVA] 백준 12100번 :: 2048(Easy) :: 골드 2" /><published>2024-03-28T00:00:00+09:00</published><updated>2024-03-28T00:00:00+09:00</updated><id>http://localhost:4000/java/ps/%EB%B0%B1%EC%A4%80/2024/03/28/boj12100</id><content type="html" xml:base="http://localhost:4000/java/ps/%EB%B0%B1%EC%A4%80/2024/03/28/boj12100.html"><![CDATA[<h2 id="백준java-백준-12100번--2048easy--골드-2">[백준][JAVA] 백준 12100번 :: 2048(Easy) :: 골드 2</h2>

<h3 id="문제-설명">문제 설명</h3>

<p>2048 게임은 4×4 크기의 보드에서 혼자 즐기는 재미있는 게임이다. 이 링크를 누르면 게임을 해볼 수 있다.</p>

<p>이 게임에서 한 번의 이동은 보드 위에 있는 전체 블록을 상하좌우 네 방향 중 하나로 이동시키는 것이다. 
이때, 같은 값을 갖는 두 블록이 충돌하면 두 블록은 하나로 합쳐지게 된다. 한 번의 이동에서 이미 합쳐진 블록은 또 다른 블록과 다시 합쳐질 수 없다. 
(실제 게임에서는 이동을 한 번 할 때마다 블록이 추가되지만, 이 문제에서 블록이 추가되는 경우는 없다)</p>

<p><img src="/img/posts/boj12100/1.png" width="80%" /></p>

<p>마지막으로, 똑같은 수가 세 개가 있는 경우에는 이동하려고 하는 쪽의 칸이 먼저 합쳐진다. 
예를 들어, 위로 이동시키는 경우에는 위쪽에 있는 블록이 먼저 합쳐지게 된다. &lt;그림 14&gt;의 경우에 위로 이동하면 &lt;그림 15&gt;를 만든다.</p>

<p>이 문제에서 다루는 2048 게임은 보드의 크기가 N×N 이다. 
보드의 크기와 보드판의 블록 상태가 주어졌을 때, 최대 5번 이동해서 만들 수 있는 가장 큰 블록의 값을 구하는 프로그램을 작성하시오.</p>

<h3 id="문제-입력">문제 입력</h3>

<p>첫째 줄에 보드의 크기 N (1 ≤ N ≤ 20)이 주어진다. 둘째 줄부터 N개의 줄에는 게임판의 초기 상태가 주어진다. 
0은 빈 칸을 나타내며, 이외의 값은 모두 블록을 나타낸다. 블록에 쓰여 있는 수는 2보다 크거나 같고, 1024보다 작거나 같은 2의 제곱꼴이다. 
블록은 적어도 하나 주어진다.</p>

<h3 id="출력">출력</h3>

<p>최대 5번 이동시켜서 얻을 수 있는 가장 큰 블록을 출력한다.</p>

<h3 id="예제-입력">예제 입력</h3>

<p>3</p>

<p>2 2 2</p>

<p>4 4 4</p>

<p>8 8 8</p>

<h3 id="예제-출력">예제 출력</h3>

<p>16</p>

<h4 id="접근방법">접근방법</h4>

<p>사실 이 문제가 골드 2라고는 생각하지 않는다. 왜냐하면 무식한 구현문제라고 생각하기 때문이다. 개인적으로 생각하기엔, 
이 정도 수준의 구현을 해당 언어가 제공하는 다양한 문법을 이용해서 풀 수 있다면(GPT 등을 최소한으로 이용하고) 
해당 언어를 어느정도 사용할 수 있다고 말할 수 있다고 말해도 좋다.</p>

<p>문제를 해결하고 다른 사람이 어떻게 접근했는지 살펴봤는데, 나처럼 무식하게 전부 구현해버린 사람은 조금 드문것 같다는 생각이 들었다.
일단 이 문제를 해결하는데 있어서 가장 중요한 것은 보드의 칸(이하 노드라고 설명)의 움직임과 숫자가 병합되는 규칙등을 
제대로 구현하는 것이다.</p>

<p>왜냐하면 최대 5번 움직여서 가장 큰 수를 출력하는 것 이라는 조건이 붙어있기는 하지만 단순히 5번 움직이는 것의 중복 조합의 갯수를 구해봐야
 고작 4^5 수준의 문제공간이기 때문이다. 이정도는 컴퓨터가 모든 중복조합의 경우를 다 구해버리고도 시간이 충분히 남기 때문에, 결국 올바른 구현이
 가장 중요하다.</p>

<p>개인적으로 이 문제는 자바를 이용해서 푸는 것도 좋다고 생각하는데, 해당 문제가 객체지향을 연습하기 좀 좋은 예제라고 생각하기 때문이다.</p>

<h3 id="코드">코드</h3>

<p>일단 문제를 node 클래스와, board 클래스로 나누어서 구현했다. node 클래스는 각 노드의 값을 저장하고, 이동하는 함수를 구현했다.
보드는 방향 명령을 내리거나 초기화를 하거나 하는 메소드로 구성되어 있고, 노드 클래스에서는 그 명령을 받아 각 노드의 행동을 구현했다.</p>

<p>노드의 이동을 구현할때, 주의해야 할 점은 예를 들어서 왼쪽 명령을 보드에서 노드에 내린다고 해 보자. 그렇다고 하더라도 실제 노드가 이동하는 것이 아니다.
노드는 가만히 있고 해당 노드의 값만 바뀌는 것이다.</p>

<p>0 0 2 라는 열이 존재할 때 왼쪽 명령을 가장 오른쪽 노드가 받는다고 쳐보자. 그런 경우에는 첫번째로 [0, 2]노드가 [0, 1] 노드의 값을 변경한다.
그리고 [0, 1]의 노드의 leftmove 메소드를 호출한다. 이런 식으로 연쇄적으로 방향 명령이 호출되고 병합되는 방식으로 구현된다.</p>

<p>또한 중요한 점은, 한번의 이동에 하나의 노드는 한 번밖에는 병합되지 않는다는 점이다.
다시말해서</p>

<p>[2, 2, 2, 2] 라는 열이 있다고 할 때, 왼쪽 명령을 받는다고 치자. 그 경우에 올바른 결과는 [4, 4, 0, 0] 이다.
또한 [4, 2, 2] 라는 열이 있다고 할 때, 왼쪽 명령을 받으면 그 경우에 올바른 결과는 [4, 4, 0] 이다.</p>

<p>첫번째까지는 생각하기 쉬워도 두번째 예시는 한번에 생각해내기 어렵다. 단순히 병합된 후에 연쇄적인 left 콜이 없으면 연쇄가 끊기니까 문제가 없을것이라고 생각했는데, 
이러한 경우에는 두번째 예시를 만족시키지 못하고 [8, 0, 0] 으로 병합되어버리고 만다. 
그래서 이런 경우에는 노드의 concated라는 변수를 이용해서 만약 concated가 true이면 한번만 병합되도록 구현했다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
 <span class="kn">package</span> <span class="nn">boj</span><span class="o">;</span>
 
 <span class="kn">import</span> <span class="nn">java.util.ArrayDeque</span><span class="o">;</span>
 <span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
 <span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
 
 <span class="kd">public</span> <span class="kd">class</span> <span class="nc">boj12100</span> <span class="o">{</span>
     <span class="kd">static</span> <span class="kt">int</span> <span class="n">inputedMaximunNumber</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
     <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
         <span class="nc">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
         <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="n">node</span><span class="o">&gt;</span> <span class="n">nodeList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
         <span class="n">node</span><span class="o">[][]</span> <span class="n">inputModel</span> <span class="o">=</span> <span class="n">gameSetter</span><span class="o">(</span><span class="n">scanner</span><span class="o">);</span>
         <span class="n">board</span> <span class="nc">Board</span> <span class="o">=</span> <span class="k">new</span> <span class="n">board</span><span class="o">(</span><span class="n">inputModel</span><span class="o">);</span>
 
         <span class="kt">int</span> <span class="n">allMaxNumber</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
 
         <span class="nc">ArrayDeque</span><span class="o">&lt;</span><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">orderList</span> <span class="o">=</span> <span class="no">BFS</span><span class="o">();</span>
         <span class="k">for</span> <span class="o">(</span><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">row</span> <span class="o">:</span> <span class="n">orderList</span><span class="o">)</span> <span class="o">{</span>
             <span class="k">for</span> <span class="o">(</span><span class="nc">Integer</span> <span class="n">order</span> <span class="o">:</span> <span class="n">row</span><span class="o">)</span> <span class="o">{</span>
                 <span class="n">orderInterpreter</span><span class="o">(</span><span class="n">order</span><span class="o">,</span> <span class="nc">Board</span><span class="o">);</span>
             <span class="o">}</span>
             <span class="kt">int</span> <span class="n">tempMaxNumber</span> <span class="o">=</span> <span class="nc">Board</span><span class="o">.</span><span class="na">getMaxNumber</span><span class="o">();</span>
             <span class="k">if</span> <span class="o">(</span><span class="n">allMaxNumber</span> <span class="o">&lt;</span> <span class="n">tempMaxNumber</span><span class="o">)</span> <span class="o">{</span>
                 <span class="n">allMaxNumber</span> <span class="o">=</span> <span class="n">tempMaxNumber</span><span class="o">;</span>
             <span class="o">}</span>
             <span class="nc">Board</span><span class="o">.</span><span class="na">resetBoard</span><span class="o">();</span>
         <span class="o">}</span>
         <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">allMaxNumber</span><span class="o">);</span>
 
     <span class="o">}</span>
     <span class="kd">public</span> <span class="kd">static</span> <span class="n">node</span><span class="o">[][]</span> <span class="nf">gameSetter</span><span class="o">(</span><span class="nc">Scanner</span> <span class="n">scanner</span><span class="o">)</span> <span class="o">{</span>
         <span class="kt">int</span> <span class="n">boardSize</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
         <span class="n">scanner</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>
 
         <span class="n">node</span><span class="o">[][]</span> <span class="n">tempBoard</span> <span class="o">=</span> <span class="k">new</span> <span class="n">node</span><span class="o">[</span><span class="n">boardSize</span><span class="o">][</span><span class="n">boardSize</span><span class="o">];</span>
 
         <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">boardSize</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
             <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">boardSize</span><span class="o">;</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
                 <span class="kt">int</span><span class="o">[]</span> <span class="n">coordinate</span> <span class="o">=</span> <span class="o">{</span><span class="n">i</span><span class="o">,</span> <span class="n">k</span><span class="o">};</span>
                 <span class="kt">int</span> <span class="n">tempValue</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
                 <span class="n">inputedMaximunNumber</span> <span class="o">+=</span> <span class="n">tempValue</span><span class="o">;</span>
                 <span class="n">node</span> <span class="n">tempNode</span> <span class="o">=</span> <span class="k">new</span> <span class="n">node</span><span class="o">(</span><span class="n">tempValue</span><span class="o">,</span> <span class="n">coordinate</span><span class="o">,</span> <span class="n">tempBoard</span><span class="o">);</span>
             <span class="o">}</span>
             <span class="n">scanner</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>
         <span class="o">}</span>
         <span class="k">return</span> <span class="n">tempBoard</span><span class="o">;</span>
     <span class="o">}</span>
 
     <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">orderInterpreter</span><span class="o">(</span><span class="kt">int</span> <span class="n">number</span><span class="o">,</span> <span class="n">board</span> <span class="nc">Board</span><span class="o">)</span> <span class="o">{</span>
         <span class="k">switch</span> <span class="o">(</span><span class="n">number</span><span class="o">)</span> <span class="o">{</span>
             <span class="k">case</span> <span class="mi">0</span> <span class="o">:</span>
                 <span class="nc">Board</span><span class="o">.</span><span class="na">left</span><span class="o">();</span>
                 <span class="k">break</span><span class="o">;</span>
 
             <span class="k">case</span> <span class="mi">1</span> <span class="o">:</span>
                 <span class="nc">Board</span><span class="o">.</span><span class="na">right</span><span class="o">();</span>
                 <span class="k">break</span><span class="o">;</span>
 
             <span class="k">case</span> <span class="mi">2</span> <span class="o">:</span>
                 <span class="nc">Board</span><span class="o">.</span><span class="na">up</span><span class="o">();</span>
                 <span class="k">break</span><span class="o">;</span>
 
             <span class="k">case</span> <span class="mi">3</span> <span class="o">:</span>
                 <span class="nc">Board</span><span class="o">.</span><span class="na">down</span><span class="o">();</span>
                 <span class="k">break</span><span class="o">;</span>
         <span class="o">}</span>
     <span class="o">}</span>
 
     <span class="kd">public</span> <span class="kd">static</span> <span class="nc">ArrayDeque</span><span class="o">&lt;</span><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="nf">BFS</span><span class="o">()</span> <span class="o">{</span>
         <span class="kt">int</span><span class="o">[]</span> <span class="n">problemSpace</span> <span class="o">=</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">};</span>
         <span class="nc">ArrayDeque</span><span class="o">&lt;</span><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">openList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayDeque</span><span class="o">&lt;&gt;();</span>
         <span class="nc">ArrayDeque</span><span class="o">&lt;</span><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">closedList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayDeque</span><span class="o">&lt;&gt;();</span>
 
         <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">problemSpace</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
             <span class="kt">int</span> <span class="n">tempNode</span> <span class="o">=</span> <span class="n">problemSpace</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
             <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">tempArray</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
             <span class="n">tempArray</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">tempNode</span><span class="o">);</span>
             <span class="n">openList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">tempArray</span><span class="o">);</span>
         <span class="o">}</span>
 
         <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
             <span class="k">if</span> <span class="o">(</span><span class="n">openList</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                 <span class="k">return</span> <span class="n">closedList</span><span class="o">;</span>
             <span class="o">}</span>
             <span class="k">else</span> <span class="o">{</span>
                 <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">selectedNode</span> <span class="o">=</span> <span class="n">openList</span><span class="o">.</span><span class="na">pollFirst</span><span class="o">();</span>
                 <span class="k">if</span> <span class="o">(</span><span class="n">selectedNode</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">5</span><span class="o">)</span> <span class="o">{</span>
                     <span class="n">closedList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">selectedNode</span><span class="o">);</span>
                 <span class="o">}</span>
                 <span class="k">else</span> <span class="o">{</span>
                     <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">:</span> <span class="n">problemSpace</span><span class="o">)</span> <span class="o">{</span>
                         <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">clonedSelectedNode</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">selectedNode</span><span class="o">);</span>
                         <span class="n">clonedSelectedNode</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                         <span class="n">openList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">clonedSelectedNode</span><span class="o">);</span>
                     <span class="o">}</span>
                 <span class="o">}</span>
             <span class="o">}</span>
         <span class="o">}</span>
     <span class="o">}</span>
 <span class="o">}</span>
 
 <span class="kd">class</span> <span class="nc">node</span> <span class="o">{</span>
 
     <span class="n">node</span><span class="o">[][]</span> <span class="n">model</span><span class="o">;</span>
     <span class="kt">int</span> <span class="n">value</span><span class="o">;</span>
     <span class="kt">int</span><span class="o">[]</span> <span class="n">coordinate</span><span class="o">;</span>
     <span class="kt">int</span> <span class="n">initialValue</span><span class="o">;</span>
     <span class="kt">boolean</span> <span class="n">concated</span><span class="o">;</span>
 <span class="c1">// 생성자임</span>
 
     <span class="kd">public</span> <span class="nf">node</span><span class="o">(</span><span class="kt">int</span> <span class="n">value</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">coordinate</span><span class="o">,</span> <span class="n">node</span><span class="o">[][]</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
         <span class="k">this</span><span class="o">.</span><span class="na">initialValue</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
         <span class="k">this</span><span class="o">.</span><span class="na">model</span> <span class="o">=</span> <span class="n">model</span><span class="o">;</span>
         <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
         <span class="k">this</span><span class="o">.</span><span class="na">coordinate</span> <span class="o">=</span> <span class="n">coordinate</span><span class="o">;</span>
         <span class="k">this</span><span class="o">.</span><span class="na">model</span><span class="o">[</span><span class="n">coordinate</span><span class="o">[</span><span class="mi">0</span><span class="o">]][</span><span class="n">coordinate</span><span class="o">[</span><span class="mi">1</span><span class="o">]]</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
         <span class="k">this</span><span class="o">.</span><span class="na">concated</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
     <span class="o">}</span>
     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">concatedReset</span><span class="o">()</span> <span class="o">{</span>
         <span class="k">this</span><span class="o">.</span><span class="na">concated</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
     <span class="o">}</span>
 
     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">reset</span><span class="o">()</span> <span class="o">{</span>
         <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">initialValue</span><span class="o">;</span>
     <span class="o">}</span>
 
     <span class="c1">// 그런데 그러면 board를 업데이트해야함</span>
     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">leftMove</span><span class="o">()</span> <span class="o">{</span>
         <span class="k">if</span> <span class="o">(</span><span class="n">leftCheck</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span><span class="o">){</span>
         
             <span class="c1">// 왼쪽으로 갈 수 있으면 왼쪽으로 감</span>
             <span class="c1">// this.coordinate[0] -= 1; &lt;&lt; 이런식으로 직접 노드를 옮겨서는 안 됨.</span>
             <span class="c1">// value를 좌측으로 옮기고 이 노드의 value는 0이 되어야 함.</span>
             <span class="c1">// 각 체크의 결과는 1 0 value의 값이 나옴, 1인 경우는 옮길 수 있고, 0인 경우는 못옮김</span>
             
             <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
             <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
             
             <span class="c1">// 이 노드의 값을 0으로 초기화하고</span>
             <span class="c1">// 좌측이므로</span>
             <span class="n">node</span> <span class="n">targetNode</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">model</span><span class="o">[</span><span class="k">this</span><span class="o">.</span><span class="na">coordinate</span><span class="o">[</span><span class="mi">0</span><span class="o">]][</span><span class="k">this</span><span class="o">.</span><span class="na">coordinate</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
             <span class="c1">// 좌측 노드의 값을 이 노드의 값으로 치환함</span>
             <span class="n">targetNode</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
             <span class="c1">// 그리고 그 노드가 왼쪽 끝까지 가야하기 때문에 연쇄적으로 leftMove콜을 함</span>
             <span class="n">targetNode</span><span class="o">.</span><span class="na">leftMove</span><span class="o">();</span>
         <span class="o">}</span>
         <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">leftCheck</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
         <span class="o">}</span>
         <span class="k">else</span> <span class="o">{</span>
             <span class="c1">// 만약 왼편에 존재하는 노드가 값을 가지고 있는 노드의 경우에는</span>
             <span class="c1">// &lt;&lt; 현재 노드의 값과 같으면 합쳐진다</span>
             <span class="n">node</span> <span class="n">targetNode</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">model</span><span class="o">[</span><span class="k">this</span><span class="o">.</span><span class="na">coordinate</span><span class="o">[</span><span class="mi">0</span><span class="o">]][</span><span class="k">this</span><span class="o">.</span><span class="na">coordinate</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
             <span class="c1">// 만약 현재 노드의 값과 같아도 concated flag가 true 면 패스한다</span>
             <span class="k">if</span> <span class="o">(!</span><span class="n">targetNode</span><span class="o">.</span><span class="na">concated</span><span class="o">)</span> <span class="o">{</span>
                 <span class="k">if</span> <span class="o">(</span><span class="n">targetNode</span><span class="o">.</span><span class="na">value</span> <span class="o">==</span> <span class="k">this</span><span class="o">.</span><span class="na">value</span><span class="o">)</span> <span class="o">{</span>
                     <span class="n">targetNode</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">targetNode</span><span class="o">.</span><span class="na">value</span> <span class="o">*</span> <span class="mi">2</span><span class="o">;</span>
                     <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
                     <span class="n">targetNode</span><span class="o">.</span><span class="na">concated</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
 
                     <span class="c1">// 보니까 한번만 합쳐지는것같음 모든 블록은 한번만 </span>
                     <span class="c1">// 합쳐져야하기때문에 합친 후에는 연쇄콜을 하면 안됨</span>
 <span class="c1">//                targetNode.leftMove();</span>
                 <span class="o">}</span>
             <span class="o">}</span>
         <span class="o">}</span>
     <span class="o">}</span>
     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">rightMove</span><span class="o">()</span> <span class="o">{</span>
         <span class="c1">// leftMove와 작동방식이 같기 때문에 굳이 주석은 적지 않겠다</span>
         <span class="k">if</span> <span class="o">(</span><span class="n">rightCheck</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
             <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
             <span class="n">node</span> <span class="n">targetNode</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">model</span><span class="o">[</span><span class="k">this</span><span class="o">.</span><span class="na">coordinate</span><span class="o">[</span><span class="mi">0</span><span class="o">]][</span><span class="k">this</span><span class="o">.</span><span class="na">coordinate</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
             <span class="n">targetNode</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
             <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
             <span class="n">targetNode</span><span class="o">.</span><span class="na">rightMove</span><span class="o">();</span>
         <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">rightCheck</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{}</span>
         <span class="k">else</span> <span class="o">{</span>
             <span class="n">node</span> <span class="n">targetNode</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">model</span><span class="o">[</span><span class="k">this</span><span class="o">.</span><span class="na">coordinate</span><span class="o">[</span><span class="mi">0</span><span class="o">]][</span><span class="k">this</span><span class="o">.</span><span class="na">coordinate</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
             <span class="k">if</span> <span class="o">(!</span><span class="n">targetNode</span><span class="o">.</span><span class="na">concated</span><span class="o">)</span> <span class="o">{</span>
                 <span class="k">if</span> <span class="o">(</span><span class="n">targetNode</span><span class="o">.</span><span class="na">value</span> <span class="o">==</span> <span class="k">this</span><span class="o">.</span><span class="na">value</span><span class="o">)</span> <span class="o">{</span>
                     <span class="n">targetNode</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">targetNode</span><span class="o">.</span><span class="na">value</span> <span class="o">*</span> <span class="mi">2</span><span class="o">;</span>
                     <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
                     <span class="n">targetNode</span><span class="o">.</span><span class="na">concated</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
 <span class="c1">//                targetNode.rightMove();</span>
                 <span class="o">}</span>
             <span class="o">}</span>
         <span class="o">}</span>
     <span class="o">}</span>
     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">upMove</span><span class="o">()</span> <span class="o">{</span>
         <span class="k">if</span> <span class="o">(</span><span class="n">upCheck</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
             <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
             <span class="n">node</span> <span class="n">targetNode</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">model</span><span class="o">[</span><span class="k">this</span><span class="o">.</span><span class="na">coordinate</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="k">this</span><span class="o">.</span><span class="na">coordinate</span><span class="o">[</span><span class="mi">1</span><span class="o">]];</span>
             <span class="n">targetNode</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
             <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
             <span class="n">targetNode</span><span class="o">.</span><span class="na">upMove</span><span class="o">();</span>
         <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">upCheck</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{}</span>
         <span class="k">else</span> <span class="o">{</span>
             <span class="n">node</span> <span class="n">targetNode</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">model</span><span class="o">[</span><span class="k">this</span><span class="o">.</span><span class="na">coordinate</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="k">this</span><span class="o">.</span><span class="na">coordinate</span><span class="o">[</span><span class="mi">1</span><span class="o">]];</span>
             <span class="k">if</span> <span class="o">(!</span><span class="n">targetNode</span><span class="o">.</span><span class="na">concated</span><span class="o">)</span> <span class="o">{</span>
                 <span class="k">if</span> <span class="o">(</span><span class="n">targetNode</span><span class="o">.</span><span class="na">value</span> <span class="o">==</span> <span class="k">this</span><span class="o">.</span><span class="na">value</span><span class="o">)</span> <span class="o">{</span>
                     <span class="n">targetNode</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">targetNode</span><span class="o">.</span><span class="na">value</span> <span class="o">*</span> <span class="mi">2</span><span class="o">;</span>
                     <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
                     <span class="n">targetNode</span><span class="o">.</span><span class="na">concated</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
 <span class="c1">//                targetNode.upMove();</span>
                 <span class="o">}</span>
             <span class="o">}</span>
         <span class="o">}</span>
     <span class="o">}</span>
     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">downMove</span><span class="o">()</span> <span class="o">{</span>
 <span class="c1">//        downCheck는 0이면 움직일 수 없는 곳, 1이면 움직일 수 있는 곳,</span>
         <span class="k">if</span> <span class="o">(</span><span class="n">downCheck</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
             <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
             <span class="n">node</span> <span class="n">targetNode</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">model</span><span class="o">[</span><span class="k">this</span><span class="o">.</span><span class="na">coordinate</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="k">this</span><span class="o">.</span><span class="na">coordinate</span><span class="o">[</span><span class="mi">1</span><span class="o">]];</span>
             <span class="n">targetNode</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
             <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
             <span class="n">targetNode</span><span class="o">.</span><span class="na">downMove</span><span class="o">();</span>
         <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">downCheck</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{}</span>
 <span class="c1">//        1도 0도 아닌 정수값인경우</span>
         <span class="k">else</span> <span class="o">{</span>
             <span class="n">node</span> <span class="n">targetNode</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">model</span><span class="o">[</span><span class="k">this</span><span class="o">.</span><span class="na">coordinate</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="k">this</span><span class="o">.</span><span class="na">coordinate</span><span class="o">[</span><span class="mi">1</span><span class="o">]];</span>
             <span class="k">if</span> <span class="o">(!</span><span class="n">targetNode</span><span class="o">.</span><span class="na">concated</span><span class="o">)</span> <span class="o">{</span>
                 <span class="k">if</span> <span class="o">(</span><span class="n">targetNode</span><span class="o">.</span><span class="na">value</span> <span class="o">==</span> <span class="k">this</span><span class="o">.</span><span class="na">value</span><span class="o">)</span> <span class="o">{</span>
                     <span class="n">targetNode</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">targetNode</span><span class="o">.</span><span class="na">value</span> <span class="o">*</span> <span class="mi">2</span><span class="o">;</span>
                     <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
                     <span class="n">targetNode</span><span class="o">.</span><span class="na">concated</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
 <span class="c1">//                targetNode.downMove();</span>
                 <span class="o">}</span>
             <span class="o">}</span>
         <span class="o">}</span>
 
     <span class="o">}</span>
     <span class="kd">public</span> <span class="kt">int</span> <span class="nf">leftCheck</span><span class="o">()</span> <span class="o">{</span>
         <span class="kt">int</span> <span class="n">xIndex</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">coordinate</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
         <span class="kt">int</span> <span class="n">yIndex</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">coordinate</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
         <span class="k">if</span> <span class="o">(</span><span class="n">yIndex</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
             <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
             <span class="c1">// 0 이면 불가능함</span>
         <span class="o">}</span>
         <span class="k">else</span> <span class="o">{</span>
             <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">model</span><span class="o">[</span><span class="n">xIndex</span><span class="o">][</span><span class="n">yIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="o">].</span><span class="na">value</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                 <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
                 <span class="c1">// 1이면 옮길 수 있음</span>
             <span class="o">}</span>
             <span class="k">else</span> <span class="o">{</span>
                 <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">model</span><span class="o">[</span><span class="n">xIndex</span><span class="o">][</span><span class="n">yIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="o">].</span><span class="na">value</span><span class="o">;</span>
                 <span class="c1">// 모두 아닌 경우에는 그 노드의 값을 리턴함</span>
             <span class="o">}</span>
         <span class="o">}</span>
     <span class="o">}</span>
     <span class="kd">public</span> <span class="kt">int</span> <span class="nf">rightCheck</span><span class="o">()</span> <span class="o">{</span>
         <span class="kt">int</span> <span class="n">xIndex</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">coordinate</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
         <span class="kt">int</span> <span class="n">yIndex</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">coordinate</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
         <span class="c1">// 문제 공간은 정사각형 형태이고 가장 오른쪽에 위치해 있을 때이고</span>
         <span class="c1">// length는 index보다 1높게 나오므로 1빼줘야함 ㅇㄱㄹㅇ</span>
         <span class="k">if</span> <span class="o">(</span><span class="n">yIndex</span> <span class="o">==</span> <span class="k">this</span><span class="o">.</span><span class="na">model</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
             <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
         <span class="o">}</span>
         <span class="k">else</span> <span class="o">{</span>
             <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">model</span><span class="o">[</span><span class="n">xIndex</span><span class="o">][</span><span class="n">yIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="o">].</span><span class="na">value</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                 <span class="c1">//오른쪽 노드가 공노드이면</span>
                 <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
             <span class="o">}</span>
             <span class="k">else</span> <span class="o">{</span>
                 <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">model</span><span class="o">[</span><span class="n">xIndex</span><span class="o">][</span><span class="n">yIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="o">].</span><span class="na">value</span><span class="o">;</span>
             <span class="o">}</span>
         <span class="o">}</span>
     <span class="o">}</span>
     <span class="kd">public</span> <span class="kt">int</span> <span class="nf">upCheck</span><span class="o">()</span> <span class="o">{</span>
         <span class="kt">int</span> <span class="n">xIndex</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">coordinate</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
         <span class="kt">int</span> <span class="n">yIndex</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">coordinate</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
         <span class="k">if</span> <span class="o">(</span><span class="n">xIndex</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
             <span class="c1">//위로 더 이상 올라갈 수 없으면</span>
             <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
         <span class="o">}</span>
         <span class="k">else</span> <span class="o">{</span>
             <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">model</span><span class="o">[</span><span class="n">xIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">yIndex</span><span class="o">].</span><span class="na">value</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                 <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
             <span class="o">}</span>
             <span class="k">else</span> <span class="o">{</span>
                 <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">model</span><span class="o">[</span><span class="n">xIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">yIndex</span><span class="o">].</span><span class="na">value</span><span class="o">;</span>
             <span class="o">}</span>
         <span class="o">}</span>
     <span class="o">}</span>
     <span class="cm">/**
      * 아래로 움직일 수 있는지 아닌지를 검사하는 함수임
      *
      * @return 아래로 움직일 수 있으면 0, 아래로 움직일 수 없으면 1, 다른 값이면 해당 노드의 값을 리턴
      */</span>
     <span class="kd">public</span> <span class="kt">int</span> <span class="nf">downCheck</span><span class="o">()</span> <span class="o">{</span>
         <span class="kt">int</span> <span class="n">xIndex</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">coordinate</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
         <span class="kt">int</span> <span class="n">yIndex</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">coordinate</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
         <span class="k">if</span> <span class="o">(</span><span class="n">xIndex</span> <span class="o">==</span> <span class="k">this</span><span class="o">.</span><span class="na">model</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
             <span class="c1">//아래로 더 이상 내려갈 수 없으면</span>
             <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
         <span class="o">}</span>
         <span class="k">else</span> <span class="o">{</span>
             <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">model</span><span class="o">[</span><span class="n">xIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="n">yIndex</span><span class="o">].</span><span class="na">value</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                 <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
             <span class="o">}</span>
             <span class="k">else</span> <span class="o">{</span>
                 <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">model</span><span class="o">[</span><span class="n">xIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="n">yIndex</span><span class="o">].</span><span class="na">value</span><span class="o">;</span>
             <span class="o">}</span>
         <span class="o">}</span>
     <span class="o">}</span>
 <span class="o">}</span>
 <span class="kd">class</span> <span class="nc">board</span> <span class="o">{</span>
     <span class="n">node</span><span class="o">[][]</span> <span class="n">model</span><span class="o">;</span>
 
     <span class="kd">public</span> <span class="nf">board</span><span class="o">(</span><span class="n">node</span><span class="o">[][]</span> <span class="n">inputModel</span><span class="o">)</span> <span class="o">{</span>
         <span class="c1">//정사각형이니까</span>
         <span class="k">this</span><span class="o">.</span><span class="na">model</span> <span class="o">=</span> <span class="n">inputModel</span><span class="o">;</span>
     <span class="o">}</span>
     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">resetBoard</span><span class="o">()</span> <span class="o">{</span>
         <span class="k">for</span> <span class="o">(</span><span class="n">node</span><span class="o">[]</span> <span class="n">nodes</span> <span class="o">:</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
             <span class="k">for</span> <span class="o">(</span><span class="n">node</span> <span class="n">x</span> <span class="o">:</span> <span class="n">nodes</span><span class="o">)</span> <span class="o">{</span>
                 <span class="n">x</span><span class="o">.</span><span class="na">reset</span><span class="o">();</span>
             <span class="o">}</span>
         <span class="o">}</span>
     <span class="o">}</span>
 
     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printBoard</span><span class="o">()</span> <span class="o">{</span>
         <span class="k">for</span> <span class="o">(</span><span class="n">node</span><span class="o">[]</span> <span class="n">x</span> <span class="o">:</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
             <span class="k">for</span> <span class="o">(</span><span class="n">node</span> <span class="n">y</span> <span class="o">:</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
                 <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%d "</span><span class="o">,</span> <span class="n">y</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
             <span class="o">}</span>
             <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
         <span class="o">}</span>
     <span class="o">}</span>
 
     <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getMaxNumber</span><span class="o">()</span> <span class="o">{</span>
         <span class="kt">int</span> <span class="n">maxNumber</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
         <span class="k">for</span> <span class="o">(</span><span class="n">node</span><span class="o">[]</span> <span class="n">x</span> <span class="o">:</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
             <span class="k">for</span> <span class="o">(</span><span class="n">node</span> <span class="n">y</span> <span class="o">:</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
                 <span class="k">if</span> <span class="o">(</span><span class="n">y</span><span class="o">.</span><span class="na">value</span> <span class="o">&gt;</span> <span class="n">maxNumber</span><span class="o">)</span> <span class="o">{</span>
                     <span class="n">maxNumber</span> <span class="o">=</span> <span class="n">y</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
                 <span class="o">}</span>
             <span class="o">}</span>
         <span class="o">}</span>
         <span class="k">return</span> <span class="n">maxNumber</span><span class="o">;</span>
     <span class="o">}</span>
 
     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setModel</span><span class="o">(</span><span class="n">node</span><span class="o">[][]</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
         <span class="k">this</span><span class="o">.</span><span class="na">model</span> <span class="o">=</span> <span class="n">model</span><span class="o">;</span>
     <span class="o">}</span>
     <span class="kd">public</span> <span class="n">node</span><span class="o">[][]</span> <span class="nf">getModel</span><span class="o">()</span> <span class="o">{</span>
         <span class="k">return</span> <span class="n">model</span><span class="o">;</span>
     <span class="o">}</span>
 
     <span class="cm">/**
      * 모든 노드에 대해서 왼쪽 명령을 내림
      */</span>
     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">left</span><span class="o">()</span> <span class="o">{</span>
         <span class="c1">// 모든 노드에 대해서 왼쪽 노드로 이동</span>
         <span class="k">for</span> <span class="o">(</span><span class="n">node</span><span class="o">[]</span> <span class="n">x</span> <span class="o">:</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
             <span class="k">for</span> <span class="o">(</span><span class="n">node</span> <span class="n">y</span> <span class="o">:</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
                 <span class="n">y</span><span class="o">.</span><span class="na">leftMove</span><span class="o">();</span>
             <span class="o">}</span>
         <span class="o">}</span>
         <span class="c1">// 한번 움직임이 끝났으면 concated 플래그를 다시 reset 해야함</span>
         <span class="k">for</span> <span class="o">(</span><span class="n">node</span><span class="o">[]</span> <span class="n">x</span> <span class="o">:</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
             <span class="k">for</span> <span class="o">(</span><span class="n">node</span> <span class="n">y</span> <span class="o">:</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
                 <span class="n">y</span><span class="o">.</span><span class="na">concatedReset</span><span class="o">();</span>
             <span class="o">}</span>
         <span class="o">}</span>
     <span class="o">}</span>
     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">right</span><span class="o">()</span> <span class="o">{</span>
         <span class="c1">// 모든 노드에 대해서 오른쪽 노드로 이동</span>
 <span class="c1">//        for (node[] x : model) {</span>
 <span class="c1">//            for (node y : x) {</span>
 <span class="c1">//                y.rightMove();</span>
 <span class="c1">//            }</span>
 <span class="c1">//        }</span>
         <span class="c1">// 근데 위의 left식으로 구현하면 안 됨, 왜냐하면 가장 오른편부터 합쳐져야 하기 때문임</span>
         <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
         <span class="k">for</span> <span class="o">(</span><span class="n">node</span><span class="o">[]</span> <span class="n">x</span> <span class="o">:</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
             <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">max</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
                 <span class="n">x</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">rightMove</span><span class="o">();</span>
             <span class="o">}</span>
         <span class="o">}</span>
         <span class="k">for</span> <span class="o">(</span><span class="n">node</span><span class="o">[]</span> <span class="n">x</span> <span class="o">:</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
             <span class="k">for</span> <span class="o">(</span><span class="n">node</span> <span class="n">y</span> <span class="o">:</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
                 <span class="n">y</span><span class="o">.</span><span class="na">concatedReset</span><span class="o">();</span>
             <span class="o">}</span>
         <span class="o">}</span>
     <span class="o">}</span>
     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">up</span><span class="o">()</span> <span class="o">{</span>
         <span class="k">for</span> <span class="o">(</span><span class="n">node</span><span class="o">[]</span> <span class="n">x</span> <span class="o">:</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
             <span class="k">for</span> <span class="o">(</span><span class="n">node</span> <span class="n">y</span> <span class="o">:</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
                 <span class="n">y</span><span class="o">.</span><span class="na">upMove</span><span class="o">();</span>
             <span class="o">}</span>
         <span class="o">}</span>
         <span class="k">for</span> <span class="o">(</span><span class="n">node</span><span class="o">[]</span> <span class="n">x</span> <span class="o">:</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
             <span class="k">for</span> <span class="o">(</span><span class="n">node</span> <span class="n">y</span> <span class="o">:</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
                 <span class="n">y</span><span class="o">.</span><span class="na">concatedReset</span><span class="o">();</span>
             <span class="o">}</span>
         <span class="o">}</span>
     <span class="o">}</span>
     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">down</span><span class="o">()</span> <span class="o">{</span>
 <span class="c1">//        for (node[] x : model) {</span>
 <span class="c1">//            for (node y : x) {</span>
 <span class="c1">//                y.downMove();</span>
 <span class="c1">//            }</span>
 <span class="c1">//        }</span>
 
         <span class="c1">// 근데 위의 down 식으로 구현하면 안 됨, 왜냐하면 가장 아래쪽부터 합쳐져야 하기 때문임니당</span>
         <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
         <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">max</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
             <span class="n">node</span><span class="o">[]</span> <span class="n">targetRow</span> <span class="o">=</span> <span class="n">model</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
             <span class="k">for</span> <span class="o">(</span><span class="n">node</span> <span class="n">x</span> <span class="o">:</span> <span class="n">targetRow</span><span class="o">)</span> <span class="o">{</span>
                 <span class="n">x</span><span class="o">.</span><span class="na">downMove</span><span class="o">();</span>
             <span class="o">}</span>
         <span class="o">}</span>
         <span class="k">for</span> <span class="o">(</span><span class="n">node</span><span class="o">[]</span> <span class="n">x</span> <span class="o">:</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
             <span class="k">for</span> <span class="o">(</span><span class="n">node</span> <span class="n">y</span> <span class="o">:</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
                 <span class="n">y</span><span class="o">.</span><span class="na">concatedReset</span><span class="o">();</span>
             <span class="o">}</span>
         <span class="o">}</span>
     <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div></div>]]></content><author><name>ash tensor</name></author><category term="JAVA" /><category term="PS" /><category term="백준" /><summary type="html"><![CDATA[[백준][JAVA] 백준 12100번 :: 2048(Easy) :: 골드 2]]></summary></entry></feed>