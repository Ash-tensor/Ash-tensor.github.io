<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-12-16T17:27:45+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Tensor Studio</title><subtitle>텐서 스튜디오</subtitle><author><name>ash tensor</name></author><entry><title type="html">[깃허브 블로그]지킬 블로그 코멘트 기능 추가(clean blog theme)</title><link href="http://localhost:4000/%EA%B9%83%ED%97%88%EB%B8%8C/2023/12/14/jekyll-blog-theme-3.html" rel="alternate" type="text/html" title="[깃허브 블로그]지킬 블로그 코멘트 기능 추가(clean blog theme)" /><published>2023-12-14T00:00:00+09:00</published><updated>2023-12-14T00:00:00+09:00</updated><id>http://localhost:4000/%EA%B9%83%ED%97%88%EB%B8%8C/2023/12/14/jekyll-blog-theme-3</id><content type="html" xml:base="http://localhost:4000/%EA%B9%83%ED%97%88%EB%B8%8C/2023/12/14/jekyll-blog-theme-3.html"><![CDATA[<h1 id="깃허브-블로그-코멘트-기능-추가clean-blog-theme">깃허브 블로그 코멘트 기능 추가(clean blog theme)</h1>

<p>블로그에는 기본적으로 댓글 란은 무조건 있어야 한다고 생각한다. 추가하는게 어렵지 않다. 터미널을 두드릴 필요도 없다. 오히려 카테고리 란을 추가하는게 조금 더 어려운 것 같다. 그러면 한번 추가해 보자고!</p>

<h2 id="disqus">DISQUS</h2>

<p>깃허브 페이지를 사용하는 데 있어서 가장 많이 사용하는 덧글/코멘트 기능이라고 하면 DISQUS다. STACK OVERFLOW나 다른 곳에서도 가장 먼저 추천하는 기능이다. 게다가 무료다! 사용하지 않을 이유가 없다.</p>

<p><img src="/img/posts/clean-blog-setup/09.png" style="width: 75%" /></p>

<p>지금 이 포스트 아래에도 붙어있는 댓글란인데, 많은 깃허브 페이지들을 보다 보면 대부분의 댓글이 이렇게 생긴 것을 확인할 수 있을 것이다.</p>

<p><a href="https://disqus.com/profile/signup/intent/">일단 여기</a>서 회원가입을 해 주면 된다.</p>

<p><img src="/img/posts/clean-blog-setup/10.png" style="width: 75%" /></p>

<p>회원가입을 하고 나면 이런 창이 보일 텐데, I want to install Disqus on my site를 눌러 주면 된다. 그리고 사이트 이름을 정해주고 난 뒤, 요금이 들지 않는 BASIC 요금제를 선택해 주고 select platform에서 jekyll을 선택해 주면 된다.</p>

<p><img src="/img/posts/clean-blog-setup/12.png" style="width: 75%" /></p>

<p>그리고 나면</p>

<p><img src="/img/posts/clean-blog-setup/13.png" style="width: 75%" /></p>

<p>위 사진에서도 나와있듯이 Universial Embed code 링크를 클릭해서 들어간 뒤</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div id="disqus_thread"&gt;&lt;/div&gt;
&lt;script&gt;
    /**
    *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM
    *  ...
    *  ...
    *  생략함
</code></pre></div></div>

<p>위 꼴의 universial embed code를 복사한다. 그리고 난 뒤 자신의 지킬 블로그가 설치되어 있는 로컬 폴더로 들어간다.</p>

<p>그리고 난 뒤, _layout 디렉토리의 post.markdown 파일로 들어간 뒤</p>

<p><img src="/img/posts/clean-blog-setup/15.png" style="width: 75%" /></p>

<p>이 부분에 아까 복사한 자신의 코드를 붙여넣기 하면 된다! 이제 다 끝났다!</p>

<h2 id="yaml-프론트매터">YAML 프론트매터</h2>

<p>위 코드는 자신의 disqus 댓글창을 생성하는 코드로, 당연하겠지만 항상 코멘트 섹션을 생성한다. 만약 그게 싫고, 포스트별로 댓글 창을 설정하고 싶은 경우에는 추가적으로 코드를 적어 넣어야 한다.</p>

<p><img src="/img/posts/clean-blog-setup/14.png" style="width: 75%" /></p>

<p>이 포스트의 프론트매터인데, 댓글을 달고싶은 포스트의 프론트매터에 위 사진처럼</p>

<p>속성을 넣어주면 된다. 그러면 지킬이 페이지를 구성할 때, disquss를 참조해서 포스트를 구성하게 된다. 그리고 난 뒤, 아까 수정했던 post.markdown에 들어가서 아까 작성했던 코드 스니펫의 앞 뒤에 if page.comments 와 endif 블록을 작성해 넣으면 된다.</p>

<p><img src="/img/posts/clean-blog-setup/16.png" style="width: 75%" />
<img src="/img/posts/clean-blog-setup/17.png" style="width: 75%" /></p>

<p>이런식으로!</p>

<p>충분히 이해 가능하겠지만, 이는 페이지의 yaml 프론트메터의 comments 부분이 참이면 아래의 코드 스니펫을 실행하라는 의미이다.</p>]]></content><author><name>ash tensor</name></author><category term="깃허브" /><summary type="html"><![CDATA[troubleshooting]]></summary></entry><entry><title type="html">[깃허브 블로그]지킬 블로그 테마 설치 및 오류 수정(clean blog theme)</title><link href="http://localhost:4000/%EA%B9%83%ED%97%88%EB%B8%8C/2023/12/13/jekyll-blog-theme-2.html" rel="alternate" type="text/html" title="[깃허브 블로그]지킬 블로그 테마 설치 및 오류 수정(clean blog theme)" /><published>2023-12-13T00:00:00+09:00</published><updated>2023-12-13T00:00:00+09:00</updated><id>http://localhost:4000/%EA%B9%83%ED%97%88%EB%B8%8C/2023/12/13/jekyll-blog-theme-2</id><content type="html" xml:base="http://localhost:4000/%EA%B9%83%ED%97%88%EB%B8%8C/2023/12/13/jekyll-blog-theme-2.html"><![CDATA[<h1 id="깃허브-블로그-지킬-테마-설지법clean-blog-theme">깃허브 블로그 지킬 테마 설지법(clean blog theme)</h1>

<p>루비 및 gem, bundle은 이미 설치되어 있다고 가정한다. 만약 설치되어 있지 않다면</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem install jekyll bundler
</code></pre></div></div>

<p>를 터미널에서 실행해 주면 된다. macOs에는 이미 기본적으로 루비가 설치되어 있기 때문에 루비를 따로 설치할 필요는 없다. 혹시라도 윈도우인 경우에는 루비 공식 홈페이지에서 루비를 설치한 뒤, 번들러와 지킬을 설치해 주면 된다.</p>

<p>설치 방법은 두 가지가 있다.</p>

<p><a href="https://github.com/StartBootstrap/startbootstrap-clean-blog-jekyll">Clean Blog 깃허브 주소</a></p>

<p>저 깃허브 레포지토리의 readme.md의 방법대로 실행하는 법과, 깃허브 레포지토리를 클론해서 사용하는 방법 두 가지가 존재한다.</p>

<p><img src="/img/posts/clean-blog-setup/01.png" style="width: 75%" /></p>

<p>위 방법이 readme.md 방법대로 실행하는 방법인데, 위 방법은 순수한 테마를 다운받는 방법으로, 기본적인 설정이나 최초 이미지 같은 설정이 아무것도 되어 있지 않은 테마를 다운받는 방법이다. 
깔끔해서 나쁘지는 않지만, 결국 기초 뼈대가 되는 레이아웃 마크다운 파일을 직접 만들어 줘야 되고 커스터마이징 해줘야 되는건 똑같기 때문에 그냥 깃허브 레포지토리를 클론해서 사용하는 것을 추천한다. 그렇기에 여기서도 레포지토리를 클론해서 사용하는 방법으로 설명할 것이다.</p>

<h2 id="설치-방법">설치 방법</h2>

<ol>
  <li>
    <p>깃허브 페이지를 이용해 지킬 블로그를 배포할 정도라면 적어도 최소한 컴퓨터에 친숙한 사람이라고 생각은 하지만 설명하자면</p>

    <p><img src="/img/posts/clean-blog-setup/02.png" style="width: 75%" /></p>

    <p>여기서 New 버튼을 눌러서 새로운 깃허브 레포지토리를 만들고 위 사진처럼 자신의 깃허브 이름과 동일하도록 레포지토리를 만들면 된다.</p>
  </li>
</ol>

<h3 id="깃허브-이름과-레포지토리-이름을-동일하게-만들어야-하는-이유">깃허브 이름과 레포지토리 이름을 동일하게 만들어야 하는 이유</h3>

<p>왜 깃허브 이름과 동일하도록 레포지토리를 만들어야 되냐고 물어볼 수도 있다. 여기에는 이유가 있는데 만약 자신의 이름과 다르게 레포지토리를 만들게 되면 설정이 조금 귀찮게 된다.</p>

<p>예를 들어서 레포지토리의 이름을 [tensor-studio] 라고 설정한다면</p>

<ul>
  <li>“tensor-studio.github.io”</li>
</ul>

<p>인터넷 상에 올라갈 주소가 이런 식으로 만들어 지는 것이 아니라</p>

<ul>
  <li>“Ash-tensor/tensor-studio.github.io”</li>
</ul>

<p>이런식으로 구성되게 된다. 이렇게 되면 문제가 생기는데 지킬 테마는 기본적으로 깃허브 이름과 레포지토리 이름이 동일할 것이라고 생각하고 제작된 경우가 있다. 그런 경우에는 당연하게도 오류가 생기게 되는데 pamalink와 baseurl등을 추가적으로 _config.yml에서 설정해 줘야 할 필요가 있다. 이런 경우에는 css 스타일이 다 날라가 버리거나, 테마의 기능이 제대로 기능하지 않는 경우가 있다. 그런 설정을 추가적으로 하고 싶지 않다면, 그냥 레포지토리의 이름과 깃허브 이름을 동일하게 만들어 주는 편이 낫다.</p>

<p><img src="/img/posts/clean-blog-setup/03.png" style="width: 75%" /></p>

<ol>
  <li>설정을 Public으로 구성해 주고, 터미널로 들어가서 로컬에서 설치하고 싶은 위치에 당신의 레포지토리를 git clone 해준 뒤,
<a href="https://github.com/StartBootstrap/startbootstrap-clean-blog-jekyll">여기서 Clean Blog를 git clone 하면 된다.</a> 혹시라도 처음인 사람을 위해 쓰자면</li>
</ol>

<p><img src="/img/posts/clean-blog-setup/04.png" style="width: 75%" /></p>

<p>여기에서 download.zip을 하거나, 원하는 위치에</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone "https://github.com/StartBootstrap/startbootstrap-clean-blog-jekyll.git"
</code></pre></div></div>

<p>이렇게 클론하면 된다.</p>

<p>clean-blog-setup에 있는 모든 파일을 복사한 뒤, 아까 만든 자신의 레포지토리에 복사해 넣고, 중복되는 파일은 ‘대치’를 선택한다.</p>

<ol>
  <li>
    <p>터미널에</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> bundle install
 bundle exec jekyll serve
</code></pre></div>    </div>
  </li>
</ol>

<p>를 입력해 주면 지킬이 번들러를 통해 페이지를 빌드하기 시작한다(당연히 터미널의 위치는 당신의 레포지토리 위치여야 한다). 그 뒤, 자신의 github 레포지토리로 푸쉬하면 된다.</p>

<h2 id="_configyml-및-깃허브-deploy-오류-해결">_config.yml 및 깃허브 deploy 오류 해결</h2>

<ol>
  <li>_config.yml 수정</li>
</ol>

<p><img src="/img/posts/clean-blog-setup/06.png" style="width: 75%" /></p>

<p>_config.yml 파일을 자신에게 맞게 올바르게 수정하고(title, email, username 등) url을 자신 깃허브 주소에 맞게 수정한다. 예를들어서</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>url: https://Ash-tensor.github.io
https://자신 깃허브 아이디.github.io 포맷이다.
</code></pre></div></div>

<p>이런 식으로 수정하면 된다. https:// 부분을 빼놓고 작성하면 나중에 google search consol에 sitemap이 제대로 등록되지 않는 문제가 생긴다. 그러니 https:// 부분을 꼭 작성해 주도록 하자!</p>

<p>그리고 위 사진처럼 baseurl을</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>baseurl: ""
</code></pre></div></div>

<p>이런식으로 지워주면 된다. 앞서 설명했듯, baseurl은 레포지토리의 이름을 다른 이름으로 설정했을때 필요한 설정이기 때문에 지워야 한다. 그리고</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sass:
sass_dir: _sass
style: compressed
</code></pre></div></div>

<p>부분을 추가해 주면 된다. 이 부분은 만약 bundle exec jekyll serve를 실행했을때 아무런 상관이 없거나, github page 상에서 아무 문제 없이 deploy되면 추가할 필요는 없다. 하지만 내 경우에는</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Your SCSS file assets/main.scss has an error on line 2: File to import not found or unreadable
</code></pre></div></div>

<p>에러가 생겼기 때문에 추가했다.
만약 구글 애널리틱스를 사용하지 않는다면 주석 처리해놔도 상관 없다.</p>

<ol>
  <li>webrick 문제</li>
</ol>

<p>bundle exec jekyll serve를 터미널에서 실행했을 때,
webrick 관련 오류가  설치되지 않았다는 오류가 뜨는 경우가 있다. 이런 경우에는 자신의 .gemfile을 열어서</p>

<p><img src="/img/posts/clean-blog-setup/07.png" style="width: 75%" /></p>

<p>이런식으로,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem "webrick"
</code></pre></div></div>

<p>을 추가해 준 뒤</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle install
buncle exec jekyll serve
</code></pre></div></div>

<p>를 터미널에서 실행하면 된다.</p>

<ol>
  <li>Your SCSS file assets/main.scss has an error on line 2: File to import not found or unreadable 문제</li>
</ol>

<p>이 경우에는 로컬에서는 문제 없이 빌드되는데, 깃허브 상에서 올바르게 deploy 되지 않는 문제였다. 위 경우에는</p>

<p><a href="https://github.com/StartBootstrap/startbootstrap-clean-blog-jekyll/issues/219">위 링크</a>를 많이 참고했는데, 해결 방법으로는</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sass:
sass_dir: _sass
style: compressed
</code></pre></div></div>

<p>를 _config.yml 파일에 추가하고 .gitignore 파일에서 vendor와 vendor/bundle을 삭제하면 정상적으로 깃허브 상에서 빌드된다!!</p>

<p>수정하는 방법으로는 터미널에서</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano .gitignore
</code></pre></div></div>

<p>를 한 뒤에, vendor, vendor/bundle을 삭제하고, contrl + x를 누른 뒤 저장하거나, 숨긴파일을 모두 보도록 설정한 뒤, .gitignore 파일을 직접 수정해도 된다.</p>

<p><img src="/img/posts/clean-blog-setup/08.png" style="width: 75%" /></p>

<p>이런식으로!</p>

<ol>
  <li>혹시라도 index.md, index.html, 또는 home.md, about.md, 404.html, 404.md등이 이미 존재한다는 오류</li>
</ol>

<p>이는</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jekyll new 
</code></pre></div></div>

<p>등으로 이미 디렉터리에 지킬 파일을 만들어 놓은 경우나, 다른 테마를 설치하거나 한 뒤 남아있는 파일이 중복되는 경우에 발생한다. index.md, index.html 등은 jekyll에서 같은 파일로 보기 때문에 빌드함에 있어서 충돌이 나는 경우다.</p>

<p>이런 경우에는 간단하게, 자신이 사용하고 싶은 페이지를 선택하고 다른 파일을 삭제하면 된다.(jekyll은 html이나 md 모두 빌드할 수 있다)</p>

<h2 id="마치면서">마치면서</h2>

<p>깃허브 및 기본적인 지식은 알 것이라고 생각하고 넘어간 부분이 있었는데, 그리고 내가 이미 빌드해 놨기 때문에 처움부터 모든 오류를 서술할 수는 없었지만, 대부분은 gpt가 해결할 수 있거나, 사소한 오류인 경우가 많기 때문에 따로 적지는 않았다.</p>

<p>Your SCSS file assets/main.scss has an error on line 2: File to import not found or unreadable 문제가 가장 귀찮았는데 혹시라도 문제가 있다면 위 방법으로 해결할 수 있었으면 한다.</p>

<p>끝!</p>]]></content><author><name>ash tensor</name></author><category term="깃허브" /><summary type="html"><![CDATA[troubleshooting]]></summary></entry><entry><title type="html">[깃허브 블로그]지킬 블로그 테마 적용법(clean blog theme)-테마 추천 및 고르는 법</title><link href="http://localhost:4000/%EA%B9%83%ED%97%88%EB%B8%8C/2023/12/11/jekyll-blog-theme-1.html" rel="alternate" type="text/html" title="[깃허브 블로그]지킬 블로그 테마 적용법(clean blog theme)-테마 추천 및 고르는 법" /><published>2023-12-11T00:00:00+09:00</published><updated>2023-12-11T00:00:00+09:00</updated><id>http://localhost:4000/%EA%B9%83%ED%97%88%EB%B8%8C/2023/12/11/jekyll-blog-theme-1</id><content type="html" xml:base="http://localhost:4000/%EA%B9%83%ED%97%88%EB%B8%8C/2023/12/11/jekyll-blog-theme-1.html"><![CDATA[<h1 id="깃허브-블로그-지킬-테마-적용법clean-blog-theme">깃허브 블로그 지킬 테마 적용법(clean blog theme)</h1>

<p>깃허브 블로그를 만드는 다양한 방법이 있고, 구글에 한국어로 검색해 봐도 지킬 블로그를 구성하는 기본적인 방법들이 넘쳐난다.
하지만 그렇다고 하더라도, 지킬 블로그는 처음 시도하는 사람에게는 불친절하기 짝이 없다. 아무래도 한국어로는 대표적인 테마 몇 개 정도의 구성 방법만이 존재할 뿐이고, 설명도 조금 이상한 경우가 많았기 때문에…</p>

<p>이 clean blog theme 같은 경우에도 포스트를 깃허브 상에 올릴 때 있어서 계속 오류가 발생하기도 했다. 
그리고 테마별로 지정해야 하는 설정도 다르기 때문에 처음 시도하는 사람이라면 꽤나 많은 시행착오를 거쳐야 할 것이다. 내 경험이지만, 이 지킬을 구성하는 liquid 라는 언어는 띄어쓰기 단 하나 가지고도 빌드를 포기해버리기 때문에 눈쌀을 찌푸렸던 기억이 난다. 어셈블리어도 이 정도는 아니었는데ㅋㅋ</p>

<p>아무튼 이 지킬 블로그를 구성하고, 트러블 슈팅을 하면서 겪었던 에러등을 해결했던 방법을 공유하고자 이 포스트를 쓴다!</p>

<h2 id="테마-고르는-법">테마 고르는 법</h2>

<p>깃허브 페이지를 이용해 지킬 블로그를 배포할 정도라면 적어도 최소한 컴퓨터에 친숙한 사람이라고 생각은 하지만… 지킬 블로그를 만들며 가장 중요한 것은 테마 선정이라고 생각한다…! 이건 몇 번을 강조해도 중요함이 지나치지 않다! 내가 몇 번의 시도를 하면서 깨달았던 몇가지 사항을 먼저 정리하지면…</p>

<ol>
  <li><strong>테마는 무조건 유명한 걸로!</strong></li>
  <li><strong>최대한 최근 제작된 테마일수록 좋다.</strong></li>
  <li><strong>자신이 블로그에 필요한 기능이 뭐가 있을지 생각해 볼 것</strong></li>
</ol>

<p>이렇게 정리해 볼 수 있을 것 같다! 이유로는 몇가지가 있는데</p>

<p>오래된 테마일수록 현재 지킬 표준과 맞지 않는 경우가 많다. 그냥 많은 게 아니라 아주 많았다… 기본적으로 상위권의 테마를 사용한다고 하더라도 수정해야 하는 경우가 많은데 업데이트가 멈춘지 수 년된 테마라면 제대로 작동하기는 어려울 것이다.</p>

<p><a href="https://jekyllthemes.io/jekyll-blog-themes">지킬 테마 사이트</a></p>

<p>보통, 기본적으로 이 페이지에서 지킬 테마를 검색해 보고, 어떤 테마를 사용할지 정하는 경우가 많을 텐데(적어도 내 경우에는 그랬다!) 테마가 오래되거나, 테마가 인기가 없는 경우에는 단지 테마를 적용하는 것만 신경쓰면 되는 것이 아니라,</p>

<ol>
  <li><strong>로컬에서 아예 빌드가 되지 않거나,</strong></li>
  <li><strong>어찌저찌 에러를 다 정리하고 로컬에서 빌드를 성공했다고 하더라도 github page 상에서 빌드가 되지 않거나(!!)</strong></li>
  <li><strong>어찌저찌 github page 상에서 빌드가 되었다고 하더라도 적용되어 있는 css 스타일이 제대로 적용되지 않아 css가 전부 날라간</strong></li>
</ol>

<p>&lt;!DOCTYPE html&gt;
    &lt;html&gt;
      &lt;head&gt;
          <meta charset="utf-8" />
      &lt;/head&gt;
      &lt;body&gt;
          Hello, world!
    &lt;/body&gt;
  &lt;/html&gt;</p>

<p>이런 식의 페이지만 확인할 수 있거나(!!) 하는 경우가 많았기 때문이다.</p>

<p>단순히 오류만 수정해야 하는 것이 아니라 완전히 구닥다리 원시 코드라서 처음부터 다 수정해야 되는 경우라면 골치가 아플 것이다. 이런 경우에는 GPT도 정신을 못차리니 열심히 구글링 하면서 오류를 수정해야 한다. 아니면 테마를 바꾸거나.</p>

<p>내 경우가 딱 이랬는데, 물론 선술했듯 깃허브 페이지에 관심을 가질 정도라면 최소한 컴퓨터와 거리가 멀지는 않을 테니까, 코드를 고쳐보면서 이것 저것 시도하면서 에러를 고치는 경우도 많겠지만, 이런 경우에 테마가 유명하지 않으면 영어로 검색한다고 하더라도 제대로 결과가 나오지 않아서, 결국 테마를 변경했던 경험이 있다.</p>

<p>그리고 만약 커스터마이징을 할 때도, 유명한 테마일수록 해당 기능을 작성하는데 훨신 수월하다. 이미 빌드되서 배포되고 있는 페이지들을 깃허브 레포지토리에서 참고하면서 빌드하기도 간편하다(보통 MIT 라이센스로 배포되기 때문에 사용해도 문제 없다)</p>

<p>대표적으로 한국에서 많이 사용하는 테마로는
<a href="https://github.com/mmistakes/minimal-mistakes" title="미니멀 미스테이크 깃허브 주소">minimal-mistake</a> 와 <a href="https://github.com/poole/lanyon" title="lanyon 깃허브 주소">lanyon</a>, <a href="https://github.com/bencentra/centrarium">centarium</a>을 사용하는 걸 많이 확인했다.</p>

<p><img src="/img/minimal.png" style="width: 50%" /></p>

<p>개인적으로는 minimal mistake를 추천하는데 그 이유는 참고할만한 한국 깃허브 레포지토리가 많기 때문에 추가적인 기능을 제작하기 매우 수월할 것으로 보이기 때문이다. 게다가 기본적인 기능은 이미 다 들어가 있다! 네비게이션 바 부터, 드롭다운 메뉴, 사이드바까지. 기능이 많은건 언제나 좋다.</p>

<p>왜냐하면 생각보다 기능 추가하는 건 귀찮다… 티스토리나 네이버 블로그가 기본적으로 제공하는 카테고리 기능 같은 것도 하나 추가하려면 몇시간은 기본이다.</p>

<h2 id="clean-blog-theme">Clean Blog theme</h2>

<p><a href="https://github.com/StartBootstrap/startbootstrap-clean-blog-jekyll">Clean Blog 깃허브 주소</a></p>

<p>그럼에도 불구하고 이 블로그가 적용된 테마는 clean blog theme인데, 이유는 없고, 뭔가 그냥 마음에 들었기 때문이다.</p>

<p>이상하게도 한국어로 된 블로그 테마로 clean blog theme을 적용한 블로그는 많이 찾아보지 못했다. 외국에서는 꽤나 많이 사용하는 것 같은데…</p>

<p>아무튼 이 clean blog 테마를 혹시라도 사용하려는 사람들을 위해서- 이 테마를 커스터마이징 하면서(아직 다 완성되지는 않았지만)내 나름대로 오류 해결 및 설치 방법을 공유하고자 한다.</p>]]></content><author><name>ash tensor</name></author><category term="깃허브" /><summary type="html"><![CDATA[깃허브 블로그 지킬 테마 적용법(clean blog theme)]]></summary></entry><entry><title type="html">51회차 SQLD 시험 후기</title><link href="http://localhost:4000/%EC%9E%90%EA%B2%A9%EC%A6%9D/2023/12/07/sqld.html" rel="alternate" type="text/html" title="51회차 SQLD 시험 후기" /><published>2023-12-07T00:00:00+09:00</published><updated>2023-12-07T00:00:00+09:00</updated><id>http://localhost:4000/%EC%9E%90%EA%B2%A9%EC%A6%9D/2023/12/07/sqld</id><content type="html" xml:base="http://localhost:4000/%EC%9E%90%EA%B2%A9%EC%A6%9D/2023/12/07/sqld.html"><![CDATA[<h1 id="51회-sqld-시험-후기-및-공부법">51회 SQLD 시험 후기 및 공부법</h1>
<p>턱걸이 결과라 부끄럽지만…
<img src="/img/SQLD.png" style="width: 50%" /></p>
<h2 id="시험-후기">시험 후기</h2>
<p>일단 무엇보다도 개념 문제가 많이 출제되었다고 느꼈다. 가장 기억에 남는 문제라고 한다면 이 두가지인데</p>
<ul>
  <li>NULL의 연산(NULL으로 나누면 오류인가?)</li>
  <li>오라클 및 MSSQL에서 NULL은 가장 큰 값으로 취급되는가, 가장 작은 값으로 취급되는가?</li>
</ul>

<p>일단 기본적으로 흔히 ‘노랭이’라고 불리는 SQLD/P 실전연습문제집을 풀어보지 않고, 기출문제 및 복원문제로만 공부를 했는데, 그래서였는지 몰라도 처음에 문제를 봤을때 꽤나 당황했다.</p>

<p>오라클에서 NULL이 가장 큰 값으로 취급되는 건 기출문제에서도 여러번 나와서 기억하고 있었는데 문제를 풀다 보니, “어? MSSQL에서도 그런가?” 헷갈리기 시작해서 엄청 고민했었던 기억이 난다.</p>

<p>그리고 “NULL로 나누었을때 오류가 나는가?” 이러한 어찌보면 너무나 쉬운 개념도 생각하다 보니 헷갈려서 잘못 선택하기 쉬울 것 같았다. 왜냐하면 SUM, AVG과 같은 집계함수는 NULL을 포함하지 않기 때문에, 그런 점에서 헷길릴만 한 것 같다.
<strong>답부터 말하면 NULL으로 나누면 오류가 나지 않는다!!</strong></p>

<p>그리고 또, 좀 악질이었던 점은, 이러한 개념 문제가 2 문제씩 출제가 되어서, 이러한 개념을 모르면 무조건 4점씩 날아가게 설계가 되어 있었던 점이다.</p>

<p>어찌보면 자비라고 생각도 드는데, 한 문제는 NULL로 나누면 오류가 난다고 표시하고, 한 문제는 NULL로 나누면 오류가 나지 않는다고 선택하면 둘 중에 하나는 정답이었기 때문에, 어찌보면 다행인가 싶기도 하다. «나름 팁이라면 팁이다.</p>

<p>아무튼 정리하자면</p>

<ul>
  <li>개념이 중요하다!! 내가 언급한 개념 말고도 틀릴만하거나 헷갈릴만한 SQL 특유의 개념이 많이 출제되었다고 느꼈다. 단순 노랭이 N회독 말고 선지를 가다듬으며 정리하는 것이 좋다고 생각한다!</li>
  <li>실제로 이번 회차에서는 커뮤니티에서도 논란이 되는 문제가 많았는데
    <ul>
      <li>DCL인지 아니면 grant, revoke라고 써야하는지(개인적으로 DCL이 맞지 않나 생각한다)</li>
      <li>어떤것이 파생속성인지 선지에서 고르는 문제, 커뮤니티에서도 결국 어떤게 정답이라고 확실하게 가려내지 못했던 것으로 기억한다. 쟁점이 가격이 파생속성인지 아닌지에 따라서 갈렸는데, 궁금한 사람은 복원문제를 보는것도 좋다고 생각한다.</li>
      <li>오라클에서 날짜 관련 문제. 2023-05-05 18:00을 yyyy로 추출하면 답이 2023-01-01 00:00:00 인지, 2023-05-01 00:00:00 인지. 나는 당연히 2023-01-01 ~ 이라고 생각했는데, 커뮤니티에서 직접 오라클로 시험해보니 2023-05-01 ~~이 나온다는 후기가 있어서 충격을 먹었었다.</li>
      <li>문법 오류에 관한 문제</li>
    </ul>
  </li>
  <li>이렇게 개념을 묻는 문제가 많았다.</li>
</ul>

<h2 id="공부방법">공부방법</h2>

<p>앞서 말했듯 나는 기본적으로 책을 구매하거나 흔히 하는 노랭이 N회독은 하지 않고, 인터넷에서 찾을 수 있는 SQLD 기출문제와 복원문제만 공부했는데 시간이 촉박해서 연습문제를 풀어볼 시간이 없었기 때문이다. 그 대신 내가 공부했던 방법을 공유해 보자면</p>

<ul>
  <li>선지 정리
    <ul>
      <li>이건 너무 중요하다고 생각하는데, 단순히 문제를 많이 푸는 것이 중요하다거나, 아니면 강의를 N회독하면서 개념을 보는것 보단, 어떤 문제가 몇문제씩 나오는지, <strong>그 개념이 선지에서는 어떻게 정리되어서 나오는지가 중요하다.</strong> 기출문제를 풀다 보면 각각의 개념이 어떻게 선지에서 제시되는지 확인할 수 있는데, 기출문제 및 복원기출을 보며 개념을 확실히 정리하는 것이, 단순 개념정리 보단 도움이 되었던 것 같다.</li>
    </ul>
  </li>
  <li>어차피 SQLD를 취득할 정도면 정보처리기사도 준비하거나 이미 있는 경우가 많다고 보는데, 정처기에서 나오는 SQL은 수박 겉핥기 느낌이니 그것보다는 개념을 더 깊이 봐야한다. 앞서 논란이 되었던 SQL 문제들도 [1과목, 데이터 모델링의 이해] 에서 논란이 된 내용이 많았고, ERD 및 prior ~ 계층문제는 무조건 한문제씩은 나오니 어렵다고 해도 꼭 살펴봤으면 좋겠다.</li>
</ul>

<h2 id="공부시간">공부시간</h2>

<p>앞서 말한 방법으로 약 10일동안, 하루에 기출문제 1회 풀고, 선지 및 개념 정리하는 정도로 공부했고 68점으로 합격했다. 턱걸이로 합격해서 부끄럽긴 한데 그래도 합격했으니 마음이 놓인다. 내가 한 공부 방법에서 연습문제(노랭이 책)을 꾸준히 학습했다면(약 1주일 정도)80점에서 86점 정도의 고득점이 무조건 가능하다고 생각한다.</p>]]></content><author><name>ash tensor</name></author><category term="자격증" /><summary type="html"><![CDATA[SQLD]]></summary></entry></feed>