<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-01-04T16:17:07+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Tensor Studio</title><subtitle>텐서 스튜디오</subtitle><author><name>ash tensor</name></author><entry><title type="html">[JAVA] PSVM - public static void main(string[] args)</title><link href="http://localhost:4000/java/2024/01/04/psvm.html" rel="alternate" type="text/html" title="[JAVA] PSVM - public static void main(string[] args)" /><published>2024-01-04T00:00:00+09:00</published><updated>2024-01-04T00:00:00+09:00</updated><id>http://localhost:4000/java/2024/01/04/psvm</id><content type="html" xml:base="http://localhost:4000/java/2024/01/04/psvm.html"><![CDATA[<h1 id="psvm">PSVM</h1>

<p>자바를 즐겨 사용하는 사람도 자바의 코드가 간결함과는 거리가 멀다는 데는 동의할 것이다. 당장 파이썬에서 하는 것처럼 print(“hello world”)를 실행하려고 해도, 아니면 자바를 이어받은 코틀린에서조차</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fun main() {
println("Hello")
}
</code></pre></div></div>

<p>이렇게 간결한데 자바에서는</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Main {
public static void main(String args[]) {
    System.out.println("Hello");
    }
}
</code></pre></div></div>

<p>이런 식으로 작성해야 될 정도고, 저 부분을 수정하면</p>

<p><img src="/img/posts/PSVM.PNG" style="width: 80%" /></p>

<p>이렇게 아예 IDE에서부터 프로그램을 실행할 수 없다고 말해버린다. 이렇듯 자바는 public static final 처럼 문법적으로 꼭 필요한 서식과 문법적 구조가 너무 늘어진다. 그렇다보니 PS에서는 자바를 그다지 사용하지 않는 것 같다. 당연히 느려서 그런 것도 있겠지만, 똑같이 엄청 느린 파이썬을 많이 사용하는 걸 보면 꼭 그런것 만은 아닌 것 같다.</p>

<p>그런데 왜 자바에서는 PSVM string args를 써야하는 걸까?</p>

<h2 id="public">public</h2>

<p>public은 접근 제어자이다. 자바는 프로그램의 시작을 Main 메소드에서 시작한다. 그러므로 어디에서든 접근해야 하기 때문에 public으로 선언하는 것은 당연하다.</p>

<h2 id="static">static</h2>

<p>자바에서 static 키워드는 많은 용도로 사용되는데, 정적 변수(Static Variable)과 정적 메서드(Static Method)가 대표적이다. 그리고 PSVM을 무조건 사용해야 되는 이유도 바로 여기에 있다. 
정적 변수는 클래스가 메모리에 로드 될 때 생성되며 <strong>정적 영역</strong>에 적재된다. 정적 변수는 클래스 이름을 통해 접근할 수 있으며 (ex: Integer.MAX_VALUE) 객체를 생성하지 않아도 된다. 정적 메서드도 똑같은데, 정적 메서드 역시 클래스 이름을 통해 직접 호출할 수 있고, <strong>인스턴스의 변수나 인스턴스의 메서드를 직접 사용하거나 호출할 수 없다.</strong>
오로지 정적 변수나 정적 메서드만 호출할 수 있다. 이 정적 메서드의 가장 대표적인 메서드가 바로 메인 메서드다.</p>

<p>이 때문에 자바의 메인 메서드에는 public static void main(string[] args) 를 적어야 하는데, 자바의 메인 메서드는 객체를 생성하지 않고 실행되어야 하기 때문에 static, 즉 정적 메서드여야 하는 것이다.</p>

<p>우리가 자바를 사용할 때, Main 클래스를 인스턴스해서, 예를 들어서</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Main classMain = new Main(args[]);
classMain.main();
</code></pre></div></div>

<p>이런 식으로 터미널에 작성해서 실행하지는 않으니까.</p>

<p>그리고 인스턴스의 변수나 인스턴스의 메서드를 직접 사용하거나 호출할 수 없는데 내 기억에 가장 깊게 남아있는 예시가 있다. 23년 정보처리기사 3회 자바 문제인데</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// 에러가 나는 라인을 고르시오
class Person(
    private String name;
    public Person(String val) {
        name = val;
    }
    public static String get() {
        return name;
    }
    public void print() {
        System.out.println(name);
    }
)

public class Engineer {
    public static void main(string[] args) {
        Person obj = new Person("Kim");
        obj.print();
    }
}
</code></pre></div></div>

<p>이런 문제였다. 여기서는 7번 라인, <strong>return name</strong> 부분에서 에러가 나는데, 이는 get()이라는 메서드가 static 메서드이기 때문에, 2번 라인에서 선언된 private String name 이라는 인스턴스 변수를 참조할 수 없기 때문에 에러가 나는 것이다.</p>

<p>어디서 에러가 날 지 찾으라는 문제가 나올 거라고는 생각을 하지 못해서 시험장에서 꽤 당황했었던 기억이 난다.</p>]]></content><author><name>ash tensor</name></author><category term="JAVA" /><summary type="html"><![CDATA[PSVM]]></summary></entry><entry><title type="html">[CS] 2의 보수</title><link href="http://localhost:4000/cs/2024/01/02/binary.html" rel="alternate" type="text/html" title="[CS] 2의 보수" /><published>2024-01-02T00:00:00+09:00</published><updated>2024-01-02T00:00:00+09:00</updated><id>http://localhost:4000/cs/2024/01/02/binary</id><content type="html" xml:base="http://localhost:4000/cs/2024/01/02/binary.html"><![CDATA[<h1 id="2의-보수">2의 보수</h1>

<p>논리회로나 컴퓨터 구조 과목에서 2의 보수를 다루지 않고 넘어가는 건 있을 수 없다. 보통 이진수의 음수를 다루는 데 있어서 언급이 되곤 하는데, 비트를 NOT 연산한 후에 + 1 을 하면 얻을 수 있다고 배운다. 2의 보수는 부호가 붙은 정수를 표현하는데 있어서 가장 널리 쓰이는 방법이다.</p>

<h2 id="구하는-법">구하는 법</h2>

<p>앞서 설명한 대로 비트를 NOT 연산한 후에 + 1 을 하면 2의 보수가 된다. 즉</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 1111(2) 의 보수는
 0001(2) 가 된다.
</code></pre></div></div>

<h2 id="보수">보수</h2>

<p>1의 보수와 2의 보수가 대표적으로, 더해서 각 목표가 되는 수를 말하는데, 논리회로에서 음수를 표현하는 방법으로는 부호 절대값과 1의 보수, 2의 보수, 3가지 정도로 나뉜다. 하지만 선술했듯 부호가 붙은 정수를 표현하는데 가장 널리 쓰이는 방법이 바로 2의 보수인데</p>

<ol>
  <li>이는 2의 보수가 1의 보수보다 하나의 수를 더 표시할 수 있고</li>
  <li>회로가 가장 간편해지기 때문이다.</li>
</ol>

<p>2의 보수가 1의 보수보다 하나의 수를 더 표시할 수 있는 이유는 같은 비트를 사용한다고 할 때, 0을 표시하는 방법이 1의 보수는 두 가지 경우이기 때문이다. 예를 들어 보겠다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>num0 =  0000 0000(2) ## 바이트 0
num1 =  1111 1111(2) ## num0의 1의 보수
num2 = 10000 0000(2) ## num1의 2의 보수
</code></pre></div></div>

<p>1의 보수에는 0을 두가지로 표현하게 된다. 그렇기 때문에 1바이트당 1의 보수인 경우에는 -127 ~ +127 까지 표현할 수 있지만, 2의 보수인 경우 -128 ~ 127까지 계산할 수 있다. 1111 1111, 즉 -128이 포함되는 것이다.</p>

<p>하지만 처음 들었을때 고작 한가지 숫자를 더 표현하겠다고(물론 과거의 컴퓨터는 그 하나의 숫자를 더 표현하는 것이 엄청 중요할 정도로 성능이 빡빡했지만) 2의 보수를 사용한다기 보다는 추가적인 이유가 더 중요하다는 생각이 들었다.</p>

<h2 id="회로의-작성-용이성">회로의 작성 용이성</h2>

<p>부호 절댓값 방법은 절댓값이 작은 수에서 큰 수를 뺄 경우에는 순서를 바꿔서 빼야된다는 추가적인 방법이 필요할 뿐만 아니라, 가산기로는 연산할 수 없기 때문에 <strong>뺄셈기</strong>가 추가되어야 한다. 그리고 비트의 낭비가 너무 심하다. 그래서 논리 연산(&gt;, &lt;…)을 할 때 모순이 생기곤 한다.</p>

<p>1의 보수는 그러한 연산을 매우 간편하게 만들어 주는데, 부호와 절댓값을 따로 계산할 필요도 없고 뺄셈기를 사용할 필요 없이 가산기 그대로 사용할 수 있다.</p>

<p>하지만 0000과 1111을 둘 다 0으로 처리해야 하는 회로와, 계산 과정에서 캐리, 즉 올림이 발생했는지를 확인하고 만약 발생했다면 마지막 비트에 1을 추가하는 회로를 구성해야 한다.</p>

<p>예를 들어서</p>

<p>7 - 3 을 하는 간단한 계산을 할 때.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>7(0111)과 -3(1100)의 덧셈에서는 1011이 나오게 되고, 
이는 보수를 취하게 되면 4이므로 맞다. 
이는 캐리가 이루어지지 않았기 때문이다.
하지만 7(0111)과 -1(1110)의 덧셈을 수행하면 
결과값은 **10101(21)이고 
오버플로우가 발생했으므로 1을 더해주는 연산을 해주면 0110(6)이다.
</code></pre></div></div>

<p>하지만 2의 보수에서는 이러한 귀찮은 방법이 필요 없다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>7(0111)과 -3(1101)의 덧셈에서는 10100이 나오게 되고, 
2의 보수에서는 오버플로우가 발생한 부분을 버림으로 4가 되서 정답이다. 
또한 7(0111)과 -1(1111)의 덧셈을 수행하면 
결과값은 10110이고 
최상위 비트 1을 버리면 0110(6)으로 정답이다.
</code></pre></div></div>

<p>이런 간결성 덕분에 2의 보수는 대부분의 컴퓨터 구조에서 음수를 표현하는 방법으로 표현된다.</p>]]></content><author><name>ash tensor</name></author><category term="CS" /><summary type="html"><![CDATA[2의 보수]]></summary></entry><entry><title type="html">[Android Studio]Bottom Navigation Bar 구현 - OnItemSelectedListener 이용</title><link href="http://localhost:4000/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/2023/12/29/bottomNavigationView.html" rel="alternate" type="text/html" title="[Android Studio]Bottom Navigation Bar 구현 - OnItemSelectedListener 이용" /><published>2023-12-29T00:00:00+09:00</published><updated>2023-12-29T00:00:00+09:00</updated><id>http://localhost:4000/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/2023/12/29/bottomNavigationView</id><content type="html" xml:base="http://localhost:4000/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/2023/12/29/bottomNavigationView.html"><![CDATA[<h1 id="bottom-navigation-bar">Bottom Navigation Bar</h1>

<p>어떤 앱이든 Bottom Naviagation Bar가 없는 앱은 상상하기 힘들다. 토스, 에브리타임, 카카오톡은 아닌가? 아무튼, 과장 좀 보태서 거의 모든 앱의 하단 부분에는 이 Bottom Navigation Bar가 존재한다.</p>

<p><img src="/img/posts/android_studio/3.jpeg" style="width: 80%" /></p>

<p>이런거 말이다.</p>

<p>그런데 흔히 온라인에서 돌아다니는 BottomNavigationBar 구현방법 대부분은 사용중지가 될 예정인 setOnNavigationItemSelectedListener와 onNavigationItemSelectedListener를 사용하고 있어서, 사용이 비권장된다. 안드로이드 호환성 때문에 나중에 사용하다가 에러가 뜰 가능성도 높고, Deprecate될 기능을 사용하는 건 당연히 좋지 못하다. 사용중지가 될 기능을 유지보수하고 있는건 웃기기도 하고.</p>

<p>그래서 android 팀이 권장하는 OnItemSelectedListener를 이용해서 BottomNavigationBar룰 구현해보았다.</p>

<h2 id="menuxml">menu.xml</h2>

<p>일단 먼저 menu.xml을 추가해 주어야 한다. 그러기 위해서는 res 디렉토리에 menu라는 android resources directory를 추가해야 하는데</p>

<p><img src="/img/posts/android_studio/menu1.png" style="width: 80%" /></p>

<p>이렇게 추가한 뒤에, 똑같게 File &gt; New &gt; Menu Resources File을 추가하면 된다. 그 뒤에 item을 추가해 준다. item은 BottomNavigationBar의 각 메뉴로 구현된다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    &lt;item
        android:id="@+id/menu_1"
        android:title="MENU1"
            ##android:title은 화면에 표시될 이름이다
            ##나중에 bottomNavigationView와 연결할 때 android:id를 이용해서 연결한다.
        #android:icon="" 에서 icon에 아이콘 파일을 연결해 주면 아이콘이 나오는데 에셋을 만드는 중이라 현재는 추가하지 않았다
        /&gt;
     &lt;item
        android:id="@+id/menu_2"
        android:title="MENU2"
        /&gt;
     &lt;item
        android:id="@+id/menu_3"
        android:title="MENU3"
        /&gt;
    
    
    &gt;
</code></pre></div></div>

<h2 id="activity_mainxml">activity_main.xml</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity"&gt;

    &lt;LinearLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:orientation="vertical"&gt;

        &lt;FrameLayout
            android:layout_width="match_parent"
            android:layout_height="0dp"  ## 레이아웃의 높이를 가중치를 이용하여 조정
            android:layout_weight="1"    ## 부모 레이아웃의 남은 공간을 모두 차지
            android:id="@+id/FragmentContainer" &gt;
            &lt;TextView
                android:id="@+id/testTextView"   ## 프래그먼트가 바뀌었는지 확인용
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="firstView"
                android:gravity="center"
            /&gt;
        &lt;/FrameLayout&gt;

        &lt;com.google.android.material.bottomnavigation.BottomNavigationView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_gravity="bottom"
            android:id="@+id/bottomNavigationView"
            app:menu="@menu/menu" /&gt;    ## 아까 만든 메뉴를 적으면 됨
    &lt;/LinearLayout&gt;

&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;
</code></pre></div></div>

<p>기본적으로 리니어 레이아웃과 프레임 레이아웃을 사용해서 레이아웃을 설정했다. android:layout_height=”0dp”, android:layout_weight=”1”을 이용해서 바텀 네비게이션 뷰를 차지한 공간 이외의 공간을 모두 LinearLayout이 차지하기로 하고, 이 리니어 레이아웃에 이후에 바텀 네비게이션 뷰의 메뉴를 누른 경우에 Fragment가 표시될 예정이다. android:id=”@+id/FragmentContaner id를 이용해서 연결한다!</p>

<h2 id="fragment1-추가">fragment1 추가</h2>

<p><img src="/img/posts/android_studio/fragment2.png" style="width: 80%" /></p>

<p>File &gt; New &gt; New Fragment를 추가해주고, Fragment를 작성한다. 이번에는 일단 BottomNavigationView를 작성하는게 목표기 때문에 따로 수정은 하지 않았다.</p>

<h2 id="mainactivityjava">MainActivity.java</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class MainActivity extends AppCompatActivity  {

    public FragmentManager fragmentManager = getSupportFragmentManager();
    BottomNavigationView bottomNavigationView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        BottomNavigationView bottomNavigationView = findViewById(R.id.bottomNavigationView);
        bottomNavigationView.setOnItemSelectedListener(navListener);

    }

    private NavigationBarView.OnItemSelectedListener navListener = new NavigationBarView.OnItemSelectedListener() {
        @Override
        public boolean onNavigationItemSelected(@NonNull MenuItem item) {
            Fragment selectedFragment = null;

            switch (item.getItemId()) {    ## 누른 해당 메뉴의 id가 menu_1인 경우에
                case R.id.menu_1:
                    selectedFragment = new fragment1();     ## fragment를 할당
                    break;
            }
            TextView testTextView = findViewById(R.id.testTextView);
            ##테스트용 TextView를 숨김
            testTextView.setVisibility(View.GONE);
            getSupportFragmentManager().beginTransaction().replace(R.id.FragmentContainer, selectedFragment).commit();

            return true;
        }
    } ;
}
</code></pre></div></div>

<p>FrameLayout은 레이아웃을 겹쳐서 보여주기 때문에 testTextView와 Fragment1의 TextView가 겹쳐서 보여지게 된다. 그렇기 때문에 항상 Visibility를 바꿔줘야 한다.</p>

<h2 id="실행">실행</h2>

<p><img src="/img/posts/android_studio/2.PNG" style="width: 50%" /></p>

<ul>
  <li>처음 실행 화면</li>
</ul>

<p><img src="/img/posts/android_studio/1.PNG" style="width: 50%" /></p>

<ul>
  <li>menu1을 선택한 화면</li>
</ul>

<p>예상한대로 BottomNavigationView가 제대로 작동하는 모습을 볼 수 있다!</p>]]></content><author><name>ash tensor</name></author><category term="안드로이드" /><summary type="html"><![CDATA[android studio]]></summary></entry><entry><title type="html">[AI 그림]프롬프트의 한계점 - 올바른 프롬프트 작성하기</title><link href="http://localhost:4000/ml/2023/12/28/stable-diffusion.html" rel="alternate" type="text/html" title="[AI 그림]프롬프트의 한계점 - 올바른 프롬프트 작성하기" /><published>2023-12-28T00:00:00+09:00</published><updated>2023-12-28T00:00:00+09:00</updated><id>http://localhost:4000/ml/2023/12/28/stable-diffusion</id><content type="html" xml:base="http://localhost:4000/ml/2023/12/28/stable-diffusion.html"><![CDATA[<h1 id="ai-그림">AI 그림</h1>

<p>솔직히 말해서, 이제 인공지능 그림은 놀라움을 넘어서서 조금은 지루한 소재인 것 같다. 인공지능이 사람의 그림을 뛰어넘는 그림을 그려 내는 것을 이제는 모두가 당연하게 느낀다.</p>

<p>이제는 GPT도 인공지능 그림을 그려주고(gpt 4를 구독했을때), BING도 그림을 그려준다. 뤼튼도 마찬가지다. 이제 인공지능과 그림은 분리할 수 없는 소재가 되어 버렸다.</p>

<p>인공지능 그림을 크게 나누자면 GPT와 bing, NAI 와 같이 SaaS형 AI와 스테이블 디퓨전과 같이 사용자의 PC에서 로컬 PC의 자원을 사용해서 그림을 그려내는 신경망이 존재한다.</p>

<p>개인적으로 모두 사용해 본 결과, 가장 쉽게 그림을 그려낼 수 있는 건 SaaS형 서비스들이다. 예를 들어서 GPT와 같은 경우에 그림이 마음에 안 드는 경우에 그 그림에 덧붙여 추가적으로 그림을 수정해 달라고 요청하기도 쉽고, 채팅으로 요청만 하면 되기 때문에 전문적인 지식이 없는 사람에게는 꽤나 높은 수준의 에셋을 얻을 수 있기 때문이다.</p>

<h2 id="프롬프트">프롬프트</h2>

<ol>
  <li><img src="/img/posts/ai_image/adventure2.PNG" style="width: 80%" /></li>
</ol>

<p>프롬프트 : 모험가 길드의 내부</p>

<ol>
  <li><img src="/img/posts/ai_image/adventurer1.PNG" style="width: 80%" /></li>
</ol>

<p>프롬프트 : 모험가 길드의 내부, 압도적인 현실감, 뛰어난 디테일, 높은 퀄리티</p>

<ol>
  <li><img src="/img/posts/ai_image/adventurer3.PNG" style="width: 80%" /></li>
</ol>

<p>프롬프트 : 모험가 길드의 내부, 압도적인 현실감, 뛰어난 디테일, 높은 퀄리티, masterpiece, best quality</p>

<p>이런 식이다. 1번에서 2번을 넘어갈 때 가장 큰 퀄리티의 차이가 보이고, 2번에서 3번을 넘어갈 때는 그렇게 큰 성능 향상이 일어나지는 않아 보인다. 이런 SaaS형 서비스들에서도 그림을 그릴 때, 퀄리티 프롬프트(추가한 best quality, masterpiece, 뛰어난 디테일과 같은 지시)가 적용되는 것을 확인할 수 있는데, 이는 스테이블 디퓨전과 비슷한 모습이다. 당연하겠지만.</p>

<ol>
  <li><img src="/img/posts/ai_image/3.jpeg" style="width: 80%" /></li>
</ol>

<p>프롬프트 : 모험가 길드의 내부, 압도적인 현실감, 뛰어난 디테일, 높은 퀄리티, masterpiece, best quality, fantasy world</p>

<ol>
  <li><img src="/img/posts/ai_image/4.jpeg" style="width: 80%" /></li>
</ol>

<p>4번 그림은 모험가 길드를 넘어서서 거대한 왕성을 그려냈고, 5번 그림은 원래 주제인 모험가 길드는 오른쪽 구석에 조그마하게 쳐박혀 있는 모습을 볼 수 있다. 둘 다 모두 기존 프롬프트에 fantasy world라는 프롬프트를 추가한 내용이다.</p>

<p>이렇듯 bing Ai에서도 똑같은 주제를 요청한다고 하더라도 다음과 같이 프롬프트에 따라서 영향이 미치는 모습을 확인할 수 있는데, 점점 가면 갈수록 그림이 급격하게 변화하는 것을 확인할 수 있다. 모험가 길드의 내부라는 주제와는 다른 방향으로 이동하고 있는데, 이는 프롬프트의 한계성에서 기인한다.</p>

<h3 id="프롬프트의-한계성">프롬프트의 한계성</h3>

<p>bing ai는 DALLE 3를 사용하고, DALLE-3는 프롬프트를 해석할 때 GPT-3를 이용해서 이미지를 재구성한다. GPT를 이용해 본 사람들은 GPT가 가끔 오타를 내거나 내 지시에 오타가 있더라도 그것과는 상관없이 잘 무시하고 대답하는 걸 볼 수 있었을 텐데, 이는 언어모델이라는 GPT의 한계 때문이다.</p>

<p>따라서 DALL-E 는 culture라는 단어에서, Sculpture라는 단어를 연상하고야 만다…</p>

<ol>
  <li><img src="/img/posts/ai_image/2.jpeg" style="width: 80%" /></li>
</ol>

<p>이런식으로. 위 그림의 프롬프트에는 지금까지의 프롬프트에 더해서 fantasy culture를 추가한 모습이다. masterpiece와 culture가 서로 영향을 끼쳐 멋진 스태츄를 그려준 모습이다.</p>

<p>또한 DALL-E와 Stable diffusion이 완벽히 같다고 할 수는 없지만 open ai가 발표한 여러 논문을 참고해 보면 (https://cdn.openai.com/papers/dall-e-3.pdf) DALLE-3 역시 그림 - 태그 쌍을 통해 프롬프트를 해석한다고 밝혔는데 아마도 이는 Stable diffusion이 Devian art, danbooru와 같은 그림 - 태그 학습이 이뤄진 이미지 사이트들을 바탕으로 학습한 것과 비슷할 것으로 보인다.</p>

<p>따라서 어떤 특정한 단어가 danbooru와 같은 사이트에서 다른 뜻으로 학습이 되어 있거나 한 경우에는 올바르지 않은 결과를 출력하고야 만다. 
예를 들어서, legend 라는 단어는 흔히 쓰이는 보통명사지만 league of legend라는 고유명사의 일부이다. 이런 경우에, GPT와 같은 트랜스포머 신경망은 내가 리그 오브 레전드의 그림을 그려주기를 바라지 않더라도, 리그 오브 레전드의 요소를 섞어서 그려내고야 마는 것이다.</p>

<ol>
  <li><img src="/img/posts/ai_image/4.jpeg" style="width: 80%" /></li>
</ol>

<p>여기에는 5번 그림을 다시 가져왔는데, 보면 확인할 수 있지만 화면 둘레에 마치 액자와 같은 모습을 확인할 수 있을 것이다. 이는 masterpiece라는 프롬프트 때문이다. 명작을 보여달라고 했기 때문에 DALL-E 3는 박물관에 있을 법한 명작을 출력해 준 것이다.</p>

<p>나는 퀄리티 프롬프트라고 생각했던 프롬프트가 어디선가 이런 작용을 하고 있을 수 있다는 것을 항상 염두에 두어야 한다.</p>

<h3 id="환각">환각</h3>

<p><img src="/img/posts/ai_image/elephant.PNG" style="width: 80%" /></p>

<p>위 그림은 신경망에게 차 키를 들고 있지 않은 소년이라고 요청한 내용이다. 하지만 코끼리 효과가 일어난 모양인지 여지없이 차 키를 들고 있다.</p>

<p>이 둘은 GPT가 환각을 보는 원리와도 비슷하다. 뉴스에서 빔샤벨을 든 세종대왕의 멕북 에어 사태를 설명해 줘, 라고 요청했을 때 GPT가 신나서 설명해 주던 것 말이다. 이는 언어 모델의 한계 때문이지만 개인적으로는 꽤나 멋지다고 생각한다.</p>

<p>누가 빔샤벨을 든 세종대왕의 맥북 에어 사태를 그림으로 그릴 수 있겠는가? 안드로이드는 전기 양의 꿈을 꾸는가? 적어도 GPT는 그 꿈을 그릴 수 있는 것 같다.</p>

<p>사실 이 모든 과정이 어쩌면 창의성의 근본일지도 모른다. 고흐도 별이 빛나는 밤에를 그릴 때, 사실은 환각을 보고 있었다고 하니까.</p>]]></content><author><name>ash tensor</name></author><category term="ML" /><summary type="html"><![CDATA[ml, ai]]></summary></entry><entry><title type="html">[데이터 분석]조합에 따른 승률은 얼마나 차이가 날까?</title><link href="http://localhost:4000/ml/2023/12/19/esports-ml-1.html" rel="alternate" type="text/html" title="[데이터 분석]조합에 따른 승률은 얼마나 차이가 날까?" /><published>2023-12-19T00:00:00+09:00</published><updated>2023-12-19T00:00:00+09:00</updated><id>http://localhost:4000/ml/2023/12/19/esports-ml-1</id><content type="html" xml:base="http://localhost:4000/ml/2023/12/19/esports-ml-1.html"><![CDATA[<h1 id="조합에-따른-승률은-얼마나-차이가-날까">조합에 따른 승률은 얼마나 차이가 날까?</h1>

<p>나는 개인적으로 세이버 메트릭스를 매우 좋아한다.</p>

<p>규격화된 스텟과 지표. 물론 그것들이 게임의 모든 것을 설명할 수 있는 것은 아니다. 하지만 피터 드러커가 말한</p>

<ul>
  <li>측정되는 것이 관리되는 것(What gets measured get managed)이다.</li>
</ul>

<p>라는 어구처럼, 측정되는 것이야말로 사람의 손으로 관리되는 것이고, 이는 측정할 수 있어야만 비로소 관리하고 경영할 수 있다는 말이다.</p>

<p>하지만 이스포츠에서는 이러한 어구가 제대로 적용되지 않는다고 느낀다. 그래서 해설자들이 해설을 할 때도 자신의 경험에 비추어서 해설하고 과거의 바둑처럼 기세와 형세와 같은 추상적인 어구로 설명과 해설을 하고자 한다.</p>

<p>이는 어쩔 수 없다고는 생각한다. 하지만 알파고가 등장하면서 바둑도 현재 승률과 AI가 계산한 올바른 수, 그리고 메인라인(main line)등을 통하여 게임의 흐름과 형세를 구체적으로 지금 얼마나 불리한지, 얼마나 유리한지를 설명할 수 있게 되었다.</p>

<p>그럼 이스포츠에서도 그럴 수 있지 않을까?</p>

<h2 id="데이터-준비">데이터 준비</h2>

<p>일단 이를 위해서 RIOT API를 이용했다. RIOT API를 통해 약 3만 건의 챌린저 및 그랜드마스터의 매치를 수집했다. 과정은 다음과 같다.</p>

<p><img src="/img/posts/riot-api.png" style="width: 80%" /></p>

<p>이 둘은 상위 0.001% 게이머들로 활성 게이머 약 300만에 달하는 리그오브레전드 게이머 중 1천위 안에 드는 강자들로, 그 누구보다도 게임을 잘 이해하는 사람들이다.</p>

<p>일단 challengerleagues/by-queue/RANKED_SOLO_5x5 api를 및 grandmasterleaues/by-queue/RANKED_SOLO_5x5 api를 통해 현재 존재하는 챌린저와 그랜드마스터의 명단을 가져온다.</p>

<p>하지만 이는 summoner_id로 되어 있어서, 이를 통해 match data를 가져오려면 puuid를 이용해야 한다. 따라서 summoner/v4/summoners api를 사용해서 puuid를 가져온 다음, match/v5/matches/by-puuid api를 이용해서 각 puuid별 최근 매치 리스트의 인덱스를 가져오고, 최종적으로 매치 인덱스를 통해 매치 내용을 가져오는 식으로 매치 정보를 받아왔다.</p>

<p>순서대로 정리하면 다음과 같다.</p>

<ol>
  <li>challengerleagues/by-queue/RANKED_SOLO_5x5 api를 및 grandmasterleaues/by-queue/RANKED_SOLO_5x5 api를 통해 현재 존재하는 챌린저와 그랜드마스터의 명단을 가져오기</li>
  <li>summoner/v4/summoners api를 사용해서 summoner_id별로 puuid 가져오기</li>
  <li>match/v5/matches/by-puuid api를 이용해서 각 puuid별 최근 매치 리스트의 인덱스 가져오기</li>
  <li>매치 인덱스를 통해 매치 내용을 가져오는 식으로 매치 정보를 받아오기.</li>
</ol>

<p>이를 통해 수집한 데이터는 약 2만 1천건에 달한다. 이는 신경망을 훈련시키기에는 충분한 수치다.</p>

<h2 id="신경망-구성">신경망 구성</h2>

<p>케라스를 이용해서 신경망을 구성했다. 최종적으로 구성한 신경망은 다음과 같은데</p>

<p><img src="/img/posts/automodel.png" style="width: 40%" /></p>

<p>각 팀별 5명이고, 팀 1, 팀 2로 구성된 (2, 5)의 챔피언 배열이 들어가기 때문에 (2, 5)의 inputLayer가 구성되었다. 간단하게 시도해 볼 학습이라 autokeras를 이용해 간단하게 신경망을 구성했다.</p>

<p>이를 통해 max_trial = 20, epochs = 15로 학습시켜봤는데, 결과는 다음과 같이 나왔다.</p>

<p><img src="/img/posts/m2.png" style="width: 80%" /></p>

<p><img src="/img/posts/m3.png" style="width: 80%" /></p>

<p>정확도는 약 60%로 높아지고 있긴 했지만, 여기서 더 에포크를 늘린다고 하더라도 검증 정확도나 val loss는 줄어들지 않는 모습을 보였기 때문에, 여기서 학습을 마쳤다.</p>

<p>평가해 봤을때 val accuracy는 약 0.53으로 눈 감고 찍는 것보다 약 3% 승률이 높다고 할 수 있었다.</p>

<h2 id="높다면-높은-수치인가">높다면 높은 수치인가?</h2>

<p>이는 해석하기 나름이겠지만 과감하게 해석해 보자면, 조합이 숭률에 약 3% 정도 영향을 미친다고 할 수 있겠다. 물론 포스팅을 마친 이후에 데이터를 더 확인해 볼 예정이지만 이는 매우 과감한 추측인데 그 이유로는 신경망이 특정 조건(특정 조합과 특정 챔피언)만 찾아낼 수 있었을 수도 있기 때문에 SHAP 등의 도구를 이용해서 어떤 경우에 맞췄는지 확인해 봐야 할 것이다.</p>

<p>아무튼 이를 제쳐놓고라도, 53%라는 것은 아주 높은 수치라고 할 수 있다고 생각한다.</p>

<p>진행된 내 다른 연구에 의하면(나중에 정리해서 올리긴 할 거지만), 팀별로 처치한 용이 1마리 차이나면 승률이 약 2.2% 차이가 난다. 3%라면 즉 약 용 1.5개 만큼 차이난다는 의미인데…</p>

<p><img src="/img/posts/m4.png" style="width: 80%" /></p>

<p>엄청 크지 않나?</p>

<p>단순히 게임을 진행하기도 전에 진행된 게임의 조합 만으로도 용 1.5개 분만큼 승률이 차이난다는 의미인데 조합이 게임에 엄청나게 큰 영향을 미친다고 보는게 맞는 것 같다.</p>

<p>다음에는 챌린저 경기가 아닌 흔히 말하는 심해 경기, 골드, 플래티넘 구간의 경기를 검토해 봐야겠다.</p>

<p>의문점 및 조언이 있다면 언제나 환영한다!</p>]]></content><author><name>ash tensor</name></author><category term="ML" /><summary type="html"><![CDATA[ml, ai]]></summary></entry><entry><title type="html">[깃허브 블로그]지킬 블로그 카테고리 / NAVBAR 기능 추가(clean blog theme) - 1</title><link href="http://localhost:4000/%EA%B9%83%ED%97%88%EB%B8%8C/2023/12/15/jekyll-blog-theme-4.html" rel="alternate" type="text/html" title="[깃허브 블로그]지킬 블로그 카테고리 / NAVBAR 기능 추가(clean blog theme) - 1" /><published>2023-12-15T00:00:00+09:00</published><updated>2023-12-15T00:00:00+09:00</updated><id>http://localhost:4000/%EA%B9%83%ED%97%88%EB%B8%8C/2023/12/15/jekyll-blog-theme-4</id><content type="html" xml:base="http://localhost:4000/%EA%B9%83%ED%97%88%EB%B8%8C/2023/12/15/jekyll-blog-theme-4.html"><![CDATA[<h1 id="깃허브-블로그-카테고리-기능-추가clean-blog-theme">깃허브 블로그 카테고리 기능 추가(clean blog theme)</h1>

<p>네이버 블로그나 티스토리 블로그를 확인해 보면 당연히 카테고리 섹션이 있다. 이것도 역시, 댓글창처럼 당연하다면 당연하다고 생각한다. 그럴게, 블로그나 인터넷에서 글을 볼 때, 검색해서 들어가게 되면 그 주제의 글을 계속 봐야 할 때가 생긴다. 웹툰도, 만화도 1화만 보고 그 다음 화를 보지 못하면 답답하잖아?</p>

<p><img src="/img/posts/category/01.png" style="width: 75%" /></p>

<p>위에 볼 수 있는 것처럼 Clean blog theme에는 전체 post를 볼 수 있는 기능은 있지만 카테고리 기능이 없어서 불편하다고 생각했다.</p>

<p>필요하다면 만든다. 만드는데 조금 시간이 걸렸다.</p>

<h2 id="카테고리-레이아웃">카테고리 레이아웃</h2>

<p><img src="/img/posts/category/02.png" style="width: 75%" /></p>

<p>일단 내가 구현한 방법으로는, 위 사진처럼 전체 카테고리를 나열하는 전체 카테고리와</p>

<p><img src="/img/posts/category/03.png" style="width: 75%" /></p>

<p>그리고 그 세부 카테고리의 모든 글을 표시해주는 페이지를 만드는 방법으로 구현한 뒤에, 이 페이지에 존재하는 것처럼 navigation bar에 카테고리를 추가하는 것이다.</p>

<p>첫번째로 카테고리 레이아웃을 생성해야 한다. _layouts 디렉토리에 category.markdown 파일을 생성한다. 그리고</p>

<p><img src="/img/posts/category/04.png" style="width: 75%" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: page
---
&lt;ul class="posts-list"&gt;

{% assign category = page.category | default: page.title %}
{% for post in site.categories[category] %}
    &lt;li&gt;
    &lt;h3&gt;
        &lt;a href="{{ site.baseurl }}{{ post.url }}"&gt;
        {{ post.title }}   
        &lt;/a&gt;
        &lt;small&gt;{{ post.date | date_to_string }}&lt;/small&gt;
    &lt;/h3&gt;
    &lt;/li&gt;
{% endfor %}

&lt;/ul&gt;
</code></pre></div></div>

<p>위 코드를 복사, 붙여넣기 한다.</p>

<p>위 코드는 이미 존재하는 페이지 레이아웃을 사용하면서, 모든 페이지를 순회하며 YAML 프론트매터의 categories 부분을 이용하여 카테고리 링크를 생성하는 코드다.</p>

<p>그리고 _layouts 디렉토리의 post.markdown을 수정한다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;!-- 카테고리를 추가하는 코드 --&gt;

        &lt;div&gt;
            {% for category in page.categories %}
            &lt;a href="{{ site.url }}/category/{{ category }}.html" style="color: white;"&gt;카테고리📁: {{ category }}&lt;/a&gt;
            {% endfor %}
        &lt;/div&gt;

&lt;!-- 카테고리를 추가하는 코드 --&gt;
</code></pre></div></div>

<p>위 코드를 붙여 넣으면 되는데, 이는 YAML 프론트매터를 이용해서 현재 페이지의 category를 이용해서 해당하는 링크를 만들어주는 코드다.</p>

<p><img src="/img/posts/category/05.png" style="width: 75%" /></p>

<p>나는 위 사진처럼 제목 부분 헤더 컨테이너 안에 하나, 그리고 본문 제목 위에 하나, 이렇게 삽입하고 싶기 때문에 두 번 삽입했다. 자신이 삽입하기 윈하는 위치에 삽입하면 된다.</p>

<p>만약 위 사진처럼 삽입하고 싶다면</p>

<p><img src="/img/posts/category/06.png" style="width: 75%" /></p>

<p>여기에 한 번</p>

<p><img src="/img/posts/category/07.png" style="width: 75%" /></p>

<p>여기에 한 번 복사해 넣으면 된다.</p>

<h2 id="카테고리-페이지-추가">카테고리 페이지 추가</h2>

<p>이게 끝이 아니다. 지킬 페이지는 개별 카테고리의 페이지를 직접 생성해 줘야 한다.</p>

<p><img src="/img/posts/category/03.png" style="width: 75%" /></p>

<p>바로 이 페이지를 만드는 과정이다. 만약 웹 페이지의 카테고리를 추가하기 위해서는 앞으로도 이 과정을 계속 수행해 줘야 한다! 그렇지 않으면 당연히 오류가 난다. 예를 들어서 당신이 지금은 C 카테고리만 있지만, java 카테고리를 만들고 싶으면 java 페이지를 추가해야 하는 것이다.</p>

<p>귀찮다. 하지만 어쩔 수 없다.</p>

<p>일단 루트 디렉토리에 category라는 디렉토리를 생성해야 한다. 어떤 방법으로 생성해도 상관없다.</p>

<p>그리고 난 뒤, 자신의 원하는 카테고리 이름으로 markdown 파일을 생성한다. 예를 들어서 이 페이지의 카테고리인 깃허브 카테고리를 만드려면</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>깃허브.markdown 
이런 식으로 이름을 생성하면 된다.
</code></pre></div></div>

<p>그리고 난 뒤 그 파일에 코드를 작성해 줄 텐데</p>

<p><img src="/img/posts/category/08.png" style="width: 75%" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: category
title: 자격증
description: 자격증 📁카테고리의 모든 글.
background: '/img/bg-category.jpg'
---
</code></pre></div></div>

<p>이런 식으로 코드를 작성해 주면 된다. layout은 category를 사용하지만(방금 전 작성한) category layout은 page 레이아웃을 상속받아 사용하기 때문에 descripion 및 background 프론트매터를 사용 가능하다!</p>

<p>descripion은 카테고리 페이지의 설명에 사용되니 자기가 원하는대로 사용하면 된다.</p>

<p>이러면 카테고리 페이지는 완성했다!</p>

<p>사실 한번에 쓰고자 했었는데, 쓰다 보니까 내용이 너무 길어져서 전체 카테고리 포스트 생성과 navigation bar를 생성하는 법은 다음 포스트에 작성하도록 하겠다.</p>]]></content><author><name>ash tensor</name></author><category term="깃허브" /><summary type="html"><![CDATA[troubleshooting]]></summary></entry><entry><title type="html">[깃허브 블로그]지킬 블로그 코멘트 기능 추가(clean blog theme)</title><link href="http://localhost:4000/%EA%B9%83%ED%97%88%EB%B8%8C/2023/12/14/jekyll-blog-theme-3.html" rel="alternate" type="text/html" title="[깃허브 블로그]지킬 블로그 코멘트 기능 추가(clean blog theme)" /><published>2023-12-14T00:00:00+09:00</published><updated>2023-12-14T00:00:00+09:00</updated><id>http://localhost:4000/%EA%B9%83%ED%97%88%EB%B8%8C/2023/12/14/jekyll-blog-theme-3</id><content type="html" xml:base="http://localhost:4000/%EA%B9%83%ED%97%88%EB%B8%8C/2023/12/14/jekyll-blog-theme-3.html"><![CDATA[<h1 id="깃허브-블로그-코멘트-기능-추가clean-blog-theme">깃허브 블로그 코멘트 기능 추가(clean blog theme)</h1>

<p>블로그에는 기본적으로 댓글 란은 무조건 있어야 한다고 생각한다. 추가하는게 어렵지 않다. 터미널을 두드릴 필요도 없다. 오히려 카테고리 란을 추가하는게 조금 더 어려운 것 같다. 그러면 한번 추가해 보자고!</p>

<h2 id="disqus">DISQUS</h2>

<p>깃허브 페이지를 사용하는 데 있어서 가장 많이 사용하는 덧글/코멘트 기능이라고 하면 DISQUS다. STACK OVERFLOW나 다른 곳에서도 가장 먼저 추천하는 기능이다. 게다가 무료다! 사용하지 않을 이유가 없다.</p>

<p><img src="/img/posts/clean-blog-setup/09.png" style="width: 75%" /></p>

<p>지금 이 포스트 아래에도 붙어있는 댓글란인데, 많은 깃허브 페이지들을 보다 보면 대부분의 댓글이 이렇게 생긴 것을 확인할 수 있을 것이다.</p>

<p><a href="https://disqus.com/profile/signup/intent/">일단 여기</a>서 회원가입을 해 주면 된다.</p>

<p><img src="/img/posts/clean-blog-setup/10.png" style="width: 75%" /></p>

<p>회원가입을 하고 나면 이런 창이 보일 텐데, I want to install Disqus on my site를 눌러 주면 된다. 그리고 사이트 이름을 정해주고 난 뒤, 요금이 들지 않는 BASIC 요금제를 선택해 주고 select platform에서 jekyll을 선택해 주면 된다.</p>

<p><img src="/img/posts/clean-blog-setup/12.png" style="width: 75%" /></p>

<p>그리고 나면</p>

<p><img src="/img/posts/clean-blog-setup/13.png" style="width: 75%" /></p>

<p>위 사진에서도 나와있듯이 Universial Embed code 링크를 클릭해서 들어간 뒤</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div id="disqus_thread"&gt;&lt;/div&gt;
&lt;script&gt;
    /**
    *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM
    *  ...
    *  ...
    *  생략함
</code></pre></div></div>

<p>위 꼴의 universial embed code를 복사한다. 그리고 난 뒤 자신의 지킬 블로그가 설치되어 있는 로컬 폴더로 들어간다.</p>

<p>그리고 난 뒤, _layout 디렉토리의 post.markdown 파일로 들어간 뒤</p>

<p><img src="/img/posts/clean-blog-setup/15.png" style="width: 75%" /></p>

<p>이 부분에 아까 복사한 자신의 코드를 붙여넣기 하면 된다! 이제 다 끝났다!</p>

<h2 id="yaml-프론트매터">YAML 프론트매터</h2>

<p>위 코드는 자신의 disqus 댓글창을 생성하는 코드로, 당연하겠지만 항상 코멘트 섹션을 생성한다. 만약 그게 싫고, 포스트별로 댓글 창을 설정하고 싶은 경우에는 추가적으로 코드를 적어 넣어야 한다.</p>

<p><img src="/img/posts/clean-blog-setup/14.png" style="width: 75%" /></p>

<p>이 포스트의 프론트매터인데, 댓글을 달고싶은 포스트의 프론트매터에 위 사진처럼</p>

<p>속성을 넣어주면 된다. 그러면 지킬이 페이지를 구성할 때, disquss를 참조해서 포스트를 구성하게 된다. 그리고 난 뒤, 아까 수정했던 post.markdown에 들어가서 아까 작성했던 코드 스니펫의 앞 뒤에 if page.comments 와 endif 블록을 작성해 넣으면 된다.</p>

<p><img src="/img/posts/clean-blog-setup/16.png" style="width: 75%" />
<img src="/img/posts/clean-blog-setup/17.png" style="width: 75%" /></p>

<p>이런식으로!</p>

<p>충분히 이해 가능하겠지만, 이는 페이지의 yaml 프론트메터의 comments 부분이 참이면 아래의 코드 스니펫을 실행하라는 의미이다.</p>]]></content><author><name>ash tensor</name></author><category term="깃허브" /><summary type="html"><![CDATA[troubleshooting]]></summary></entry><entry><title type="html">[깃허브 블로그]지킬 블로그 테마 설치 및 오류 수정(clean blog theme)</title><link href="http://localhost:4000/%EA%B9%83%ED%97%88%EB%B8%8C/2023/12/13/jekyll-blog-theme-2.html" rel="alternate" type="text/html" title="[깃허브 블로그]지킬 블로그 테마 설치 및 오류 수정(clean blog theme)" /><published>2023-12-13T00:00:00+09:00</published><updated>2023-12-13T00:00:00+09:00</updated><id>http://localhost:4000/%EA%B9%83%ED%97%88%EB%B8%8C/2023/12/13/jekyll-blog-theme-2</id><content type="html" xml:base="http://localhost:4000/%EA%B9%83%ED%97%88%EB%B8%8C/2023/12/13/jekyll-blog-theme-2.html"><![CDATA[<h1 id="깃허브-블로그-지킬-테마-설지법clean-blog-theme">깃허브 블로그 지킬 테마 설지법(clean blog theme)</h1>

<p>루비 및 gem, bundle은 이미 설치되어 있다고 가정한다. 만약 설치되어 있지 않다면</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem install jekyll bundler
</code></pre></div></div>

<p>를 터미널에서 실행해 주면 된다. macOs에는 이미 기본적으로 루비가 설치되어 있기 때문에 루비를 따로 설치할 필요는 없다. 혹시라도 윈도우인 경우에는 루비 공식 홈페이지에서 루비를 설치한 뒤, 번들러와 지킬을 설치해 주면 된다.</p>

<p>설치 방법은 두 가지가 있다.</p>

<p><a href="https://github.com/StartBootstrap/startbootstrap-clean-blog-jekyll">Clean Blog 깃허브 주소</a></p>

<p>저 깃허브 레포지토리의 readme.md의 방법대로 실행하는 법과, 깃허브 레포지토리를 클론해서 사용하는 방법 두 가지가 존재한다.</p>

<p><img src="/img/posts/clean-blog-setup/01.png" style="width: 75%" /></p>

<p>위 방법이 readme.md 방법대로 실행하는 방법인데, 위 방법은 순수한 테마를 다운받는 방법으로, 기본적인 설정이나 최초 이미지 같은 설정이 아무것도 되어 있지 않은 테마를 다운받는 방법이다. 
깔끔해서 나쁘지는 않지만, 결국 기초 뼈대가 되는 레이아웃 마크다운 파일을 직접 만들어 줘야 되고 커스터마이징 해줘야 되는건 똑같기 때문에 그냥 깃허브 레포지토리를 클론해서 사용하는 것을 추천한다. 그렇기에 여기서도 레포지토리를 클론해서 사용하는 방법으로 설명할 것이다.</p>

<h2 id="설치-방법">설치 방법</h2>

<ol>
  <li>
    <p>깃허브 페이지를 이용해 지킬 블로그를 배포할 정도라면 적어도 최소한 컴퓨터에 친숙한 사람이라고 생각은 하지만 설명하자면</p>

    <p><img src="/img/posts/clean-blog-setup/02.png" style="width: 75%" /></p>

    <p>여기서 New 버튼을 눌러서 새로운 깃허브 레포지토리를 만들고 위 사진처럼 자신의 깃허브 이름과 동일하도록 레포지토리를 만들면 된다.</p>
  </li>
</ol>

<h3 id="깃허브-이름과-레포지토리-이름을-동일하게-만들어야-하는-이유">깃허브 이름과 레포지토리 이름을 동일하게 만들어야 하는 이유</h3>

<p>왜 깃허브 이름과 동일하도록 레포지토리를 만들어야 되냐고 물어볼 수도 있다. 여기에는 이유가 있는데 만약 자신의 이름과 다르게 레포지토리를 만들게 되면 설정이 조금 귀찮게 된다.</p>

<p>예를 들어서 레포지토리의 이름을 [tensor-studio] 라고 설정한다면</p>

<ul>
  <li>“tensor-studio.github.io”</li>
</ul>

<p>인터넷 상에 올라갈 주소가 이런 식으로 만들어 지는 것이 아니라</p>

<ul>
  <li>“Ash-tensor/tensor-studio.github.io”</li>
</ul>

<p>이런식으로 구성되게 된다. 이렇게 되면 문제가 생기는데 지킬 테마는 기본적으로 깃허브 이름과 레포지토리 이름이 동일할 것이라고 생각하고 제작된 경우가 있다. 그런 경우에는 당연하게도 오류가 생기게 되는데 pamalink와 baseurl등을 추가적으로 _config.yml에서 설정해 줘야 할 필요가 있다. 이런 경우에는 css 스타일이 다 날라가 버리거나, 테마의 기능이 제대로 기능하지 않는 경우가 있다. 그런 설정을 추가적으로 하고 싶지 않다면, 그냥 레포지토리의 이름과 깃허브 이름을 동일하게 만들어 주는 편이 낫다.</p>

<p><img src="/img/posts/clean-blog-setup/03.png" style="width: 75%" /></p>

<ol>
  <li>설정을 Public으로 구성해 주고, 터미널로 들어가서 로컬에서 설치하고 싶은 위치에 당신의 레포지토리를 git clone 해준 뒤,
<a href="https://github.com/StartBootstrap/startbootstrap-clean-blog-jekyll">여기서 Clean Blog를 git clone 하면 된다.</a> 혹시라도 처음인 사람을 위해 쓰자면</li>
</ol>

<p><img src="/img/posts/clean-blog-setup/04.png" style="width: 75%" /></p>

<p>여기에서 download.zip을 하거나, 원하는 위치에</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone "https://github.com/StartBootstrap/startbootstrap-clean-blog-jekyll.git"
</code></pre></div></div>

<p>이렇게 클론하면 된다.</p>

<p>clean-blog-setup에 있는 모든 파일을 복사한 뒤, 아까 만든 자신의 레포지토리에 복사해 넣고, 중복되는 파일은 ‘대치’를 선택한다.</p>

<ol>
  <li>
    <p>터미널에</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> bundle install
 bundle exec jekyll serve
</code></pre></div>    </div>
  </li>
</ol>

<p>를 입력해 주면 지킬이 번들러를 통해 페이지를 빌드하기 시작한다(당연히 터미널의 위치는 당신의 레포지토리 위치여야 한다). 그 뒤, 자신의 github 레포지토리로 푸쉬하면 된다.</p>

<h2 id="_configyml-및-깃허브-deploy-오류-해결">_config.yml 및 깃허브 deploy 오류 해결</h2>

<ol>
  <li>_config.yml 수정</li>
</ol>

<p><img src="/img/posts/clean-blog-setup/06.png" style="width: 75%" /></p>

<p>_config.yml 파일을 자신에게 맞게 올바르게 수정하고(title, email, username 등) url을 자신 깃허브 주소에 맞게 수정한다. 예를들어서</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>url: https://Ash-tensor.github.io
https://자신 깃허브 아이디.github.io 포맷이다.
</code></pre></div></div>

<p>이런 식으로 수정하면 된다. https:// 부분을 빼놓고 작성하면 나중에 google search consol에 sitemap이 제대로 등록되지 않는 문제가 생긴다. 그러니 https:// 부분을 꼭 작성해 주도록 하자!</p>

<p>그리고 위 사진처럼 baseurl을</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>baseurl: ""
</code></pre></div></div>

<p>이런식으로 지워주면 된다. 앞서 설명했듯, baseurl은 레포지토리의 이름을 다른 이름으로 설정했을때 필요한 설정이기 때문에 지워야 한다. 그리고</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sass:
sass_dir: _sass
style: compressed
</code></pre></div></div>

<p>부분을 추가해 주면 된다. 이 부분은 만약 bundle exec jekyll serve를 실행했을때 아무런 상관이 없거나, github page 상에서 아무 문제 없이 deploy되면 추가할 필요는 없다. 하지만 내 경우에는</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Your SCSS file assets/main.scss has an error on line 2: File to import not found or unreadable
</code></pre></div></div>

<p>에러가 생겼기 때문에 추가했다.
만약 구글 애널리틱스를 사용하지 않는다면 주석 처리해놔도 상관 없다.</p>

<ol>
  <li>webrick 문제</li>
</ol>

<p>bundle exec jekyll serve를 터미널에서 실행했을 때,
webrick 관련 오류가  설치되지 않았다는 오류가 뜨는 경우가 있다. 이런 경우에는 자신의 .gemfile을 열어서</p>

<p><img src="/img/posts/clean-blog-setup/07.png" style="width: 75%" /></p>

<p>이런식으로,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem "webrick"
</code></pre></div></div>

<p>을 추가해 준 뒤</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle install
buncle exec jekyll serve
</code></pre></div></div>

<p>를 터미널에서 실행하면 된다.</p>

<ol>
  <li>Your SCSS file assets/main.scss has an error on line 2: File to import not found or unreadable 문제</li>
</ol>

<p>이 경우에는 로컬에서는 문제 없이 빌드되는데, 깃허브 상에서 올바르게 deploy 되지 않는 문제였다. 위 경우에는</p>

<p><a href="https://github.com/StartBootstrap/startbootstrap-clean-blog-jekyll/issues/219">위 링크</a>를 많이 참고했는데, 해결 방법으로는</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sass:
sass_dir: _sass
style: compressed
</code></pre></div></div>

<p>를 _config.yml 파일에 추가하고 .gitignore 파일에서 vendor와 vendor/bundle을 삭제하면 정상적으로 깃허브 상에서 빌드된다!!</p>

<p>수정하는 방법으로는 터미널에서</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano .gitignore
</code></pre></div></div>

<p>를 한 뒤에, vendor, vendor/bundle을 삭제하고, contrl + x를 누른 뒤 저장하거나, 숨긴파일을 모두 보도록 설정한 뒤, .gitignore 파일을 직접 수정해도 된다.</p>

<p><img src="/img/posts/clean-blog-setup/08.png" style="width: 75%" /></p>

<p>이런식으로!</p>

<ol>
  <li>혹시라도 index.md, index.html, 또는 home.md, about.md, 404.html, 404.md등이 이미 존재한다는 오류</li>
</ol>

<p>이는</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jekyll new 
</code></pre></div></div>

<p>등으로 이미 디렉터리에 지킬 파일을 만들어 놓은 경우나, 다른 테마를 설치하거나 한 뒤 남아있는 파일이 중복되는 경우에 발생한다. index.md, index.html 등은 jekyll에서 같은 파일로 보기 때문에 빌드함에 있어서 충돌이 나는 경우다.</p>

<p>이런 경우에는 간단하게, 자신이 사용하고 싶은 페이지를 선택하고 다른 파일을 삭제하면 된다.(jekyll은 html이나 md 모두 빌드할 수 있다)</p>

<h2 id="마치면서">마치면서</h2>

<p>깃허브 및 기본적인 지식은 알 것이라고 생각하고 넘어간 부분이 있었는데, 그리고 내가 이미 빌드해 놨기 때문에 처움부터 모든 오류를 서술할 수는 없었지만, 대부분은 gpt가 해결할 수 있거나, 사소한 오류인 경우가 많기 때문에 따로 적지는 않았다.</p>

<p>Your SCSS file assets/main.scss has an error on line 2: File to import not found or unreadable 문제가 가장 귀찮았는데 혹시라도 문제가 있다면 위 방법으로 해결할 수 있었으면 한다.</p>

<p>끝!</p>]]></content><author><name>ash tensor</name></author><category term="깃허브" /><summary type="html"><![CDATA[troubleshooting]]></summary></entry><entry><title type="html">[깃허브 블로그]지킬 블로그 테마 적용법(clean blog theme)-테마 추천 및 고르는 법</title><link href="http://localhost:4000/%EA%B9%83%ED%97%88%EB%B8%8C/2023/12/11/jekyll-blog-theme-1.html" rel="alternate" type="text/html" title="[깃허브 블로그]지킬 블로그 테마 적용법(clean blog theme)-테마 추천 및 고르는 법" /><published>2023-12-11T00:00:00+09:00</published><updated>2023-12-11T00:00:00+09:00</updated><id>http://localhost:4000/%EA%B9%83%ED%97%88%EB%B8%8C/2023/12/11/jekyll-blog-theme-1</id><content type="html" xml:base="http://localhost:4000/%EA%B9%83%ED%97%88%EB%B8%8C/2023/12/11/jekyll-blog-theme-1.html"><![CDATA[<h1 id="깃허브-블로그-지킬-테마-적용법clean-blog-theme">깃허브 블로그 지킬 테마 적용법(clean blog theme)</h1>

<p>깃허브 블로그를 만드는 다양한 방법이 있고, 구글에 한국어로 검색해 봐도 지킬 블로그를 구성하는 기본적인 방법들이 넘쳐난다.
하지만 그렇다고 하더라도, 지킬 블로그는 처음 시도하는 사람에게는 불친절하기 짝이 없다. 아무래도 한국어로는 대표적인 테마 몇 개 정도의 구성 방법만이 존재할 뿐이고, 설명도 조금 이상한 경우가 많았기 때문에…</p>

<p>이 clean blog theme 같은 경우에도 포스트를 깃허브 상에 올릴 때 있어서 계속 오류가 발생하기도 했다. 
그리고 테마별로 지정해야 하는 설정도 다르기 때문에 처음 시도하는 사람이라면 꽤나 많은 시행착오를 거쳐야 할 것이다. 내 경험이지만, 이 지킬을 구성하는 liquid 라는 언어는 띄어쓰기 단 하나 가지고도 빌드를 포기해버리기 때문에 눈쌀을 찌푸렸던 기억이 난다. 어셈블리어도 이 정도는 아니었는데ㅋㅋ</p>

<p>아무튼 이 지킬 블로그를 구성하고, 트러블 슈팅을 하면서 겪었던 에러등을 해결했던 방법을 공유하고자 이 포스트를 쓴다!</p>

<h2 id="테마-고르는-법">테마 고르는 법</h2>

<p>깃허브 페이지를 이용해 지킬 블로그를 배포할 정도라면 적어도 최소한 컴퓨터에 친숙한 사람이라고 생각은 하지만… 지킬 블로그를 만들며 가장 중요한 것은 테마 선정이라고 생각한다…! 이건 몇 번을 강조해도 중요함이 지나치지 않다! 내가 몇 번의 시도를 하면서 깨달았던 몇가지 사항을 먼저 정리하지면…</p>

<ol>
  <li><strong>테마는 무조건 유명한 걸로!</strong></li>
  <li><strong>최대한 최근 제작된 테마일수록 좋다.</strong></li>
  <li><strong>자신이 블로그에 필요한 기능이 뭐가 있을지 생각해 볼 것</strong></li>
</ol>

<p>이렇게 정리해 볼 수 있을 것 같다! 이유로는 몇가지가 있는데</p>

<p>오래된 테마일수록 현재 지킬 표준과 맞지 않는 경우가 많다. 그냥 많은 게 아니라 아주 많았다… 기본적으로 상위권의 테마를 사용한다고 하더라도 수정해야 하는 경우가 많은데 업데이트가 멈춘지 수 년된 테마라면 제대로 작동하기는 어려울 것이다.</p>

<p><a href="https://jekyllthemes.io/jekyll-blog-themes">지킬 테마 사이트</a></p>

<p>보통, 기본적으로 이 페이지에서 지킬 테마를 검색해 보고, 어떤 테마를 사용할지 정하는 경우가 많을 텐데(적어도 내 경우에는 그랬다!) 테마가 오래되거나, 테마가 인기가 없는 경우에는 단지 테마를 적용하는 것만 신경쓰면 되는 것이 아니라,</p>

<ol>
  <li><strong>로컬에서 아예 빌드가 되지 않거나,</strong></li>
  <li><strong>어찌저찌 에러를 다 정리하고 로컬에서 빌드를 성공했다고 하더라도 github page 상에서 빌드가 되지 않거나(!!)</strong></li>
  <li><strong>어찌저찌 github page 상에서 빌드가 되었다고 하더라도 적용되어 있는 css 스타일이 제대로 적용되지 않아 css가 전부 날라간</strong></li>
</ol>

<p>&lt;!DOCTYPE html&gt;
    &lt;html&gt;
      &lt;head&gt;
          <meta charset="utf-8" />
      &lt;/head&gt;
      &lt;body&gt;
          Hello, world!
    &lt;/body&gt;
  &lt;/html&gt;</p>

<p>이런 식의 페이지만 확인할 수 있거나(!!) 하는 경우가 많았기 때문이다.</p>

<p>단순히 오류만 수정해야 하는 것이 아니라 완전히 구닥다리 원시 코드라서 처음부터 다 수정해야 되는 경우라면 골치가 아플 것이다. 이런 경우에는 GPT도 정신을 못차리니 열심히 구글링 하면서 오류를 수정해야 한다. 아니면 테마를 바꾸거나.</p>

<p>내 경우가 딱 이랬는데, 물론 선술했듯 깃허브 페이지에 관심을 가질 정도라면 최소한 컴퓨터와 거리가 멀지는 않을 테니까, 코드를 고쳐보면서 이것 저것 시도하면서 에러를 고치는 경우도 많겠지만, 이런 경우에 테마가 유명하지 않으면 영어로 검색한다고 하더라도 제대로 결과가 나오지 않아서, 결국 테마를 변경했던 경험이 있다.</p>

<p>그리고 만약 커스터마이징을 할 때도, 유명한 테마일수록 해당 기능을 작성하는데 훨신 수월하다. 이미 빌드되서 배포되고 있는 페이지들을 깃허브 레포지토리에서 참고하면서 빌드하기도 간편하다(보통 MIT 라이센스로 배포되기 때문에 사용해도 문제 없다)</p>

<p>대표적으로 한국에서 많이 사용하는 테마로는
<a href="https://github.com/mmistakes/minimal-mistakes" title="미니멀 미스테이크 깃허브 주소">minimal-mistake</a> 와 <a href="https://github.com/poole/lanyon" title="lanyon 깃허브 주소">lanyon</a>, <a href="https://github.com/bencentra/centrarium">centarium</a>을 사용하는 걸 많이 확인했다.</p>

<p><img src="/img/minimal.png" style="width: 50%" /></p>

<p>개인적으로는 minimal mistake를 추천하는데 그 이유는 참고할만한 한국 깃허브 레포지토리가 많기 때문에 추가적인 기능을 제작하기 매우 수월할 것으로 보이기 때문이다. 게다가 기본적인 기능은 이미 다 들어가 있다! 네비게이션 바 부터, 드롭다운 메뉴, 사이드바까지. 기능이 많은건 언제나 좋다.</p>

<p>왜냐하면 생각보다 기능 추가하는 건 귀찮다… 티스토리나 네이버 블로그가 기본적으로 제공하는 카테고리 기능 같은 것도 하나 추가하려면 몇시간은 기본이다.</p>

<h2 id="clean-blog-theme">Clean Blog theme</h2>

<p><a href="https://github.com/StartBootstrap/startbootstrap-clean-blog-jekyll">Clean Blog 깃허브 주소</a></p>

<p>그럼에도 불구하고 이 블로그가 적용된 테마는 clean blog theme인데, 이유는 없고, 뭔가 그냥 마음에 들었기 때문이다.</p>

<p>이상하게도 한국어로 된 블로그 테마로 clean blog theme을 적용한 블로그는 많이 찾아보지 못했다. 외국에서는 꽤나 많이 사용하는 것 같은데…</p>

<p>아무튼 이 clean blog 테마를 혹시라도 사용하려는 사람들을 위해서- 이 테마를 커스터마이징 하면서(아직 다 완성되지는 않았지만)내 나름대로 오류 해결 및 설치 방법을 공유하고자 한다.</p>]]></content><author><name>ash tensor</name></author><category term="깃허브" /><summary type="html"><![CDATA[깃허브 블로그 지킬 테마 적용법(clean blog theme)]]></summary></entry><entry><title type="html">51회차 SQLD 시험 후기</title><link href="http://localhost:4000/%EC%9E%90%EA%B2%A9%EC%A6%9D/2023/12/07/sqld.html" rel="alternate" type="text/html" title="51회차 SQLD 시험 후기" /><published>2023-12-07T00:00:00+09:00</published><updated>2023-12-07T00:00:00+09:00</updated><id>http://localhost:4000/%EC%9E%90%EA%B2%A9%EC%A6%9D/2023/12/07/sqld</id><content type="html" xml:base="http://localhost:4000/%EC%9E%90%EA%B2%A9%EC%A6%9D/2023/12/07/sqld.html"><![CDATA[<h1 id="51회-sqld-시험-후기-및-공부법">51회 SQLD 시험 후기 및 공부법</h1>
<p>턱걸이 결과라 부끄럽지만…
<img src="/img/SQLD.png" style="width: 50%" /></p>
<h2 id="시험-후기">시험 후기</h2>
<p>일단 무엇보다도 개념 문제가 많이 출제되었다고 느꼈다. 가장 기억에 남는 문제라고 한다면 이 두가지인데</p>
<ul>
  <li>NULL의 연산(NULL으로 나누면 오류인가?)</li>
  <li>오라클 및 MSSQL에서 NULL은 가장 큰 값으로 취급되는가, 가장 작은 값으로 취급되는가?</li>
</ul>

<p>일단 기본적으로 흔히 ‘노랭이’라고 불리는 SQLD/P 실전연습문제집을 풀어보지 않고, 기출문제 및 복원문제로만 공부를 했는데, 그래서였는지 몰라도 처음에 문제를 봤을때 꽤나 당황했다.</p>

<p>오라클에서 NULL이 가장 큰 값으로 취급되는 건 기출문제에서도 여러번 나와서 기억하고 있었는데 문제를 풀다 보니, “어? MSSQL에서도 그런가?” 헷갈리기 시작해서 엄청 고민했었던 기억이 난다.</p>

<p>그리고 “NULL로 나누었을때 오류가 나는가?” 이러한 어찌보면 너무나 쉬운 개념도 생각하다 보니 헷갈려서 잘못 선택하기 쉬울 것 같았다. 왜냐하면 SUM, AVG과 같은 집계함수는 NULL을 포함하지 않기 때문에, 그런 점에서 헷길릴만 한 것 같다.
<strong>답부터 말하면 NULL으로 나누면 오류가 나지 않는다!!</strong></p>

<p>그리고 또, 좀 악질이었던 점은, 이러한 개념 문제가 2 문제씩 출제가 되어서, 이러한 개념을 모르면 무조건 4점씩 날아가게 설계가 되어 있었던 점이다.</p>

<p>어찌보면 자비라고 생각도 드는데, 한 문제는 NULL로 나누면 오류가 난다고 표시하고, 한 문제는 NULL로 나누면 오류가 나지 않는다고 선택하면 둘 중에 하나는 정답이었기 때문에, 어찌보면 다행인가 싶기도 하다. «나름 팁이라면 팁이다.</p>

<p>아무튼 정리하자면</p>

<ul>
  <li>개념이 중요하다!! 내가 언급한 개념 말고도 틀릴만하거나 헷갈릴만한 SQL 특유의 개념이 많이 출제되었다고 느꼈다. 단순 노랭이 N회독 말고 선지를 가다듬으며 정리하는 것이 좋다고 생각한다!</li>
  <li>실제로 이번 회차에서는 커뮤니티에서도 논란이 되는 문제가 많았는데
    <ul>
      <li>DCL인지 아니면 grant, revoke라고 써야하는지(개인적으로 DCL이 맞지 않나 생각한다)</li>
      <li>어떤것이 파생속성인지 선지에서 고르는 문제, 커뮤니티에서도 결국 어떤게 정답이라고 확실하게 가려내지 못했던 것으로 기억한다. 쟁점이 가격이 파생속성인지 아닌지에 따라서 갈렸는데, 궁금한 사람은 복원문제를 보는것도 좋다고 생각한다.</li>
      <li>오라클에서 날짜 관련 문제. 2023-05-05 18:00을 yyyy로 추출하면 답이 2023-01-01 00:00:00 인지, 2023-05-01 00:00:00 인지. 나는 당연히 2023-01-01 ~ 이라고 생각했는데, 커뮤니티에서 직접 오라클로 시험해보니 2023-05-01 ~~이 나온다는 후기가 있어서 충격을 먹었었다.</li>
      <li>문법 오류에 관한 문제</li>
    </ul>
  </li>
  <li>이렇게 개념을 묻는 문제가 많았다.</li>
</ul>

<h2 id="공부방법">공부방법</h2>

<p>앞서 말했듯 나는 기본적으로 책을 구매하거나 흔히 하는 노랭이 N회독은 하지 않고, 인터넷에서 찾을 수 있는 SQLD 기출문제와 복원문제만 공부했는데 시간이 촉박해서 연습문제를 풀어볼 시간이 없었기 때문이다. 그 대신 내가 공부했던 방법을 공유해 보자면</p>

<ul>
  <li>선지 정리
    <ul>
      <li>이건 너무 중요하다고 생각하는데, 단순히 문제를 많이 푸는 것이 중요하다거나, 아니면 강의를 N회독하면서 개념을 보는것 보단, 어떤 문제가 몇문제씩 나오는지, <strong>그 개념이 선지에서는 어떻게 정리되어서 나오는지가 중요하다.</strong> 기출문제를 풀다 보면 각각의 개념이 어떻게 선지에서 제시되는지 확인할 수 있는데, 기출문제 및 복원기출을 보며 개념을 확실히 정리하는 것이, 단순 개념정리 보단 도움이 되었던 것 같다.</li>
    </ul>
  </li>
  <li>어차피 SQLD를 취득할 정도면 정보처리기사도 준비하거나 이미 있는 경우가 많다고 보는데, 정처기에서 나오는 SQL은 수박 겉핥기 느낌이니 그것보다는 개념을 더 깊이 봐야한다. 앞서 논란이 되었던 SQL 문제들도 [1과목, 데이터 모델링의 이해] 에서 논란이 된 내용이 많았고, ERD 및 prior ~ 계층문제는 무조건 한문제씩은 나오니 어렵다고 해도 꼭 살펴봤으면 좋겠다.</li>
</ul>

<h2 id="공부시간">공부시간</h2>

<p>앞서 말한 방법으로 약 10일동안, 하루에 기출문제 1회 풀고, 선지 및 개념 정리하는 정도로 공부했고 68점으로 합격했다. 턱걸이로 합격해서 부끄럽긴 한데 그래도 합격했으니 마음이 놓인다. 내가 한 공부 방법에서 연습문제(노랭이 책)을 꾸준히 학습했다면(약 1주일 정도)80점에서 86점 정도의 고득점이 무조건 가능하다고 생각한다.</p>]]></content><author><name>ash tensor</name></author><category term="자격증" /><summary type="html"><![CDATA[SQLD]]></summary></entry></feed>