<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-12-11T15:50:44+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Tensor Studio</title><subtitle>텐서 스튜디오</subtitle><author><name>ash tensor</name></author><entry><title type="html">[후기] 이카운트 코딩 테스트 및 인터뷰 리뷰</title><link href="http://localhost:4000/web/%EB%A6%AC%EB%B7%B0/2024/12/11/ecount-interview.html" rel="alternate" type="text/html" title="[후기] 이카운트 코딩 테스트 및 인터뷰 리뷰" /><published>2024-12-11T00:00:00+09:00</published><updated>2024-12-11T00:00:00+09:00</updated><id>http://localhost:4000/web/%EB%A6%AC%EB%B7%B0/2024/12/11/ecount-interview</id><content type="html" xml:base="http://localhost:4000/web/%EB%A6%AC%EB%B7%B0/2024/12/11/ecount-interview.html"><![CDATA[<h2 id="후기-이카운트-코딩-테스트-및-인터뷰-리뷰">[후기] 이카운트 코딩 테스트 및 인터뷰 리뷰</h2>

<h3 id="1-서론">1. 서론</h3>

<p><img src="/img/posts/interview/1.png" width="80%" /></p>

<p>항상 업로드를 꾸준히 해야겠다고 생각하지만, 마음에만 그치고 꾸준히 하지 못하는 것 같다.
근데 어쩔 수 없는게, 좀 새로운 내용을 적고 싶은데, 이미 다른 사람이 올린 내용의 변주밖에는 안되니까 안적는 것도 많기는 하다.
아무튼.
음 일단 코딩 테스트 후기부터 적는게 좋을 것 같다. 사실 코딩 테스트는 일주일, 그러니까 12월 2일, 화요일날 있었는데</p>

<p><img src="/img/posts/interview/2.png" width="80%" /></p>

<p>총 세 문제로 이루어져 있었고, 코딩 테스트 플랫폼은 구름이었다.</p>

<h3 id="2-코딩-테스트">2. 코딩 테스트</h3>

<p>일단 사실 코딩 테스트를 처음 받아봤을 때, 어렵다는 느낌은 받지 못했다. 
오히려 쉽다는 인상을 좀 받았는데, 일단 기본적으로 내가 예상했던 코딩 테스트 문제는 일단 자료구조 문제 하나와 그래프 순회 문제(BFS, DFS)와 같은 문제, 그리고 어렵게 나오면 
동적 계획법 같은 문제가 나오지 않을까? 싶었는데, 그래프 순회 문제가 하나도 안 나왔다는 점에서 좀 특이했다고 느꼈다. 그러니까 그만큼, <strong>올바른 자료구조</strong>를 사용하는게 너무 중요한 코테였다.</p>

<p>1번 문제는 문자열 치환 문제? 였는데 백준에서 비슷한 문제를 찾아보지는 않았지만 암호문을 주어지고, 대응되는 해독 규칙이 주어진 뒤, 암호문을 평문으로 해독하는 문제였다.
하지만 해독 규칙이 무한 루프에 빠질 수 있기 때문에 무한 루프에 빠지는 경우를 잘 처리해야 하는 문제였고</p>

<p>2번 문제는 자료구조 문제였다. 아 여기서 내가 실수를 하지 않았나 싶은데, 일단 문제는 산의 높이가 주어지고(ex: 9, 10, 3, 10, 9) 각 산에 다리를 놓는 문제인데 다리를 놓기 위해서는 각 산의 높이가 동일해야만 하고, 산 사이에 해당 산 보다 더 높은 산이 존재해서는 안 되는 문제였다.</p>

<p>아 이건 내가 면접에 들어가서야 내가 잘못 풀이했다고 느꼈는데, 나는 각 산의 높이를 해시 맵에 넣고, 이런 식으로 풀었는데, 다른 사람이 대답하는 것을 들어보니 스택 문제이지 않았나, 그런 생각이 그제서야 들었다.</p>

<p>3번 문제는 시간이 오래 걸리는 구현 문제였다. 로그 파일이 주어지고, 해당 로그 파일을 특수한 규칙을 가지고 정렬하는 문제였다. 나는 처음에 1번 2번 문제에 집중하다가 3번 문제를 제대로 못풀었는데, 아쉽긴 했다.</p>

<p><img src="/img/posts/interview/3.png" width="80%" /></p>

<h3 id="3-기술면접">3. 기술면접</h3>

<p>면접은 5명이 1조를 이뤄서 진행되었는데, 면접 전 대기시간에 간단한 문제를 풀이하고(종이에) 면접을 들어갔다.</p>

<p>면접은 두 차례로 진행되었는데 기술면접과 이력서 기반 면접 이렇게 두 번으로 진행되었다.</p>

<p>일단 기술면접에서 해당 코딩테스트 코드를 가지고 물어보는 것이 많았는데, 문제가 모두 자료구조 문제였던 만큼 막 무척이나 어려웠던 문제는 아니었지만 자료구조를 잘 사용했어야만 하고, 개발자 면접관 두 분이서 해당 자료구조를 잘 이해했는지, 잘 사용했는지 계속 물어봤다는 인상이 들었다.</p>

<p>일단 첫번째 문자열 치환 문제에서는 해시 셋을 사용해서 이미 도달했던 노드인지를 체크했어야 하는데, 다른 지원자 분들이 그냥 리스트를 사용했다고 했나? 아무튼 그래서 혹시 다르게 풀이한 사람이 있는지 지원자들에게 물어보고 보통은 이렇게 해시 셋, 집합을 이용해서 풀이하는 것이 맞다고 설명하거나, 하는 식의 질문이 주를 이뤘다.</p>

<p>구름IDE에서 코딩 테스트를 진행했던 만큼, 자신의 코드를 제대로 기억하지 못한 경우도 있었을 텐데 그러지 않게 조심해야 했고</p>

<p>음, 그 이후에는 특정 상황을 제시하고 그 상황에서 어떤 문제가 발생할 수 있는지 물어봤는데 동시성 제어? 관련 질문이었던 것 같다.</p>

<p>특정 서버에 접속하는 클라이언트가 있고, 그 서버에 접속하는 클라이언트가 너무 많이 몰려서 서버가 뻗어버리는 상황이 발생했다고 가정하고, 이런 상황에서 어떻게 해결할 수 있는지 물어봤다.
여기서 내가 카프카가지고 헛소리 좀 하다가 그게 안되면 라운드 로빈 등의 방식으로 클라이언트의 요청을 시간적으로 분산시켜야 한다고 대답했는데 이 대답이 조금 후회되기는 한다.</p>

<p>그래서 카프카의 구조를 알려달라는 질문에 내가 예전에 했던 프로젝트에서 4개의 EC2 인스턴스 어쩌구저쩌구 하다가 허무하게 끝났던 것 같다. 아마도 내 생각에는 이런 메시지 큐 같은 대답이 아니라 시간적 분산 등에 초점을 맞춰서 대답했어야 하지 않을까, 싶은 생각이 들기는 했다. 면접관의 반응도 그렇고, 내 옆의 분도 카프카 가지고 대답하다가 조금 핀트가 어긋났다는 대답을 들은 걸 보면…</p>

<p>사실 이런 기술 면접에서 Node.js나 프레임워크 등의 질문이 나올 거라고 생각해서 호이스팅과 같은 ㅋㅋ Node.js 백엔드 개발자 관련 질문을 좀 준비해 갔는데 다른 질문이 나와서 조금 당황하기는 했다.</p>

<h3 id="4-전반적인-면접-후기">4. 전반적인 면접 후기</h3>

<p>그리고 이후에는 인성면접? 이력서 기반 면접을 진행했는데, 1분 자기소개나 지원 동기 등을 물어보지 않을까 생각했는데 그런 질문은 없었다. 
그럴 수 밖에는 없었던 게, 음 일단 5명? 4명이 1조로 이뤄서 약 30분 정도 면접을 진행했는데
일단 요구했던 대답이 전부 <strong>“두문장 세문장 정도로 대답해 달라”</strong> 였다. 그러니까 대답할 시간을 많이 주지 않았고, 산술적으로 계산해 본다고 해도 한사람당 대략 6분에서 7분 정도 면접을 진행하는? 그런 식의 면접이었다. 왜 잡플래닛에서 병풍면접같았다고 적혀있었는지 조금 알 것 같다. 실제로는 그렇지 않을지는 몰라도, 한사람당 대략 6분 정도 면접을 진행하는 셈이니, 다른 사람 대답이 길어지면 길어질수록 점점 다른 사람이 자연스럽게 병풍이 되는 셈이니ㅋㅋ</p>

<p>면접결과는 바로 다음 날 오전에 나온다.</p>

<p>내가 어떻게 느꼈냐면 이럴거면 <strong>그냥 서류컷을 좀 더 높게 잡는게 좋지 않나?</strong> 하는 생각이 들었다. 면접 경쟁률은 약 6대 1정도라고 들었다.</p>

<p>물론 면접이 나쁜 경험은 아니었다. 그리고 내가 부족했다는 점도 절대적으로 인정한다!! 뭔가 알더라도 제대로 알아야겠다는 생각도 들었고, 면접비 3만원 주신 것도 뭐 나쁘지 않았다.
그렇긴 해도 변별력이 조금 없는 면접이었다는 느낌이 들었다. 
1분 자기소개랑 지원동기, 예상 질문에 대한 대답 같은것도 열심히 외워갔는데 아예 물어보지도 않으니ㅠㅠ 좀 서운하긴 했다. 뭐 물어보셨어도 떨어지긴 했곘지만, 아쉬운 면접이었다. 내가 너무 못하더라…</p>

<p>면접비 받은 걸로 커피나 마셔야겠다.</p>

<p><img src="/img/posts/interview/4.png" width="80%" /></p>

<p>한잔해~</p>]]></content><author><name>ash tensor</name></author><category term="WEB" /><category term="리뷰" /><summary type="html"><![CDATA[[후기] 이카운트 코딩 테스트 및 인터뷰 리뷰]]></summary></entry><entry><title type="html">[후기] 웹 개발자의 Cursor AI 사용기</title><link href="http://localhost:4000/web/%EB%A6%AC%EB%B7%B0/2024/11/02/cursor-ai-review.html" rel="alternate" type="text/html" title="[후기] 웹 개발자의 Cursor AI 사용기" /><published>2024-11-02T00:00:00+09:00</published><updated>2024-11-02T00:00:00+09:00</updated><id>http://localhost:4000/web/%EB%A6%AC%EB%B7%B0/2024/11/02/cursor-ai-review</id><content type="html" xml:base="http://localhost:4000/web/%EB%A6%AC%EB%B7%B0/2024/11/02/cursor-ai-review.html"><![CDATA[<h2 id="후기-웹-개발자의-cursor-ai-사용기">[후기] 웹 개발자의 Cursor AI 사용기</h2>

<h3 id="1-서론">1. 서론</h3>

<p><img src="/img/posts/cursor/copilot1.png" width="80%" /></p>

<p>원래 내 개발환경은 Intelij에서 github copilot을 추가해서 사용하고 있었는데 처음에는 무척이나 편리하다고 느꼈다. 
그런데 시간이 지나면서 코파일럿이 뭐랄까, 거슬리는 점이 많아지기 시작했다.</p>

<p>첫번째로 맥락 부분에서 이야기하자면 코파일럿은 맥락을 파악하기 보다는 그냥 내 코드 베이스나 해당 코드 파일에서 이미 존재하는 코드를 단순 참고, 및 붙여넣기 하는 정도의 수준이었다.</p>

<p>코파일럿을 사용하면서 느꼈던 가장 큰 문제가 되는 점은, <strong>Copliot이 오류가 발생하는 코드를 작성한다는 점이다.</strong> 
그러니까 맥락성이 너무 강한 나머지, 무분별한 복사 및 붙여넣기로 오히려 오류가 발생하는 코드를 자동완성하는 경우가 너무 많았다. 
예를 들어서, 해당 클래스에는 .isFalse() 메소드가 없는데 이를 자동완성해 버리는 경우같은 게 그렇다. 또 <strong>내 코드를 참고해서 그냥 복사 붙여넣기 하는 수준의 자동완성을 제공하는 경우도 많았다. 예를 들어서, 내가 해당 코드 파일에 testToken 이라는 변수를 사용했다고 치자, 내가 다시 testToken을 치면 맥락을 단순히 내가 썼던 코드로 자동완성 해 버린다.</strong></p>

<p>또 이 문제도 좀 치명적인 문제였는데, 추천해주는 코드가 Depricated된 코드인 경우가 너무 많았다. 이 부분은 코파일럿이 GPT, 언어모델을 사용하기 때문에 발생하는 문제라고 느껴지지만 그래도 짜증나는건 마찬가지다.</p>

<p>두번째 큰 문제점은, <strong>Copilot Chat이 너무 성능이 떨어져서 쓰기가 불편했다는 점이다. 진짜 너무 쓸모없고 오히려 사용에 있어서 개발 시간을 줄여주는 도구가 아니라 여기서 대답을 못찾아서 시간 낭비를 하고 더 많은 시간을 써야하는 경우가 너무 많았다.</strong></p>

<p>지금 gpt 4o는 물론이고, 클로드 및 라이트형 모델들 중에서도 오히려 더 좋은 성능을 보여주는 모델이 수없이 많은데 코파일럿이 이런 성능을 보여주는게 너무 아쉬웠다. 아무리 자세히 대답을 요구해도 대답이 너무 간략하고, 완전히 헛소리를 하는 경우도 많았고, 한글로 질문했는데 계속 이악물고 영어로 대답하는 경우가 많았다.</p>

<p>이해는 한다. 왜냐하면 코파일럿의 시스템 메시지가 영어로 되어 있을테니까. 그래도 계속 한글로 대답을 하라고 채팅을 치는것도 너무 짜증나는 부분이다.</p>

<p>코파일럿이 gpt-4를 사용한다고 하는데 왜 이런 성능을 보여주는지 잘 모르겠다.</p>

<p>물론 코파일럿이 없는 것보다는 있는게 개발 속도가 훨씬 빨라서 좋기는 하지만, 10$를 내고 사용하는데
그냥 참고용으로만 쓰는 것도 아깝고, 너무, 너무 성능이 떨어져서 쓰기가 불편했다.</p>

<p>그러던 참에 Cursor AI를 알게 되었고, 이 때문에 코파일럿 대신 Cursor AI를 사용해 보았다.</p>

<h3 id="2-cursor-ai">2. Cursor AI</h3>

<h4 id="장점">장점</h4>

<p><img src="/img/posts/cursor/cursor.jpeg" width="80%" /></p>

<p>장점은 아무래도 일단 <strong>성능</strong>이다.</p>

<p>Cursor AI는 코파일럿과 비교했을 때 코드 자동완성과 챗봇 기능 모두에서 훨씬 더 뛰어난 성능을 보여주고 있다. 특히 맥락 파악 능력이 뛰어나서, 기존 코드베이스의 맥락을 정확하게 이해하고 이에 맞는 제안을 해준다는 점이 인상적이다.</p>

<p>예를 들어, JWT 토큰 발급 코드를 작성할 때의 경우를 보자. 코파일럿은 내가 이미 ‘TokenProvider’라는 클래스명을 사용하고 있음에도 불구하고, 일반적으로 많이 사용되는 ‘JwtTokenProvider’와 같은 이름을 무분별하게 제안하곤 했다. 반면 Cursor AI는 기존 코드의 네이밍 패턴을 정확히 파악하고 일관성 있는 제안을 해준다.</p>

<p>최신 언어 모델을 사용해서인지 코파일럿보다 훨씬 더 정확한 코드 자동완성을 제공해주기 때문에 단순히 이미 존재하는 코드들을 복사 붙여넣기 하는 코파일럿 수준의 컴플리션보다도 훨신 더 나은 성능을 보여준다.</p>

<p>또한 Cursor AI의 대화형 챗 모드는 코파일럿과 비교했을 때 응답의 정확도와 상세함이 월등히 뛰어나다. 개발 과정에서 발생하는 질문에 대해 더 구체적이고 실용적인 답변을 제공하며, 코드 예시도 현재 프로젝트의 맥락에 맞게 제시해준다.</p>

<p><img src="/img/posts/cursor/2.png" width="80%" /></p>

<p>사진에서 볼 수 있듯, 원하는 용도에 맞게 언어 모델을 선택할 수 있는것도 꽤 장점이다. 평상시에는 4o로 작동하다가도 어려운 문제에 대해서는 o1 mini로 선택해서 더 정확한 답변을 요청할 수도 있다.</p>

<p>그리고 챗 모드에서 ctrl + l을 눌러서 선택한 코드를 바로 챗 모드의 맥락으로 사용할 수 있는것도 편리할 뿐만 아니라 언어 모델이 개선한 코드를 apply 버튼을 눌러 바로 적용할 수 있는것도 매우 편리하다.</p>

<p><img src="/img/posts/cursor/1.png" width="80%" /></p>

<p>이런 식으로 마치 git conflict 해결 과정처럼 어떤 코드를 적용할건지 선택하는 식으로 작동하는데, 해당 사진은 ctrl + k를 눌러서 채팅 모드가 아니라 언어 모델에 디렉션을 주고 편집기 내에서 코드 개선을 시도하는 기능도 주석을 작성할 때 특히 유용했다.</p>

<p><img src="/img/posts/cursor/3.png" width="80%" /></p>

<p>javadoc 주석을 작성하는 데 있어서도 마찬가지로 코파일럿보다 훨씬 더 정확하게 주석을 작성해주는 것을 볼 수 있다.</p>

<h4 id="cursor-ai-composer">Cursor AI Composer</h4>

<p>(2024-12-11 추가)</p>

<p>커서 이야기를 하면서 컴포저를 이야기 하지 않을 수가 없다. 왜 커서에서 컴포저가 킬러 기능이라고 하는지 좀 알겠다.
그렇다고 해도 다른 리뷰들에서 호들갑 떨 만큼 차원이 다른 기능이냐라고 한다면, 꼭 그런가? 싶긴 하다. 내가 원래 이렇게 모든지 호들갑 떠는걸 썩 좋아하지는 않기 때문일지도 모른다.</p>

<p>아무튼. 컴포저는 챗 모드와는 다르게 <strong>실제 파일을 대규모로 생성해주고, 편집해주는 기능</strong>이다.</p>

<p>예를 들어 볼까? 일단 리액트 프로젝트에서 이미 작은 버튼 컴포넌트가 존재하는데, 이와 비슷하지만 그냥 크기가 큰 버튼을 만들어 주고 싶다고 하자.</p>

<p><img src="/img/posts/cursor/6.png" width="80%" /></p>

<p>그럼 이런식으로 요청하면 컴포저가 실제로 파일을 생성해가며, 그리고 해당 파일을 이용하기 위해 다른 파일을 수정해야 한다면, <strong>다른 파일까지 수정해가며</strong> 컴포저가 자동으로 파일을 생성해주고 수정해주는 것을 볼 수 있다.</p>

<p><img src="/img/posts/cursor/7.png" width="80%" /></p>

<p>이런식으로 컴포저가 자동으로 파일을 생성해주고 수정해주는 것을 볼 수 있다. 해당 버튼을 위한 css 파일도 생성하고, 필요하다면 다른 컴포넌트까지 수정해주는 것을 볼 수 있다.</p>

<p>컴포저의 장점은 일단 파일을 대규모로 생성하고 수정해 준다는 점이다. 이 점이 컴포저의 가장 큰 장점이라고 생각한다. 사실 챗 모드와 딱히 엄청 다른 건 없기는 하다.
이렇게 말하면 뭔소리지? 싶긴 하겠지만, 컴포저를 이용한다고 해도, <strong>결국 GPT 엔진 성능 이상의 결과를 얻는건 불가능하다.</strong></p>

<p>그러니까 GPT가 못 만들어 주는건 컴포저라고 만들 수 있는 건 아니라는 말이다. 물론 내가 우물안 개구리라 커서의 더 많은 성능을 끌어 올리지 못하는 것일 수도 있지만, 
결국에는 프레임워크의, 프로젝트의 구성을 제대로 알고 있는 개발자가 컴포저가 생성한 코드를 정리해주고 수정해주는 것이 필요하다.</p>

<p>그런데 그럼에도, 컴포저는 챗 모드보다 훨씬 더 빠르게 코드를 생성해주고 수정하는데 도움을 주는 건 사실이다.
나는 컴포저를 어떻게 이용하냐면, 일단 컴포저를 이용해서 코드의 뼈대를 잡고, 그걸 수정하는 식으로 이용하고 있다.</p>

<h4 id="단점">단점</h4>

<p><img src="/img/posts/cursor/4.png" width="80%" /></p>

<p>일단 단점으로는 비용이다. 코파일럿은 학생이면 무료, 아니면 10$를 내고 사용할 수 있는데, 커서는 월 20$, 한화 약 3만원을 내고 사용해야 한다.</p>

<p>솔직히 조금 비싸다고 느껴지긴 했는데, 챗 GPT 구독료도 이정도 한다는 걸 생각하면 그럭저럭 납득이 되긴 한다.</p>

<p>그리고 또 내가 느끼는 개인적인 단점으로는, 베이스가 VSCODE라는 점이다. 일단 커서를 이용하기 전에는 Intelij에 코파일럿 애드온을 설치해서 사용하고 있었는데, 인텔리제이에 익숙해져서 그럴 수도 있지만 VSCODE는 인텔리제이에 비해 좀 더 불편한 점이 있다.</p>

<p>익스텐션이나 플러그인을 추가해야만 사용할 수 있는 기능들도 많기도 하고, Auto import 기능도 좀 Intelij에 비해 불편한 점이 있다. Intelij는 모든 파일을 인덱싱해두기 때문에 빠르게 오류를 잡아주거나, 자동 import를 해주는데 비해서 커서는 그런 점에 있어서는 조금 떨어진다.</p>

<p>IDE의 기본기는 아무래도 Intelij가 훨신 좋은 편이다.</p>

<p>내가 커서를 사용하면서 겪은 문제점으로는 vscode의 문제점이기도 했는데, 예를 들어서 <strong>내가 해당 패키지를 import 했음에도 불구하고 java에서 해당 패키지를 resolve 하지 못했다고 헛소리하는 이슈</strong>가 몇 번 발생하기도 했다. 아무리 Clean Build를 하고, 빌드가 제대로 수행됨에도 불구하고 계속 java can not be resolved 에러가 발생해서 너무 짜증났다.</p>

<p>또한 오류가 아닌 것 같은데 계속 오류라고 표시해서 짜증나는 경우도 있었다(이 경우에는 커서를 종료하고 Intelij로 돌아가서 불러오니까 오류가 결국 아니었다).</p>

<p>또 어떤 문제인지 정확히는 모르겠는데, <strong>자동 저장을 켜놨음에도 불구하고 실행할 때 자꾸 예전 코드를 실행해서 문제가 발생하는 경우도 있었다.</strong> 이 경우에도 커서를 껐다가 다시 실행하니까 문제가 해결되긴 했지만 오류가 아니었고, 빌드 및 실행도 문제없이 잘 됐음에도 불구하고 결과가 이상하게 나오니까 필요없는 디버깅만 수없이 발생했다.</p>

<p><img src="/img/posts/cursor/5.png" width="80%" /></p>

<p>이런 경우에 Stack Overflow에 찾아보니까, F1을 눌러서 Java Language Server 작업 공간 디렉토리를 삭제하면 깨끗한 상태로 돌아가는 데 도움이 된다고 하고, 실제로 그 방법을 이용해서 문제를 해결할 수 있었다.</p>

<p>(2024-12-11 추가)</p>

<p>그리고 컴포저의 단점을 설명해 보자면, <strong>앞서 말했듯 대규모로 다른 파일까지 수정한다</strong> 고 했는데, 이 부분은 컴포저가 코드를 생성하고 수정하는 과정에서 문제가 발생할 수 있는 부분이다. 예를 들어 보자면, 나는 앞선 맥락은 유지하면서 새로운 기능을 추가하고 싶은데, 컴포저는 새로운 기능에 맥락을 깊게 맞춰, 앞선 맥락을 무시하는 경우가 종종 있었다.</p>

<p>이런 경우에 발생할 수 있는 문제가, 주 파일은 괜찮지만, 컴포저가 건드린 다른 파일에서 문제가 생기는 경우이다. 나같은 경우에는 메인 파일은 괜찮아서 Accept를 눌렀지만, 컴포저가 건드린 다른 파일에서 문제가 생겨서 되돌리는데 고생을 했던 적이 있다. 깃이 있긴 하지만 한줄 한줄 작성할 때마다 커밋을 올릴 수도 없는 노릇이기도 하고.</p>

<p>아무튼 이런 문제가 있다.</p>

<h3 id="마치며">마치며</h3>

<p>이러한 단점들이 있음에도 불구하고, Cursor AI는 충분히 투자할 가치가 있는 도구라고 생각한다. ChatGPT Plus를 따로 구독하는 것보다 Cursor AI를 사용하는 것이 개발 생산성 향상에 더 도움이 되며, GitHub Copilot과 비교했을 때도 월 10$ 더 비싸지만 훨씬 뛰어난 성능과 기능을 제공한다. 특히 Copilot은 기본적인 코드 자동완성 외에는 제한적인 기능을 제공하는 반면, Cursor AI는 강력한 대화형 AI 기능과 코드 분석 능력을 갖추고 있어 추가 비용을 충분히 정당화한다고 볼 수 있다.</p>

<p>결국 Intelij보다 IDE로써의 불편함은 있긴 해도 pro 버전을 결제해서 사용하고 있다. 
Intelij도 엄청 비싼 도구임을 생각하면(나는 아직 학생 무료 기간이 남아서 무료로 사용하고 있지만) 커서의 20$를 내고 사용하는 것이 낫다고 생각한다.</p>

<p>그리고 나는 Intelij에 익숙해져 있지만, 오히려 vscode에 익숙한 사람이라면 훨신 더 유용한 툴일 것이다.</p>

<p>내가 추가해서 사용하고 있는 플러그인은 Spring Boot, Spring Boot Dashboard, Spring Initializr, Maven Helper, Rainbow Brackets, Auto Import, Extension Pack for Java, Gradle for Java, Korean Language Pack 등이다.</p>

<p>그럼 끝!!</p>]]></content><author><name>ash tensor</name></author><category term="WEB" /><category term="리뷰" /><summary type="html"><![CDATA[[후기] 웹 개발자의 Cursor AI 사용기]]></summary></entry><entry><title type="html">[WEB][Spring] 스프링으로 Chat-GPT 페이지 구현하기 - 2</title><link href="http://localhost:4000/web/java/2024/10/24/spring-gpt-frontend.html" rel="alternate" type="text/html" title="[WEB][Spring] 스프링으로 Chat-GPT 페이지 구현하기 - 2" /><published>2024-10-24T00:00:00+09:00</published><updated>2024-10-24T00:00:00+09:00</updated><id>http://localhost:4000/web/java/2024/10/24/spring-gpt-frontend</id><content type="html" xml:base="http://localhost:4000/web/java/2024/10/24/spring-gpt-frontend.html"><![CDATA[<h2 id="webspring-스프링으로-간단한-chat-gpt-페이지-구현하기---2">[WEB][Spring] 스프링으로 간단한 Chat-GPT 페이지 구현하기 - 2</h2>

<h3 id="1-서론">1. 서론</h3>

<p>이전 포스트에서 백엔드를 구현했으니, 이제 프론트엔드를 구현해 보자. 솔직히 이미 예전에 다 구현하긴 했는데,
이제서야 포스팅하게 되었다.</p>

<p>이전 포스팅은, 백엔드는 <a href="https://ash-tensor.github.io/web/java/2024/09/30/spring-gpt-backend.html">여기</a>에서 확인할 수 있다.
실제 작성한 예제는 <a href="https://github.com/Ash-tensor/simple-gpt-page">여기</a>에서 확인할 수 있다.</p>

<p><img src="/img/posts/spring/gpt/1.png" width="80%" /></p>

<h3 id="2-프론트엔드-구현">2. 프론트엔드 구현</h3>

<h4 id="chattingcontrollerjava">ChattingController.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">com.chatgptspring.controller</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.chatgptspring.service.ChatService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.RequiredArgsConstructor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.ui.Model</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.GetMapping</span><span class="o">;</span>

<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChattingController</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ChatService</span> <span class="n">chatService</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/chatpage"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">modelController</span><span class="o">(</span><span class="nc">Model</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"chats"</span><span class="o">,</span> <span class="n">chatService</span><span class="o">.</span><span class="na">FindAllChats</span><span class="o">());</span>
        <span class="k">return</span> <span class="s">"chatting"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>이름을 너무 못짓긴 했는데, 일단 챗 페이지 자체를 리턴하는 컨트롤러를 작성했다.
비록 리액트를 쓰지 않긴 하지만, 리액트처럼 나머지는 js로 작성한 RestAPI를 이용해서 구현할 것이다.</p>

<h4 id="chattinghtml">Chatting.html</h4>

<p>이 부분은 딱히 중요하지 않다. 중요한 부분은 타임리프 템플릿을 이용해서 챗 목록을 그리는 부분과, 
js를 이용해서 메시지를 추가하는 부분이다.</p>

<p>엄청 긴데, 별 내용은 없고, 사실 에셋은 괜찮아 보이는 부분을 가져온 거라서 중요한 부분은 아니다.
아래 js부분을 보거나 아니면 깃허브에서 예제를 확인하면 더 이해가 쉬울 것이다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>Title<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"/static/css/chatting.css"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> 
  <span class="na">integrity=</span><span class="s">"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"</span> <span class="na">crossorigin=</span><span class="s">"anonymous"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"</span> 
  <span class="na">integrity=</span><span class="s">"sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"</span> <span class="na">crossorigin=</span><span class="s">"anonymous"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/static/js/chatting.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/static/js/message.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex-box"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"sidebar d-flex flex-column flex-shrink-0 p-3 text-bg-dark"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/static"</span> <span class="na">class=</span><span class="s">"d-flex align-items-center mb-3 
        mb-md-0 me-md-auto text-white text-decoration-none"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;svg</span> <span class="na">class=</span><span class="s">"bi pe-none me-2"</span> <span class="na">width=</span><span class="s">"40"</span> <span class="na">height=</span><span class="s">"32"</span><span class="nt">&gt;&lt;use</span> <span class="na">xlink:href=</span><span class="s">"#bootstrap"</span><span class="nt">&gt;&lt;/use&gt;&lt;/svg&gt;</span>
            <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"fs-4"</span><span class="nt">&gt;</span>Sidebar<span class="nt">&lt;/span&gt;</span>
        <span class="nt">&lt;/a&gt;</span>
        <span class="nt">&lt;hr&gt;</span>
        <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"nav nav-pills flex-column mb-auto"</span> <span class="na">id=</span><span class="s">"chatList"</span><span class="nt">&gt;</span>
            <span class="c">&lt;!-- 기존 채팅 목록 표시 --&gt;</span>
            <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"nav-item"</span> <span class="na">th:each=</span><span class="s">"chat : ${chats}"</span> 
            <span class="na">style=</span><span class="s">"padding: 5px"</span> <span class="na">th:onclick=</span><span class="s">"'drawChat(' + ${chat.id} + ')'"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"#"</span> <span class="na">class=</span><span class="s">"nav-link active"</span> <span class="na">th:text=</span><span class="s">"'채팅 ' + ${chat.id}"</span> <span class="na">aria-current=</span><span class="s">"page"</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;svg</span> <span class="na">class=</span><span class="s">"bi pe-none me-2"</span> <span class="na">width=</span><span class="s">"16"</span> <span class="na">height=</span><span class="s">"16"</span><span class="nt">&gt;&lt;use</span> <span class="na">xlink:href=</span><span class="s">"#home"</span><span class="nt">&gt;&lt;/use&gt;&lt;/svg&gt;</span>
                    <span class="nt">&lt;span</span> <span class="na">th:text=</span><span class="s">"'채팅 ' + ${chat.id}"</span><span class="nt">&gt;</span>채팅 ID<span class="nt">&lt;/span&gt;</span>
                <span class="nt">&lt;/a&gt;</span>
            <span class="nt">&lt;/li&gt;</span>
        <span class="nt">&lt;/ul&gt;</span>

        <span class="c">&lt;!-- 새 채팅 생성 폼 --&gt;</span>
        <span class="nt">&lt;form</span> <span class="na">id=</span><span class="s">"createChatForm"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;li&gt;</span>
                <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">class=</span><span class="s">"nav-link text-white"</span> 
                <span class="na">style=</span><span class="s">"background: none; border: none; padding: 0;"</span> <span class="na">onclick=</span><span class="s">"createNewChat()"</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;svg</span> <span class="na">class=</span><span class="s">"bi pe-none me-2"</span> <span class="na">width=</span><span class="s">"16"</span> 
                    <span class="na">height=</span><span class="s">"16"</span><span class="nt">&gt;&lt;use</span> <span class="na">xlink:href=</span><span class="s">"#people-circle"</span><span class="nt">&gt;&lt;/use&gt;&lt;/svg&gt;</span>
                    Create New Chat
                <span class="nt">&lt;/button&gt;</span>
            <span class="nt">&lt;/li&gt;</span>
        <span class="nt">&lt;/form&gt;</span>

        <span class="nt">&lt;/ul&gt;</span>
        <span class="nt">&lt;hr&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"dropdown"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"#"</span> <span class="na">class=</span><span class="s">"d-flex align-items-center text-white text-decoration-none dropdown-toggle"</span>
             <span class="na">data-bs-toggle=</span><span class="s">"dropdown"</span> <span class="na">aria-expanded=</span><span class="s">"false"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"https://github.com/mdo.png"</span> <span class="na">alt=</span><span class="s">""</span> <span class="na">width=</span><span class="s">"32"</span> <span class="na">height=</span><span class="s">"32"</span> <span class="na">class=</span><span class="s">"rounded-circle me-2"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;strong&gt;</span>mdo<span class="nt">&lt;/strong&gt;</span>
            <span class="nt">&lt;/a&gt;</span>
            <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"dropdown-menu dropdown-menu-dark text-small shadow"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">class=</span><span class="s">"dropdown-item"</span> <span class="na">href=</span><span class="s">"#"</span><span class="nt">&gt;</span>New project...<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
                <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">class=</span><span class="s">"dropdown-item"</span> <span class="na">href=</span><span class="s">"#"</span><span class="nt">&gt;</span>Settings<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
                <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">class=</span><span class="s">"dropdown-item"</span> <span class="na">href=</span><span class="s">"#"</span><span class="nt">&gt;</span>Profile<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
                <span class="nt">&lt;li&gt;&lt;hr</span> <span class="na">class=</span><span class="s">"dropdown-divider"</span><span class="nt">&gt;&lt;/li&gt;</span>
                <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">class=</span><span class="s">"dropdown-item"</span> <span class="na">href=</span><span class="s">"#"</span><span class="nt">&gt;</span>Sign out<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
            <span class="nt">&lt;/ul&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>

    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"card"</span> <span class="na">style=</span><span class="s">"height: 100%"</span> <span class="na">id=</span><span class="s">"chat-box"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"title"</span><span class="nt">&gt;</span>Comments<span class="nt">&lt;/span&gt;</span>

        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"comment-box"</span> <span class="na">id=</span><span class="s">"message-box"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"comments"</span> <span class="na">th:each=</span><span class="s">"message: ${chats[0].messages}"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"comment-react"</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;button&gt;</span>
                        <span class="nt">&lt;svg</span> <span class="na">fill=</span><span class="s">"none"</span> <span class="na">viewBox=</span><span class="s">"0 0 24 24"</span> <span class="na">height=</span><span class="s">"16"</span> <span class="na">width=</span><span class="s">"16"</span> <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/svg"</span><span class="nt">&gt;</span>

                            <span class="nt">&lt;path</span> <span class="na">fill=</span><span class="s">"#707277"</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2"</span> <span class="na">stroke=</span><span class="s">"#707277"</span> <span class="na">d=</span><span class="s">"M19.4626 3.
                            99415C16.7809 2.34923 14.4404 3.01211 13.0344 4.06801C12.4578 4.50096 12.1696 4.71743 12 4.
                            71743C11.8304 4.71743 11.5422 4.50096 10.9656 4.06801C9.55962 3.01211 7.21909 2.34923 4.
                            53744 3.99415C1.01807 6.15294 0.221721 13.2749 8.33953 19.2834C9.88572 20.4278 10.6588 21 12
                             21C13.3412 21 14.1143 20.4278 15.6605 19.2834C23.7783 13.2749 22.9819 6.15294 19.4626 3.
                             99415Z"</span><span class="nt">&gt;&lt;/path&gt;</span>
                        <span class="nt">&lt;/svg&gt;</span>
                    <span class="nt">&lt;/button&gt;</span>
                    <span class="nt">&lt;hr&gt;</span>
                    <span class="nt">&lt;span&gt;</span>14<span class="nt">&lt;/span&gt;</span>
                <span class="nt">&lt;/div&gt;</span>
                <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"comment-container"</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;div</span> <span class="na">th:classappend=</span><span class="s">"${message.role=='user'} ? 'user' : 'gpt'"</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"user-pic"</span><span class="nt">&gt;</span>
                            <span class="nt">&lt;svg</span> <span class="na">fill=</span><span class="s">"none"</span> <span class="na">viewBox=</span><span class="s">"0 0 24 24"</span> <span class="na">height=</span><span class="s">"20"</span> <span class="na">width=</span><span class="s">"20"</span> <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/
                            svg"</span><span class="nt">&gt;</span>
                                <span class="nt">&lt;path</span> <span class="na">stroke-linejoin=</span><span class="s">"round"</span> <span class="na">fill=</span><span class="s">"#707277"</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2"</span>
                                 <span class="na">stroke=</span><span class="s">"#707277"</span> <span class="na">d=</span><span class="s">"M6.57757 15.4816C5.1628 16.324 1.45336 18.0441 3.71266 20.1966C4.
                                 81631 21.248 6.04549 22 7.59087 22H16.4091C17.9545 22 19.1837 21.248 20.2873 20.1966C22.
                                 5466 18.0441 18.8372 16.324 17.4224 15.4816C14.1048 13.5061 9.89519 13.5061 6.57757 15.
                                 4816Z"</span><span class="nt">&gt;&lt;/path&gt;</span>
                                <span class="nt">&lt;path</span> <span class="na">stroke-width=</span><span class="s">"2"</span> <span class="na">fill=</span><span class="s">"#707277"</span> <span class="na">stroke=</span><span class="s">"#707277"</span> <span class="na">d=</span><span class="s">"M16.5 6.5C16.5 8.98528 14.4853
                                 11 12 11C9.51472 11 7.5 8.98528 7.5 6.5C7.5 4.01472 9.51472 2 12 2C14.4853 2 16.5 4.
                                 01472 16.5 6.5Z"</span><span class="nt">&gt;&lt;/path&gt;</span>
                            <span class="nt">&lt;/svg&gt;</span>
                        <span class="nt">&lt;/div&gt;</span>
                        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"user-info"</span><span class="nt">&gt;</span>
                            <span class="nt">&lt;span</span> <span class="na">th:text=</span><span class="s">"${message.role}"</span><span class="nt">&gt;</span>Yassine Zanina<span class="nt">&lt;/span&gt;</span>
                            <span class="nt">&lt;p&gt;</span>Wednesday, March 13th at 2:45pm<span class="nt">&lt;/p&gt;</span>
                        <span class="nt">&lt;/div&gt;</span>
                    <span class="nt">&lt;/div&gt;</span>
                    <span class="nt">&lt;p</span> <span class="na">th:if=</span><span class="s">"${message.role=='user'}"</span> <span class="na">class=</span><span class="s">"comment-content"</span> <span class="na">style=</span><span class="s">"text-align: left"</span> <span class="na">th:text=</span><span class="s">"$
                    {message.content}"</span><span class="nt">&gt;&lt;/p&gt;</span>
                    <span class="nt">&lt;p</span> <span class="na">th:if=</span><span class="s">"${message.role=='assistant'}"</span> <span class="na">class=</span><span class="s">"comment-content"</span> <span class="na">style=</span><span class="s">"text-align: right"</span> <span class="na">th:text=</span><span class="s">"$
                    {message.content}"</span><span class="nt">&gt;&lt;/p&gt;</span>
                <span class="nt">&lt;/div&gt;</span>
            <span class="nt">&lt;/div&gt;</span>

        <span class="nt">&lt;/div&gt;</span>

        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"text-box"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"box-container"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;textarea</span> <span class="na">id=</span><span class="s">"message-content"</span> <span class="na">placeholder=</span><span class="s">"Reply"</span><span class="nt">&gt;&lt;/textarea&gt;</span>
                <span class="nt">&lt;div&gt;</span>
                    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"formatting"</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span><span class="nt">&gt;</span>
                            <span class="nt">&lt;svg</span> <span class="na">fill=</span><span class="s">"none"</span> <span class="na">viewBox=</span><span class="s">"0 0 24 24"</span> <span class="na">height=</span><span class="s">"16"</span> <span class="na">width=</span><span class="s">"16"</span> <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/
                            svg"</span><span class="nt">&gt;</span>
                                <span class="nt">&lt;path</span> <span class="na">stroke-linejoin=</span><span class="s">"round"</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2.5"</span> <span class="na">stroke=</span><span class="s">"#707277"</span>
                                 <span class="na">d=</span><span class="s">"M5 6C5 4.58579 5 3.87868 5.43934 3.43934C5.87868 3 6.58579 3 8 3H12.5789C15.0206 3
                                  17 5.01472 17 7.5C17 9.98528 15.0206 12 12.5789 12H5V6Z"</span> <span class="na">clip-rule=</span><span class="s">"evenodd"</span>
                                   <span class="na">fill-rule=</span><span class="s">"evenodd"</span><span class="nt">&gt;&lt;/path&gt;</span>
                                <span class="nt">&lt;path</span> <span class="na">stroke-linejoin=</span><span class="s">"round"</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2.5"</span> <span class="na">stroke=</span><span class="s">"#707277"</span>
                                 <span class="na">d=</span><span class="s">"M12.4286 12H13.6667C16.0599 12 18 14.0147 18 16.5C18 18.9853 16.0599 21 13.6667
                                  21H8C6.58579 21 5.87868 21 5.43934 20.5607C5 20.1213 5 19.4142 5 18V12"</span><span class="nt">&gt;&lt;/path&gt;</span>
                            <span class="nt">&lt;/svg&gt;</span>
                        <span class="nt">&lt;/button&gt;</span>
                        <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span><span class="nt">&gt;</span>
                            <span class="nt">&lt;svg</span> <span class="na">fill=</span><span class="s">"none"</span> <span class="na">viewBox=</span><span class="s">"0 0 24 24"</span> <span class="na">height=</span><span class="s">"16"</span> <span class="na">width=</span><span class="s">"16"</span> <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/
                            svg"</span><span class="nt">&gt;</span>
                                <span class="nt">&lt;path</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2.5"</span> <span class="na">stroke=</span><span class="s">"#707277"</span> <span class="na">d=</span><span class="s">"M12 4H19"</span><span class="nt">&gt;&lt;/path&gt;</span>

                                <span class="nt">&lt;path</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2.5"</span> <span class="na">stroke=</span><span class="s">"#707277"</span> <span class="na">d=</span><span class="s">"M8 20L16 4"</span><span class="nt">&gt;&lt;/path&gt;</span>
                                <span class="nt">&lt;path</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2.5"</span> <span class="na">stroke=</span><span class="s">"#707277"</span> <span class="na">d=</span><span class="s">"M5 20H12"</span><span class="nt">&gt;&lt;/path&gt;</span>
                            <span class="nt">&lt;/svg&gt;</span>
                        <span class="nt">&lt;/button&gt;</span>
                        <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span><span class="nt">&gt;</span>
                            <span class="nt">&lt;svg</span> <span class="na">fill=</span><span class="s">"none"</span> <span class="na">viewBox=</span><span class="s">"0 0 24 24"</span> <span class="na">height=</span><span class="s">"16"</span> <span class="na">width=</span><span class="s">"16"</span> <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/
                            svg"</span><span class="nt">&gt;</span>
                                <span class="nt">&lt;path</span> <span class="na">stroke-linejoin=</span><span class="s">"round"</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2.5"</span> <span class="na">stroke=</span><span class="s">"#707277"</span>
                                 <span class="na">d=</span><span class="s">"M5.5 3V11.5C5.5 15.0899 8.41015 18 12 18C15.5899 18 18.5 15.0899 18.5 11.5V3"</span><span class="nt">&gt;&lt;/path&gt;</span>
                            
                                <span class="nt">&lt;path</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2.5"</span> <span class="na">stroke=</span><span class="s">"#707277"</span> <span class="na">d=</span><span class="s">"M3 21H21"</span><span class="nt">&gt;&lt;/path&gt;</span>
                            <span class="nt">&lt;/svg&gt;</span>
                        <span class="nt">&lt;/button&gt;</span>
                        <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span><span class="nt">&gt;</span>
                            <span class="nt">&lt;svg</span> <span class="na">fill=</span><span class="s">"none"</span> <span class="na">viewBox=</span><span class="s">"0 0 24 24"</span> <span class="na">height=</span><span class="s">"16"</span> <span class="na">width=</span><span class="s">"16"</span> <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/
                            svg"</span><span class="nt">&gt;</span>
                                <span class="nt">&lt;path</span> <span class="na">stroke-linejoin=</span><span class="s">"round"</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2.5"</span> <span class="na">stroke=</span><span class="s">"#707277"</span>
                                 <span class="na">d=</span><span class="s">"M4 12H20"</span><span class="nt">&gt;&lt;/path&gt;</span>
                                <span class="nt">&lt;path</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2.5"</span> <span class="na">stroke=</span><span class="s">"#707277"</span> <span class="na">d=</span><span class="s">"M17.5 7.66667C17.5 5.
                                08934 15.0376 3 12 3C8.96243 3 6.5 5.08934 6.5 7.66667C6.5 8.15279 6.55336 8.59783 6.
                                6668 9M6 16.3333C6 18.9107 8.68629 21 12 21C15.3137 21 18 19.6667 18 16.3333C18 13.9404
                                 16.9693 12.5782 14.9079 12"</span><span class="nt">&gt;&lt;/path&gt;</span>
                            <span class="nt">&lt;/svg&gt;</span>
                        <span class="nt">&lt;/button&gt;</span>
                        <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span><span class="nt">&gt;</span>
                            <span class="nt">&lt;svg</span> <span class="na">fill=</span><span class="s">"none"</span> <span class="na">viewBox=</span><span class="s">"0 0 24 24"</span> <span class="na">height=</span><span class="s">"16"</span> <span class="na">width=</span><span class="s">"16"</span> <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/
                            svg"</span><span class="nt">&gt;</span>
                                <span class="nt">&lt;circle</span> <span class="na">stroke-linejoin=</span><span class="s">"round"</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2.5"</span>
                                 <span class="na">stroke=</span><span class="s">"#707277"</span> <span class="na">r=</span><span class="s">"10"</span> <span class="na">cy=</span><span class="s">"12"</span> <span class="na">cx=</span><span class="s">"12"</span><span class="nt">&gt;&lt;/circle&gt;</span>
                                <span class="nt">&lt;path</span> <span class="na">stroke-linejoin=</span><span class="s">"round"</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2.5"</span> <span class="na">stroke=</span><span class="s">"#707277"</span>
                                 <span class="na">d=</span><span class="s">"M8 15C8.91212 16.2144 10.3643 17 12 17C13.6357 17 15.0879 16.2144 16 15"</span><span class="nt">&gt;&lt;/path&gt;</span>
                                <span class="nt">&lt;path</span> <span class="na">stroke-linejoin=</span><span class="s">"round"</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"3"</span> <span class="na">stroke=</span><span class="s">"#707277"</span>
                                 <span class="na">d=</span><span class="s">"M8.00897 9L8 9M16 9L15.991 9"</span><span class="nt">&gt;&lt;/path&gt;</span>
                            <span class="nt">&lt;/svg&gt;</span>
                        <span class="nt">&lt;/button&gt;</span>
                        <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"send"</span> <span class="na">title=</span><span class="s">"Send"</span> <span class="na">id=</span><span class="s">"send-message"</span> <span class="na">onclick=</span><span class="s">"sendMessage()"</span><span class="nt">&gt;</span>
                            <span class="nt">&lt;svg</span> <span class="na">fill=</span><span class="s">"none"</span> <span class="na">viewBox=</span><span class="s">"0 0 24 24"</span> <span class="na">height=</span><span class="s">"18"</span> <span class="na">width=</span><span class="s">"18"</span> <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/
                            svg"</span><span class="nt">&gt;</span>
                                <span class="nt">&lt;path</span> <span class="na">stroke-linejoin=</span><span class="s">"round"</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2.5"</span> <span class="na">stroke=</span><span class="s">"#ffffff"</span>
                                 <span class="na">d=</span><span class="s">"M12 5L12 20"</span><span class="nt">&gt;&lt;/path&gt;</span>
                                <span class="nt">&lt;path</span> <span class="na">stroke-linejoin=</span><span class="s">"round"</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2.5"</span> <span class="na">stroke=</span><span class="s">"#ffffff"</span>
                                 <span class="na">d=</span><span class="s">"M7 9L11.2929 4.70711C11.6262 4.37377 11.7929 4.20711 12 4.20711C12.2071 4.20711 12.
                                 3738 4.37377 12.7071 4.70711L17 9"</span><span class="nt">&gt;&lt;/path&gt;</span>
                            <span class="nt">&lt;/svg&gt;</span>
                        <span class="nt">&lt;/button&gt;</span>
                    <span class="nt">&lt;/div&gt;</span>
                <span class="nt">&lt;/div&gt;</span>
            <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>


</code></pre></div></div>

<p>일단 위 컴포넌트는 다른 사람이 작성한 코드를 참고했는데, 글자 크기가 너무 작긴 한것 같지만…
여기서</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">class=</span><span class="s">"nav-link text-white"</span> <span class="na">style=</span><span class="s">"background: none; border: none; padding: 0;"</span>
 <span class="na">onclick=</span><span class="s">"createNewChat()"</span><span class="nt">&gt;</span>
    
</code></pre></div></div>

<p>createNewChat() 함수는 새로운 챗 페이지를 생성하는 함수고,</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"send"</span> <span class="na">title=</span><span class="s">"Send"</span> <span class="na">id=</span><span class="s">"send-message"</span> <span class="na">onclick=</span><span class="s">"sendMessage()"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>sendMessage() 함수는 메시지를 보내는 함수이다. 
타임리프 템플릿을 이용해서 버튼을 누르거나 할 때마다 페이지 자체를 리로드하는 방식도 있겠지만, 
그런 방식은 성능이 떨어지기 때문에 이런 식으로 구현했다.</p>

<p>타임리프 템플릿은 처음 페이지를 로드할 때만 이용된다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"nav nav-pills flex-column mb-auto"</span> <span class="na">id=</span><span class="s">"chatList"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- 기존 채팅 목록 표시 --&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"nav-item"</span> <span class="na">th:each=</span><span class="s">"chat : ${chats}"</span> <span class="na">style=</span><span class="s">"padding: 5px"</span> <span class="na">th:onclick=</span><span class="s">"'drawChat(' + ${chat.id} + ')'"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"#"</span> <span class="na">class=</span><span class="s">"nav-link active"</span> <span class="na">th:text=</span><span class="s">"'채팅 ' + ${chat.id}"</span> <span class="na">aria-current=</span><span class="s">"page"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;svg</span> <span class="na">class=</span><span class="s">"bi pe-none me-2"</span> <span class="na">width=</span><span class="s">"16"</span> <span class="na">height=</span><span class="s">"16"</span><span class="nt">&gt;&lt;use</span> <span class="na">xlink:href=</span><span class="s">"#home"</span><span class="nt">&gt;&lt;/use&gt;&lt;/svg&gt;</span>
            <span class="nt">&lt;span</span> <span class="na">th:text=</span><span class="s">"'채팅 ' + ${chat.id}"</span><span class="nt">&gt;</span>채팅 ID<span class="nt">&lt;/span&gt;</span>
        <span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span>

</code></pre></div></div>

<p>이는 기존 채팅 목록을 표시하는 부분이다. 채팅 목록을 클릭하면 drawChat() 함수가 호출되고, 이는 해당 채팅 목록을 그리는 함수이다.</p>

<h4 id="chattingjs">Chatting.js</h4>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">function</span> <span class="nf">createNewChat</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Ajax POST 요청으로 새 채팅 생성</span>
    <span class="nf">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">/chat/new</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span>
    <span class="p">}).</span><span class="nf">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">ok</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// 새 채팅이 생성되면 채팅 목록을 다시 불러오는 함수 호출</span>
            <span class="nf">updateChatList</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">));</span>
<span class="p">}</span>

<span class="c1">// 채팅 목록을 새로 불러오는 함수</span>
<span class="kd">function</span> <span class="nf">updateChatList</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">/chat</span><span class="dl">'</span><span class="p">)</span>  <span class="c1">// 채팅 목록을 불러올 API 엔드포인트</span>
        <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>  <span class="c1">// JSON 응답을 파싱</span>
        <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">chatList</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">chatList</span><span class="dl">'</span><span class="p">);</span>
            <span class="nx">chatList</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>  <span class="c1">// 기존 채팅 목록 초기화</span>

            <span class="c1">// 불러온 데이터를 바탕으로 채팅 목록을 다시 렌더링</span>
            <span class="nx">data</span><span class="p">.</span><span class="nf">forEach</span><span class="p">(</span><span class="nx">chat</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="kd">const</span> <span class="nx">li</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">li</span><span class="dl">'</span><span class="p">);</span>
                <span class="nx">li</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="dl">'</span><span class="s1">nav-item</span><span class="dl">'</span><span class="p">);</span>
                <span class="nx">li</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">padding</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">5px</span><span class="dl">'</span><span class="p">;</span>

                <span class="nx">li</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">`
                    &lt;a href="#" class="nav-link active" aria-current="page"&gt;
                        &lt;svg class="bi pe-none me-2" width="16" height="16"&gt;&lt;use xlink:href="#home"&gt;&lt;/use&gt;&lt;/svg&gt;
                        채팅 </span><span class="p">${</span><span class="nx">chat</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="s2">
                    &lt;/a&gt;
                `</span><span class="p">;</span>
                <span class="nx">chatList</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">li</span><span class="p">);</span>  <span class="c1">// 새로 만든 항목을 목록에 추가</span>
            <span class="p">});</span>
        <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">));</span>
<span class="p">}</span>

</code></pre></div></div>

<h4 id="messagejs">message.js</h4>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">async</span> <span class="kd">function</span> <span class="nf">sendMessage</span><span class="p">()</span> <span class="p">{</span>

    <span class="kd">const</span> <span class="nx">chatId</span> <span class="o">=</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nf">getItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">chatId</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">content</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">message-content</span><span class="dl">'</span><span class="p">).</span><span class="nx">value</span><span class="p">;</span>

    <span class="kd">const</span> <span class="nx">sendedMessage</span> <span class="o">=</span> <span class="nf">createMessage</span><span class="p">({</span><span class="na">role</span><span class="p">:</span> <span class="dl">'</span><span class="s1">user</span><span class="dl">'</span><span class="p">,</span> <span class="na">content</span><span class="p">:</span> <span class="nx">content</span><span class="p">});</span>
    <span class="kd">const</span> <span class="nx">chatBox</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">message-box</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">chatBox</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">sendedMessage</span><span class="p">);</span>

    <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">/chat/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">chatId</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
            <span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="na">body</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">stringify</span><span class="p">({</span><span class="na">content</span><span class="p">:</span> <span class="nx">content</span><span class="p">}),</span>
    <span class="p">});</span>
    <span class="kd">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">recievedMessage</span> <span class="o">=</span> <span class="nf">createMessage</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>

    <span class="nx">chatBox</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">recievedMessage</span><span class="p">);</span>

<span class="p">}</span>

<span class="kd">function</span> <span class="nf">createMessage</span><span class="p">(</span><span class="nx">messageData</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">div</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">message</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="dl">'</span><span class="s1">comments</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">message</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">`
            &lt;div class="comment-react"&gt;
                &lt;button&gt;
                    &lt;svg fill="none" viewBox="0 0 24 24" height="16" width="16" xmlns="http://www.w3.org/2000/svg"&gt;
                        &lt;path fill="#707277" stroke-linecap="round" stroke-width="2" stroke="#707277" d="M19.4626 3.
                        99415C16.7809 2.34923 14.4404 3.01211 13.0344 4.06801C12.4578 4.50096 12.1696 4.71743 12 4.
                        71743C11.8304 4.71743 11.5422 4.50096 10.9656 4.06801C9.55962 3.01211 7.21909 2.34923 4.53744 3.
                        99415C1.01807 6.15294 0.221721 13.2749 8.33953 19.2834C9.88572 20.4278 10.6588 21 12 21C13.3412
                         21 14.1143 20.4278 15.6605 19.2834C23.7783 13.2749 22.9819 6.15294 19.4626 3.99415Z"&gt;&lt;/path&gt;
                    &lt;/svg&gt;
                &lt;/button&gt;
                &lt;hr&gt;
                &lt;span&gt;14&lt;/span&gt;
            &lt;/div&gt;
                &lt;div class="comment-container"&gt;
                    &lt;div class="</span><span class="p">${</span><span class="nx">messageData</span><span class="p">.</span><span class="nx">role</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">user</span><span class="dl">'</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">user</span><span class="dl">'</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">gpt</span><span class="dl">'</span><span class="p">}</span><span class="s2">"&gt;
                        &lt;div class="user-pic"&gt;
                            &lt;svg fill="none" viewBox="0 0 24 24" height="20" width="20" xmlns="http://www.w3.org/2000/
                            svg"&gt;
                                &lt;path stroke-linejoin="round" fill="#707277" stroke-linecap="round" stroke-width="2"
                                 stroke="#707277" d="M6.57757 15.4816C5.1628 16.324 1.45336 18.0441 3.71266 20.1966C4.
                                 81631 21.248 6.04549 22 7.59087 22H16.4091C17.9545 22 19.1837 21.248 20.2873 20.1966C22.
                                 5466 18.0441 18.8372 16.324 17.4224 15.4816C14.1048 13.5061 9.89519 13.5061 6.57757 15.
                                 4816Z"&gt;&lt;/path&gt;
                                &lt;path stroke-width="2" fill="#707277" stroke="#707277" d="M16.5 6.5C16.5 8.98528 14.4853
                                 11 12 11C9.51472 11 7.5 8.98528 7.5 6.5C7.5 4.01472 9.51472 2 12 2C14.4853 2 16.5 4.
                                 01472 16.5 6.5Z"&gt;&lt;/path&gt;
                            &lt;/svg&gt;
                        &lt;/div&gt;
                        &lt;div class="user-info"&gt;
                            &lt;span&gt;</span><span class="p">${</span><span class="nx">messageData</span><span class="p">.</span><span class="nx">role</span><span class="p">}</span><span class="s2">&lt;/span&gt;
                            &lt;p&gt;Wednesday, March 13th at 2:45pm&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                    &lt;p class="comment-content" style="text-align: </span><span class="p">${</span><span class="nx">messageData</span><span class="p">.</span><span class="nx">role</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">user</span><span class="dl">'</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">left</span><span class="dl">'</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">right</span><span class="dl">'</span><span class="p">}</span><span class="s2">"&gt;
                        </span><span class="p">${</span><span class="nx">messageData</span><span class="p">.</span><span class="nx">content</span><span class="p">}</span><span class="s2">
                    &lt;/p&gt;
                    
                &lt;/div&gt;
        `</span><span class="p">;</span>

    <span class="k">return</span> <span class="nx">message</span><span class="p">;</span>
    
<span class="p">}</span>

<span class="k">async</span> <span class="kd">function</span> <span class="nf">drawChat</span><span class="p">(</span><span class="nx">chatId</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">localStorage</span><span class="p">.</span><span class="nf">setItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">chatId</span><span class="dl">'</span><span class="p">,</span> <span class="nx">chatId</span><span class="p">);</span>

    <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">/chat/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">chatId</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">chat</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">messages</span> <span class="o">=</span> <span class="nx">chat</span><span class="p">.</span><span class="nx">messages</span><span class="p">;</span>

    <span class="kd">const</span> <span class="nx">chatBox</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">message-box</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">chatBox</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>

    <span class="nx">messages</span><span class="p">.</span><span class="nf">forEach</span><span class="p">(</span><span class="nx">messageData</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">div</span><span class="dl">'</span><span class="p">);</span>
        <span class="nx">message</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="dl">'</span><span class="s1">comments</span><span class="dl">'</span><span class="p">);</span>
        <span class="nx">message</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">`
            &lt;div class="comment-react"&gt;
                &lt;button&gt;
                    &lt;svg fill="none" viewBox="0 0 24 24" height="16" width="16" xmlns="http://www.w3.org/2000/svg"&gt;
                        &lt;path fill="#707277" stroke-linecap="round" stroke-width="2" stroke="#707277" d="M19.4626 3.
                        99415C16.7809 2.34923 14.4404 3.01211 13.0344 4.06801C12.4578 4.50096 12.1696 4.71743 12 4.
                        71743C11.8304 4.71743 11.5422 4.50096 10.9656 4.06801C9.55962 3.01211 7.21909 2.34923 4.53744 3.
                        99415C1.01807 6.15294 0.221721 13.2749 8.33953 19.2834C9.88572 20.4278 10.6588 21 12 21C13.3412
                         21 14.1143 20.4278 15.6605 19.2834C23.7783 13.2749 22.9819 6.15294 19.4626 3.99415Z"&gt;&lt;/path&gt;
                    &lt;/svg&gt;
                &lt;/button&gt;
                &lt;hr&gt;
                &lt;span&gt;14&lt;/span&gt;
            &lt;/div&gt;
                &lt;div class="comment-container"&gt;
                    &lt;div class="</span><span class="p">${</span><span class="nx">messageData</span><span class="p">.</span><span class="nx">role</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">user</span><span class="dl">'</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">user</span><span class="dl">'</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">gpt</span><span class="dl">'</span><span class="p">}</span><span class="s2">"&gt;
                        &lt;div class="user-pic"&gt;
                            &lt;svg fill="none" viewBox="0 0 24 24" height="20" width="20" xmlns="http://www.w3.org/2000/
                            svg"&gt;
                                &lt;path stroke-linejoin="round" fill="#707277" stroke-linecap="round" stroke-width="2"
                                 stroke="#707277" d="M6.57757 15.4816C5.1628 16.324 1.45336 18.0441 3.71266 20.1966C4.
                                 81631 21.248 6.04549 22 7.59087 22H16.4091C17.9545 22 19.1837 21.248 20.2873 20.1966C22.
                                 5466 18.0441 18.8372 16.324 17.4224 15.4816C14.1048 13.5061 9.89519 13.5061 6.57757 15.
                                 4816Z"&gt;&lt;/path&gt;
                                &lt;path stroke-width="2" fill="#707277" stroke="#707277" d="M16.5 6.5C16.5 8.98528 14.4853
                                 11 12 11C9.51472 11 7.5 8.98528 7.5 6.5C7.5 4.01472 9.51472 2 12 2C14.4853 2 16.5 4.
                                 01472 16.5 6.5Z"&gt;&lt;/path&gt;
                            &lt;/svg&gt;
                        &lt;/div&gt;
                        &lt;div class="user-info"&gt;
                            &lt;span&gt;</span><span class="p">${</span><span class="nx">messageData</span><span class="p">.</span><span class="nx">role</span><span class="p">}</span><span class="s2">&lt;/span&gt;
                            &lt;p&gt;Wednesday, March 13th at 2:45pm&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                    &lt;p class="comment-content" style="text-align: </span><span class="p">${</span><span class="nx">messageData</span><span class="p">.</span><span class="nx">role</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">user</span><span class="dl">'</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">left</span><span class="dl">'</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">right</span><span class="dl">'</span><span class="p">}</span><span class="s2">"&gt;
                        </span><span class="p">${</span><span class="nx">messageData</span><span class="p">.</span><span class="nx">content</span><span class="p">}</span><span class="s2">
                    &lt;/p&gt;
                    
                &lt;/div&gt;
        `</span><span class="p">;</span>
        <span class="nx">chatBox</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>솔직히 이렇게 할거면 그냥 리액트 쓸걸 그랬다. 그게 더 편리했을 것 같기도 하고…
아무튼, 이렇게 구현하면 페이지 자체를 리로드하지 않고도 메시지를 추가할 수 있다.</p>

<p>코드를 읽어보면 이해하겠지만, 챗 목록을 클릭하면 drawChat() 함수가 호출되고, 이 함수는 해당 챗의 메시지를 그리는 함수이다.
각각의 메시지는 createMessage() 함수를 통해 그려지는데, 이 함수는 메시지의 역할과 내용을 받아서 메시지를 그린다.</p>

<h3 id="마치며">마치며</h3>

<p>만약 실행이 안되거나 오류가 있으면 내가 작성한 테스트 코드를 
<a href="https://github.com/Ash-tensor/simple-gpt-page">https://github.com/Ash-tensor/simple-gpt-page</a> 에서 확인할 수 있다.</p>

<p>그럼 안녕!!</p>]]></content><author><name>ash tensor</name></author><category term="WEB" /><category term="JAVA" /><summary type="html"><![CDATA[[WEB][Spring] 스프링으로 간단한 Chat-GPT 페이지 구현하기 - 2]]></summary></entry><entry><title type="html">[WEB][react] Chat-gpt realtime api 구현 및 설명</title><link href="http://localhost:4000/web/react/2024/10/15/openai-realtime.html" rel="alternate" type="text/html" title="[WEB][react] Chat-gpt realtime api 구현 및 설명" /><published>2024-10-15T00:00:00+09:00</published><updated>2024-10-15T00:00:00+09:00</updated><id>http://localhost:4000/web/react/2024/10/15/openai-realtime</id><content type="html" xml:base="http://localhost:4000/web/react/2024/10/15/openai-realtime.html"><![CDATA[<h2 id="webreact-chat-gpt-realtime-api-구현-및-설명">[WEB][react] Chat-gpt realtime api 구현 및 설명</h2>

<h3 id="1-서론">1. 서론</h3>

<p>한 몇달 쯤 전인가? OpenAI에서 GPT앱을 출시하면서 엄청 대단한 기능으로 화제가 된 적이 있다.
실시간으로 카메라를 통해서 풍경을 이해하고, 음성을 실시간으로 이해하고 어조및 어투가 정말 사람같으며 사람의 농담을 제대로 이해하는 등
한국 언론은 물론이고 전세계적으로도 엄청난 화제가 되었는데.</p>

<p><img src="/img/posts/react/realtime/1.png" width="80%" /></p>

<p>마지 영화의 HER에서 나오는 AI와 비슷한 느낌이 든다고 화제였었다. 그리고 스칼렛 요한슨 목소리이냐 아니냐로 논란이 있었는데,
Open AI는 해당 API를 공개하지 않고 있었다. 지금까지 OpenAI의 음성인식은 whisper라고 하는 음성인식 api였는데, 이는 실시간과는 거리가 멀고,
음성파일을 집어 넣으면 텍스트로 변환해 주거나 하는 기능이었다.</p>

<p>하지만 10월에 들어서 OpenAI에서 realtime API를 일반 개발자들도 사용할 수 있게 공개했는데, 해당 기능으로 실시간으로 마이크를 통해서 
음성을 인식하는 기능을 구현할 수 있게 되었다.</p>

<p>이를 한번 구현해 보았는데 한국어로 된 자료도 없고, 영어로 된 자료도 마찬가지로 적어서 어디서 오류가 나는지 찾는데 어려움이 있었다.
그래서 이번 포스트에서는 해당 기능을 간단하게 구현하고, 설명하고자 한다.</p>

<h3 id="2-구현-예제">2. 구현 예제</h3>

<p><img src="/img/posts/react/realtime/2.png" width="80%" /></p>

<p>자세한 API 문서는 <a href="https://platform.openai.com/docs/guides/realtime">OpenAI API</a>을 참고하면 된다. 
하지만 해당 문서만 가지고 실제 구현해 보기는 어려워서 Open-AI에서 제공한 예제를 참고해서 구현해 보았다.</p>

<p><img src="/img/posts/react/realtime/3.png" width="80%" /></p>

<p>내가 구현한 예제는 <a href="https://github.com/Ash-tensor/realtime-api">VAD 예시</a>를 참고하면 된다. 
해당 예제는 Open AI에서 제공한 예제를 기반으로 하고 있는데, API를 이해하면서 VAD를 구현하는데 실제 필요하지 않은 기능들을 덜어내고 
VAD(Voice Activity Detection), 
즉 앞서 뉴스에서 봤던 것처럼 따로 음성을 올리거나, 아니면 말할때 호출어를 부르거나 버튼을 눌러서 구현하는 게 아니라, 
마이크를 통해서 실시간으로 음성을 인식하는 기능만을 구현해 놓은 예시이다.</p>

<p>Open ai 예제는 다양한 tool과 map 등, event를 다루는 기능들이 많아 한번에 이해하기 어려웠기 때문에 한번 구현해 보았다.</p>

<h3 id="3-설명">3. 설명</h3>

<h4 id="상태-변수">상태 변수</h4>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">export</span> <span class="kd">function</span> <span class="nf">ConsolePage</span><span class="p">()</span> <span class="p">{</span>

    <span class="c1">// API 키 설정</span>
    <span class="kd">const</span> <span class="nx">apiKey</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">본인 API 키</span><span class="dl">"</span>

    <span class="c1">// Ref 초기화</span>
    <span class="kd">const</span> <span class="nx">wavRecorderRef</span> <span class="o">=</span> <span class="nx">useRef</span><span class="o">&lt;</span><span class="nx">WavRecorder</span><span class="o">&gt;</span><span class="p">(</span>
        <span class="k">new</span> <span class="nc">WavRecorder</span><span class="p">({</span> <span class="na">sampleRate</span><span class="p">:</span> <span class="mi">24000</span> <span class="p">})</span>
    <span class="p">);</span>
    <span class="kd">const</span> <span class="nx">wavStreamPlayerRef</span> <span class="o">=</span> <span class="nx">useRef</span><span class="o">&lt;</span><span class="nx">WavStreamPlayer</span><span class="o">&gt;</span><span class="p">(</span>
        <span class="k">new</span> <span class="nc">WavStreamPlayer</span><span class="p">({</span> <span class="na">sampleRate</span><span class="p">:</span> <span class="mi">24000</span> <span class="p">})</span>
    <span class="p">);</span>
    <span class="kd">const</span> <span class="nx">clientRef</span> <span class="o">=</span> <span class="nx">useRef</span><span class="o">&lt;</span><span class="nx">RealtimeClient</span><span class="o">&gt;</span><span class="p">(</span>
        <span class="k">new</span> <span class="nc">RealtimeClient</span><span class="p">(</span>
            <span class="p">{</span>
                <span class="na">apiKey</span><span class="p">:</span> <span class="nx">apiKey</span><span class="p">,</span>
                <span class="na">dangerouslyAllowAPIKeyInBrowser</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="p">}</span>
        <span class="p">)</span>
    <span class="p">);</span>

    <span class="kd">const</span> <span class="p">[</span><span class="nx">realtimeEvents</span><span class="p">,</span> <span class="nx">setRealtimeEvents</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="nx">RealtimeEvent</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">([]);</span> <span class="c1">// vad만 구현하고자 하면 필요없음</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">expandedEvents</span><span class="p">,</span> <span class="nx">setExpandedEvents</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="p">{</span>  <span class="c1">// vad만 구현하고자 하면 필요없음</span>
        <span class="p">[</span><span class="na">key</span><span class="p">:</span> <span class="kr">string</span><span class="p">]:</span> <span class="nx">boolean</span><span class="p">;</span>
    <span class="p">}</span><span class="o">&gt;</span><span class="p">({});</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">items</span><span class="p">,</span> <span class="nx">setItems</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="nx">ItemType</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">([]);</span>
    
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">items</code>: 모든 대화 항목을 저장하는 배열.</li>
  <li><code class="language-plaintext highlighter-rouge">realtimeEvents</code>: 확장 가능한 이벤트 로그를 저장하는 배열.</li>
  <li><code class="language-plaintext highlighter-rouge">expandedEvents</code>: 각 이벤트의 확장 상태를 저장하는 객체.</li>
</ul>

<p>단순히 vad만을 구현하고자 하면 realtimeEvents 및 expandedEvents는 필요 없다.
items에 존재하는 대화 항목을 wavStreamPlayer 를 이용해서 음성으로 재생하는 구조이다.</p>

<h4 id="대화-연결-함수">대화 연결 함수</h4>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cm">/**
   * 대화 연결 함수
   */</span>
  <span class="kd">const</span> <span class="nx">connectConversation</span> <span class="o">=</span> <span class="nf">useCallback</span><span class="p">(</span><span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">clientRef</span><span class="p">.</span><span class="nx">current</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">wavRecorder</span> <span class="o">=</span> <span class="nx">wavRecorderRef</span><span class="p">.</span><span class="nx">current</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">wavStreamPlayer</span> <span class="o">=</span> <span class="nx">wavStreamPlayerRef</span><span class="p">.</span><span class="nx">current</span><span class="p">;</span>

    <span class="nf">setItems</span><span class="p">(</span><span class="nx">client</span><span class="p">.</span><span class="nx">conversation</span><span class="p">.</span><span class="nf">getItems</span><span class="p">());</span>

    <span class="k">if </span><span class="p">(</span><span class="nx">wavRecorder</span><span class="p">.</span><span class="nf">getStatus</span><span class="p">()</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">recording</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">await</span> <span class="nx">wavRecorder</span><span class="p">.</span><span class="nf">pause</span><span class="p">();</span> <span class="c1">// 또는 await wavRecorder.stop();</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">connectConversation</span><span class="dl">'</span><span class="p">,</span> <span class="nx">wavRecorder</span><span class="p">.</span><span class="nf">getStatus</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">await</span> <span class="nx">wavRecorder</span><span class="p">.</span><span class="nf">begin</span><span class="p">();</span>

    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">connectConversation : wavRecorder begin</span><span class="dl">'</span><span class="p">,</span> <span class="nx">wavRecorder</span><span class="p">.</span><span class="nf">getStatus</span><span class="p">());</span>

    <span class="k">await</span> <span class="nx">wavStreamPlayer</span><span class="p">.</span><span class="nf">connect</span><span class="p">();</span>
    <span class="k">await</span> <span class="nx">client</span><span class="p">.</span><span class="nf">connect</span><span class="p">();</span>

    <span class="nx">client</span><span class="p">.</span><span class="nf">updateSession</span><span class="p">({</span>
      <span class="na">turn_detection</span><span class="p">:</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">server_vad</span><span class="dl">'</span> <span class="p">},</span> <span class="c1">// VAD 활성화</span>
      <span class="na">input_audio_transcription</span><span class="p">:</span> <span class="p">{</span> <span class="na">model</span><span class="p">:</span> <span class="dl">'</span><span class="s1">whisper-1</span><span class="dl">'</span> <span class="p">},</span>
    <span class="p">});</span>

    <span class="c1">// 기본 인사 메시지 전송</span>
    <span class="nx">client</span><span class="p">.</span><span class="nf">sendUserMessageContent</span><span class="p">([</span>
      <span class="p">{</span>
        <span class="na">type</span><span class="p">:</span> <span class="s2">`input_text`</span><span class="p">,</span>
        <span class="na">text</span><span class="p">:</span> <span class="s2">`Hello!`</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">]);</span>

    <span class="k">if </span><span class="p">(</span><span class="nx">client</span><span class="p">.</span><span class="nf">getTurnDetectionType</span><span class="p">()</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">server_vad</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span> <span class="dl">'</span><span class="s1">wavRecorder.getStatus()</span><span class="dl">'</span> <span class="p">,</span><span class="nx">wavRecorder</span><span class="p">.</span><span class="nf">getStatus</span><span class="p">());</span>
      <span class="k">await</span> <span class="nx">wavRecorder</span><span class="p">.</span><span class="nf">record</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">client</span><span class="p">.</span><span class="nf">appendInputAudio</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">mono</span><span class="p">));</span>
    <span class="p">}</span>
  <span class="p">},</span> <span class="p">[]);</span>

</code></pre></div></div>

<p>여기서 중요한 게 client.updateSession 함수인데, 여기서 대부분의 세션 설정이 이루어진다.
중요한 옵션을 나열하자면</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">modalities</code>: 텍스트로 설정할 건지 음성으로 설정할 건지. [“audio”, “text”] 중 하나를 선택한다.</li>
  <li><code class="language-plaintext highlighter-rouge">tools</code>: chat completion에도 있는 함수 호출(미리 gpt가 해야할 특정 행동을 정의해놓고 그 행동을 호출하면 gpt가 해당 행동을 수행하게 하는 것)</li>
  <li><code class="language-plaintext highlighter-rouge">turn_detection</code>: VAD 활성화 또는 비활성화</li>
  <li><code class="language-plaintext highlighter-rouge">instruction</code>: <strong>시스템 설정 메시지</strong></li>
</ul>

<p>이 중에서 <code class="language-plaintext highlighter-rouge">instruction</code>은 꽤 중요한데, 이는 시스템 설정 메시지를 의미한다. 예전 gpt chat completion 에서 시스템 메시지를 보내는 것과 같은 역할을 한다.</p>

<h5 id="instructionts">instruction.ts</h5>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">instructions</span> <span class="o">=</span> <span class="s2">`System settings:
Tool use: enabled.

Instructions:
- You are an artificial intelligence agent responsible for helping test realtime voice capabilities
- Please make sure to respond with a helpful voice via audio
- Be kind, helpful, and curteous
- It is okay to ask the user questions
- Use tools and functions you have available liberally, it is part of the training apparatus
- Be open to exploration and conversation
- Remember: this is just for fun and testing!

Personality:
- Be upbeat and genuine
- Try speaking quickly as if excited
  `</span><span class="p">;</span>

</code></pre></div></div>

<p>이 메시지는 open ai가 설정했던 시스템 메시지로</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    <span class="nx">client</span><span class="p">.</span><span class="nf">updateSession</span><span class="p">({</span> <span class="na">instructions</span><span class="p">:</span> <span class="nx">instructions</span> <span class="p">});</span>

</code></pre></div></div>
<p>이런 식으로 open ai는 instruction을 설정했었다. 물론 그냥 string으로 박아도 괜찮다.</p>

<h4 id="useeffect">useEffect</h4>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
  <span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">connectConversation</span><span class="p">();</span>
  <span class="p">},</span> <span class="p">[]);</span>

  <span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">wavStreamPlayer</span> <span class="o">=</span> <span class="nx">wavStreamPlayerRef</span><span class="p">.</span><span class="nx">current</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">clientRef</span><span class="p">.</span><span class="nx">current</span><span class="p">;</span>
   
    <span class="nx">client</span><span class="p">.</span><span class="nf">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">conversation.updated</span><span class="dl">'</span><span class="p">,</span> <span class="k">async </span><span class="p">({</span> <span class="nx">item</span><span class="p">,</span> <span class="nx">delta</span> <span class="p">}:</span> <span class="kr">any</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">items</span> <span class="o">=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">conversation</span><span class="p">.</span><span class="nf">getItems</span><span class="p">();</span>
      <span class="k">if </span><span class="p">(</span><span class="nx">delta</span><span class="p">?.</span><span class="nx">audio</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">wavStreamPlayer</span><span class="p">.</span><span class="nf">add16BitPCM</span><span class="p">(</span><span class="nx">delta</span><span class="p">.</span><span class="nx">audio</span><span class="p">,</span> <span class="nx">item</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">if </span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">completed</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">formatted</span><span class="p">.</span><span class="nx">audio</span><span class="p">?.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">wavFile</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">WavRecorder</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span>
          <span class="nx">item</span><span class="p">.</span><span class="nx">formatted</span><span class="p">.</span><span class="nx">audio</span><span class="p">,</span>
          <span class="mi">24000</span><span class="p">,</span>
          <span class="mi">24000</span>
        <span class="p">);</span>
        <span class="nx">item</span><span class="p">.</span><span class="nx">formatted</span><span class="p">.</span><span class="nx">file</span> <span class="o">=</span> <span class="nx">wavFile</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="nf">setItems</span><span class="p">(</span><span class="nx">items</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="nf">setItems</span><span class="p">(</span><span class="nx">client</span><span class="p">.</span><span class="nx">conversation</span><span class="p">.</span><span class="nf">getItems</span><span class="p">());</span>

    <span class="k">return </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="c1">// cleanup; resets to defaults</span>
      <span class="nx">client</span><span class="p">.</span><span class="nf">reset</span><span class="p">();</span>
    <span class="p">};</span>
  <span class="p">},</span> <span class="p">[]);</span>

</code></pre></div></div>

<p>useEffect에서 connectConversation을 호출하고, conversation.updated 이벤트를 등록한다.
즉 realtime api는 conversation.updated 이벤트를 통해서 텍스트 데이터를 받아오고, 이를 wavStreamPlayer를 통해서 음성으로 재생하는 구조이다.</p>

<h4 id="세션-종료-함수">세션 종료 함수</h4>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
  <span class="kd">const</span> <span class="nx">disconnectConversation</span> <span class="o">=</span> <span class="nf">useCallback</span><span class="p">(</span><span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">clientRef</span><span class="p">.</span><span class="nx">current</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">wavRecorder</span> <span class="o">=</span> <span class="nx">wavRecorderRef</span><span class="p">.</span><span class="nx">current</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">wavStreamPlayer</span> <span class="o">=</span> <span class="nx">wavStreamPlayerRef</span><span class="p">.</span><span class="nx">current</span><span class="p">;</span>

    <span class="nx">client</span><span class="p">.</span><span class="nf">disconnect</span><span class="p">();</span>
    <span class="k">await</span> <span class="nx">wavRecorder</span><span class="p">.</span><span class="nf">end</span><span class="p">();</span>
    <span class="k">await</span> <span class="nx">wavStreamPlayer</span><span class="p">.</span><span class="nf">interrupt</span><span class="p">();</span>
  <span class="p">},</span> <span class="p">[]);</span>

</code></pre></div></div>

<h3 id="4-트러블-슈팅">4. 트러블 슈팅</h3>

<p>일단 위의 코드를 보면서 느꼈겠지만</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">// 이 부분이다.</span>
<span class="k">if </span><span class="p">(</span><span class="nx">wavRecorder</span><span class="p">.</span><span class="nf">getStatus</span><span class="p">()</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">recording</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">await</span> <span class="nx">wavRecorder</span><span class="p">.</span><span class="nf">pause</span><span class="p">();</span> <span class="c1">// 또는 await wavRecorder.stop();</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">connectConversation</span><span class="dl">'</span><span class="p">,</span> <span class="nx">wavRecorder</span><span class="p">.</span><span class="nf">getStatus</span><span class="p">());</span>
<span class="p">}</span>

</code></pre></div></div>
<p>위 부분은 트러블 슈팅을 하던 때의 흔적이다. 
wavRecorder.getStatus()가 recording이 아닌데 자꾸 이런 오류가 발생했다.</p>

<blockquote>
  <p>wav_recorder.js:438 Uncaught (in promise) Error: Already recording: please call .pause() first 
at WavRecorder.record (wav_recorder.js:438:1)
at ConsolePage.tsx:75:1</p>
</blockquote>

<p>이 오류는 strict mode에서 발생하는 오류로, strict mode를 해제하면 오류가 발생하지 않는다.
두 번 호출하기 때문에 상태 관리에서 오류가 있었던 것 같다.</p>

<p>별 것 아닌 오류였지만 은근 떠올리는데 몇시간 걸렸기도 하고, 인터넷에서 검색해도 이런 오류가 나는 사람도 없었기 때문에
이런 오류가 나면 strict mode를 한번 해제하고 해보길 바란다.</p>

<h3 id="5-결론">5. 결론</h3>

<p>이번 포스트에서는 OpenAI에서 제공하는 실시간 API를 이용해서 실시간으로 음성을 인식하는 기능을 구현해 보았다.
또한 더 구체적인 예제는 <a href="https://github.com/openai/openai-realtime-console">Open AI 예제</a>를 참고하면 된다.</p>

<p><strong>근데 realtime api 엄청 비싸다!!!! 농담 안하고 안녕? 반가워, 너 내 한국어 이해해? 이 정도 대화만 하는데 1.3달러 정도 과금한다ㅋㅋㅋ</strong>
솔직히 너무 비싸서 현업에서는 못쓰지 않을까 생각한다.</p>]]></content><author><name>ash tensor</name></author><category term="WEB" /><category term="REACT" /><summary type="html"><![CDATA[[WEB][react] Chat-gpt realtime api 구현 및 설명]]></summary></entry><entry><title type="html">[WEB][Spring] 스프링으로 Chat-GPT 기능 구현하기 - 1</title><link href="http://localhost:4000/web/java/2024/09/30/spring-gpt-backend.html" rel="alternate" type="text/html" title="[WEB][Spring] 스프링으로 Chat-GPT 기능 구현하기 - 1" /><published>2024-09-30T00:00:00+09:00</published><updated>2024-09-30T00:00:00+09:00</updated><id>http://localhost:4000/web/java/2024/09/30/spring-gpt-backend</id><content type="html" xml:base="http://localhost:4000/web/java/2024/09/30/spring-gpt-backend.html"><![CDATA[<h2 id="webspring-스프링으로-간단한-chat-gpt-페이지-구현하기---1">[WEB][Spring] 스프링으로 간단한 Chat-GPT 페이지 구현하기 - 1</h2>

<h3 id="1-서론">1. 서론</h3>

<p><img src="/img/posts/spring/gpt/1.png" width="80%" /></p>

<p>개인적으로 진행했던 프로젝트에서 스프링에 GPT-4o API를 이용해 현재 상황을 분석하고 앞으로의 전략을 제시하는 기능을 구현했었는데,
이번에는 GPT-4o API를 이용해서 간단한 채팅 페이지를 구현해 보고자 한다. 간단한 completion 기능을 이용하고자 한다면 굳이 구독하지는 않아도 
되지 않을까 싶기도 하고 스프링도 손에 익어서 몇 시간이면 구현이 가능할 것 같아서 완성해 보았다.</p>

<p>약 2일 정도 걸렸고 대부분은 프론트엔드에서 걸린 시간이 많았다. 
아직 불완전한 부분이 있긴 하지만 충분히 사용할만한 수준으로, 챗GPT 페이지와 유사한 형태의 채팅 페이지를 구현했다.</p>

<h3 id="2-api-요청-방법">2. API 요청 방법</h3>

<p>일단 OpenAI API를 사용하기 위해서는 API Key가 필요하다. 이는 OpenAi 홈페이지에서 계정을 만들고 API Key를 발급받으면 된다.
또한 OpenAI API를 사용하기 위해서는 요청을 보낼 때, JSON 형식으로 데이터를 보내야 한다.
이 JSON 형식은 다음과 같은데</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"model"</span><span class="p">:</span><span class="w"> </span><span class="s2">"요청 모델 명 (ex. gpt-3.5-turbo)"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"messages"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"role"</span><span class="p">:</span><span class="w"> </span><span class="s2">"user"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"content"</span><span class="p">:</span><span class="w"> </span><span class="s2">"사용자가 입력한 메시지"</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"role"</span><span class="p">:</span><span class="w"> </span><span class="s2">"assistant"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"content"</span><span class="p">:</span><span class="w"> </span><span class="s2">"사용자가 입력한 메시지에 대한 응답"</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>하나의 챗 페이지에서 대화한 내용을 GPT에 보낼 때 위와 같은 형식으로 보내야 한다.</p>

<p>보면 눈치채겠지만, <strong>GPT의 입력은 하나의 챗 페이지에서 대화한 메시지를 모두 다 입력으로 보낸다!!</strong></p>

<p>이는 GPT가 한번의 챗 페이지에서 대화한 내용을 계속 반복해서 입력받는다는 뜻이다. 이를 모르는 사람들이 꽤 있었는데,
다시 말하면 결국 하나의 대화가 길어지면 길어질수록 GPT의 맥락이 점점 한정되어서 성능이 떨어지게 된다. 
생각할 공간이 줄어드는 것과 비슷하다.</p>

<p>또한 토큰에서도 불이익이 있는데 이는 GPT가 한번에 처리할 수 있는 토큰의 수가 제한되어 있기 때문이다. 예를 들어서, GPT-3.5-turbo의 경우 4096개의 토큰을 처리할 수 있다.
게다가 GPT의 과금에 있어서, OpenAI는 1000개의 토큰을 처리할 때마다 일정량의 과금을 받는데, 한번의 대화가 길어지면 길어질수록 이전 대화의 메시지가 계속 입력되어서
보다 떨어지는 성능인데도 불구하고 더 많은 과금이 발생하게 된다.</p>

<p>그러니까 한번의 챗 페이지에서 대화를 길게 이어 나가는 것보다는, 짧은 대화를 여러 번 반복하는 것이 좋다.
한번의 대화에서 꼭 고맥락이 필요한 게 아니라면 성능상의 이점은 물론이고 과금적인 측면에서도 대화가 길어지면 길어질수록
더 많은 불이익이 발생하게 된다.</p>

<p>아무튼, 이러한 GPT의 입력 형식을 알았으니, 이제 이를 스프링에서 어떻게 구현할지 알아보자.</p>

<h3 id="2-configuration-파일">2. Configuration 파일</h3>

<p>인터넷에서 찾은 대부분의 코드는 WebClient를 사용한 것이 아니라 RestTemplate을 사용한 코드가 많았다.
하지만, RestTemplate은 더 이상 사용되지 않는다고 하니 WebClient를 사용해서 구현해 보았다.</p>

<h4 id="openaiconfigjava">OpenAIConfig.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">com.chatgptspring.config</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.JsonNode</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.ObjectMapper</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.node.ObjectNode</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.reactive.function.client.WebClient</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OpenAIConfig</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${openai.api.key}"</span><span class="o">)</span> <span class="c1">// application.properties에 저장된 openai.api.key를 불러온다.</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">openAiKey</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">WebClient</span> <span class="nf">webClient</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">WebClient</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">baseUrl</span><span class="o">(</span><span class="s">"https://api.openai.com"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">defaultHeader</span><span class="o">(</span><span class="s">"Authorization"</span><span class="o">,</span> <span class="s">"Bearer "</span> <span class="o">+</span> <span class="n">openAiKey</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
    
    <span class="c1">// ObjectMapper 빈 등록</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">ObjectMapper</span> <span class="nf">objectMapper</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ObjectMapper</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h4 id="applicationproperties">application.properties</h4>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="py">spring.application.name</span><span class="p">=</span><span class="s">chatgpt-spring</span>

<span class="py">spring.mvc.static-path-pattern</span><span class="p">=</span><span class="s">/static/**</span>
<span class="py">spring.thymeleaf.prefix</span><span class="p">=</span><span class="s">classpath:/templates/</span>
<span class="py">spring.thymeleaf.suffix</span><span class="p">=</span><span class="s">.html</span>

<span class="py">openai.api.key</span><span class="p">=</span> <span class="s">본인 키파일</span>

<span class="py">spring.datasource.url</span><span class="p">=</span><span class="s">본인 DB 호스트</span>
<span class="py">spring.datasource.username</span><span class="p">=</span><span class="s">본인 DB 유저</span>
<span class="py">spring.datasource.password</span><span class="p">=</span><span class="s">본인 DB 비밀번호</span>

</code></pre></div></div>

<p>이렇게 설정을 하면 OpenAIConfig 파일에서 WebClient를 빈으로 등록하고, application.properties에서 OpenAI API Key를 불러와서 사용할 수 있다.
DB 설정은 본인의 DB에 맞게 설정하면 된다. 나는 MariaDB를 사용했다.
이정도는 스프링을 사용하면서 자주 사용하는 설정이니까 크게 어렵지 않을 것이다. DB에 저장하지 않고, GPT의 응답만 받아서 사용하고 싶다면 DB 설정은 필요없다.</p>

<h3 id="3-domain-파일">3. Domain 파일</h3>

<p>여기에는 DB와 연결되는 엔티티 클래스를 정의한다. 만약 단순히 GPT를 이용해서 응답을 받는 기능을 스프링에 탑재하고자 한다면 이 부분은 필요없이 DTO만 작성하면 된다.
아무튼 나는 Chat-gpt 페이지와 유사한 형태의 채팅 페이지를 직접 구현해 보고자 했기 때문에 엔티티 클래스를 작성했다.</p>

<h4 id="chatjava">Chat.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">com.chatgptspring.domain</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.annotation.JsonManagedReference</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">jakarta.persistence.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Getter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Setter</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="nd">@Getter</span> <span class="nd">@Setter</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"chat"</span><span class="o">)</span>
<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Chat</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"user_id"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">User</span> <span class="n">user</span><span class="o">;</span>

    <span class="nd">@OneToMany</span><span class="o">(</span><span class="n">mappedBy</span> <span class="o">=</span> <span class="s">"chat"</span><span class="o">)</span>
    <span class="nd">@JsonManagedReference</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Message</span><span class="o">&gt;</span> <span class="n">messages</span><span class="o">;</span>

<span class="o">}</span>

</code></pre></div></div>

<p>이는 앞서 말했던 것처럼 Chat 페이지와 유사한 형태의 채팅 페이지를 구현하기 위한 엔티티 클래스이다. 챗은 맥락을 가지고 있는 메시지의 집합이라고 생각하면 된다.
흔히 이용하는 GPT 페이지에서 한 번의 챗 페이지에 해당한다.
어떤 유저의 채팅인지와 메시지의 리스트를 가지고 있다.</p>

<h4 id="messagejava">Message.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">com.chatgptspring.domain</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.annotation.JsonBackReference</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.annotation.JsonManagedReference</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">jakarta.persistence.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Getter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Setter</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>

<span class="nd">@Getter</span> <span class="nd">@Setter</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"message"</span><span class="o">)</span>
<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Message</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">role</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">length</span> <span class="o">=</span> <span class="mi">10000</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">content</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"chat_id"</span><span class="o">)</span>
    <span class="nd">@JsonBackReference</span>
    <span class="kd">private</span> <span class="nc">Chat</span> <span class="n">chat</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">Integer</span> <span class="n">tokenCount</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">model</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Date</span> <span class="n">datetime</span><span class="o">;</span>
<span class="o">}</span>

</code></pre></div></div>

<p>메시지는 챗의 메시지이다. 메시지는 역할, 내용, 토큰 수, 모델, 날짜를 가지고 있다. 역할은 사용자인지 GPT인지를 나타내고, 내용은 메시지의 내용을 나타낸다.
토큰 수는 GPT가 처리한 토큰의 총합을 나타내는데 보낸 메시지의 토큰 수와 받은 메시지의 토큰 수를 합한 값이다. 이게 조금 이상하다고 생각할 수 있지만,
어차피 Open-ai에서 과금을 계산할 때 보낸 메시지의 토큰 수, 받은 메시지의 토큰 수를 합해 계산하기 때문에 상관이 없기도 하고,</p>

<p>보낸 메시지의 한국어 토큰 계산은 결국 response를 받아야만 알 수 있기 때문에 이렇게 구현했다.</p>

<h4 id="userjava">User.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">com.chatgptspring.domain</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">jakarta.persistence.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Getter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.RequiredArgsConstructor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Setter</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="nd">@Getter</span> <span class="nd">@Setter</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"user"</span><span class="o">)</span>
<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>

    <span class="nd">@OneToMany</span><span class="o">(</span><span class="n">mappedBy</span> <span class="o">=</span> <span class="s">"user"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Chat</span><span class="o">&gt;</span> <span class="n">chats</span><span class="o">;</span>

<span class="o">}</span>

</code></pre></div></div>

<h3 id="4-repository-파일">4. Repository 파일</h3>

<p>빠른 개발을 위해서 필요한 부분만 간단히 작성했다. 성능이 나쁠수도 있다. 
DB설정이 안되어 있거나 DB에 저장하지 않고, GPT의 응답만 받아서 사용하고 싶다면 이 부분은 필요없다.</p>

<h4 id="chatrepositoryjava">ChatRepository.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">com.chatgptspring.repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.chatgptspring.domain.Chat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.JpaRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Repository</span><span class="o">;</span>

<span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ChatRepository</span> <span class="kd">extends</span> <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="nc">Chat</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>
<span class="o">}</span>

</code></pre></div></div>

<h4 id="messagerepositoryjava">MessageRepository.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">com.chatgptspring.repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.chatgptspring.domain.Message</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.JpaRepository</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MessageRepository</span> <span class="kd">extends</span> <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="nc">Message</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>
<span class="o">}</span>

</code></pre></div></div>

<h4 id="userrepositoryjava">UserRepository.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">com.chatgptspring.repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.chatgptspring.domain.User</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.JpaRepository</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserRepository</span> <span class="kd">extends</span> <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="5-dto-파일">5. DTO 파일</h3>

<h4 id="chatdtojava">ChatDto.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">dto</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.Data</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="nd">@Data</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChatDTO</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">model</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">MessageDTO</span><span class="o">&gt;</span> <span class="n">messages</span><span class="o">;</span>
<span class="o">}</span>

</code></pre></div></div>

<p>이 DTO는 GPT의 입력 형식과 동일하게 구성되어 있다. 즉, 단순히 페이지를 저장하거나 하고 싶지 않다면 해당 DTO만 작성해도 된다. 이를 JSON 형식으로 파싱해서 GPT에 보낼 것이다.</p>

<h4 id="messagedtojava">MessageDTO.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">dto</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.Data</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>

<span class="nd">@Data</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessageDTO</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">role</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">content</span><span class="o">;</span>
<span class="o">}</span>

</code></pre></div></div>

<p>role은 사용자인지 GPT인지를 나타내고, content는 메시지의 내용을 나타낸다. role의 경우 사용자의 메시지는 user, GPT의 응답은 assistant로 고정되어 있어서 다른 값을 넣으면 Bad Request가 발생한다.
<strong>system 롤이 있는데, 이는 해당 대화(Chat)의 GPT의 전반적인 맥락과 규칙을 지시하는 역할을 하고, 보통 가장 먼저 보내는 메시지에 사용된다.</strong>
assistant role은 사용자의 메시지에 대한 응답을 나타낸다. 이것 외에는 오류가 발생한다.
예를 들어서 해당 GPT를 카페의 점원으로 사용하고자 할 때 system role을 이용해서 “너는 카페의 점원이야”라는 메시지를 먼저 보내고, 그 다음에 사용자의 메시지를 보내는 식이다.</p>

<h3 id="6-service-파일">6. Service 파일</h3>

<h4 id="chatservicejava">ChatService.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">com.chatgptspring.service</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.chatgptspring.domain.Chat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.chatgptspring.repository.ChatRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.RequiredArgsConstructor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>

<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChatService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ChatRepository</span> <span class="n">chatRepository</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">Chat</span> <span class="nf">CreateChat</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Chat</span> <span class="n">chat</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Chat</span><span class="o">();</span>
        <span class="n">chatRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">chat</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">chat</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Iterable</span><span class="o">&lt;</span><span class="nc">Chat</span><span class="o">&gt;</span> <span class="nf">FindAllChats</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">chatRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">DeleteChat</span><span class="o">(</span><span class="nc">Long</span> <span class="n">chatId</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">chatRepository</span><span class="o">.</span><span class="na">deleteById</span><span class="o">(</span><span class="n">chatId</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Chat</span> <span class="nf">FindChatById</span><span class="o">(</span><span class="nc">Long</span> <span class="n">chatId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">chatRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">chatId</span><span class="o">).</span><span class="na">orElse</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<h4 id="messageservicejava">MessageService.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">com.chatgptspring.service</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.chatgptspring.domain.Chat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.chatgptspring.domain.Message</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.chatgptspring.repository.MessageRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.JsonNode</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.ObjectMapper</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">dto.ChatDTO</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">dto.MessageDTO</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.netty.handler.codec.http.HttpResponseStatus</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.RequiredArgsConstructor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.reactive.function.client.WebClient</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessageService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ChatService</span> <span class="n">chatService</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MessageRepository</span> <span class="n">messageRepository</span><span class="o">;</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">WebClient</span> <span class="n">webClient</span><span class="o">;</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">ObjectMapper</span> <span class="n">objectMapper</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">Message</span> <span class="nf">SendMessage</span><span class="o">(</span><span class="nc">Long</span> <span class="n">chatId</span><span class="o">,</span> <span class="nc">String</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Chat</span> <span class="n">chat</span> <span class="o">=</span> <span class="n">chatService</span><span class="o">.</span><span class="na">FindChatById</span><span class="o">(</span><span class="n">chatId</span><span class="o">);</span>
        <span class="nc">Message</span> <span class="n">message</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Message</span><span class="o">();</span>
        <span class="n">message</span><span class="o">.</span><span class="na">setChat</span><span class="o">(</span><span class="n">chat</span><span class="o">);</span>
        <span class="n">message</span><span class="o">.</span><span class="na">setRole</span><span class="o">(</span><span class="s">"user"</span><span class="o">);</span>
        <span class="n">message</span><span class="o">.</span><span class="na">setContent</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>
        <span class="n">messageRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>

        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Message</span><span class="o">&gt;</span> <span class="n">messages</span> <span class="o">=</span> <span class="n">chat</span><span class="o">.</span><span class="na">getMessages</span><span class="o">();</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">MessageDTO</span><span class="o">&gt;</span> <span class="n">messageDTOs</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Message</span> <span class="n">m</span> <span class="o">:</span> <span class="n">messages</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">MessageDTO</span> <span class="n">messageDTO</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MessageDTO</span><span class="o">();</span>
            <span class="n">messageDTO</span><span class="o">.</span><span class="na">setRole</span><span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">getRole</span><span class="o">());</span>
            <span class="n">messageDTO</span><span class="o">.</span><span class="na">setContent</span><span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">getContent</span><span class="o">());</span>
            <span class="n">messageDTOs</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">messageDTO</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nc">ChatDTO</span> <span class="n">chatDTO</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ChatDTO</span><span class="o">();</span>
        <span class="n">chatDTO</span><span class="o">.</span><span class="na">setMessages</span><span class="o">(</span><span class="n">messageDTOs</span><span class="o">);</span>
        <span class="n">chatDTO</span><span class="o">.</span><span class="na">setModel</span><span class="o">(</span><span class="s">"gpt-3.5-turbo"</span><span class="o">);</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">response</span> <span class="o">=</span> <span class="n">webClient</span><span class="o">.</span><span class="na">post</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">uri</span><span class="o">(</span><span class="s">"https://api.openai.com/v1/chat/completions"</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">bodyValue</span><span class="o">(</span><span class="n">chatDTO</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">retrieve</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">bodyToMono</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">block</span><span class="o">();</span>

            <span class="nc">JsonNode</span> <span class="n">root</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readTree</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>
            <span class="nc">String</span> <span class="n">assistantContent</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="na">path</span><span class="o">(</span><span class="s">"choices"</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">path</span><span class="o">(</span><span class="s">"message"</span><span class="o">).</span><span class="na">path</span><span class="o">(</span><span class="s">"content"</span><span class="o">).</span><span class="na">asText</span><span class="o">();</span>
            <span class="nc">Integer</span> <span class="n">totalTokens</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="na">path</span><span class="o">(</span><span class="s">"usage"</span><span class="o">).</span><span class="na">path</span><span class="o">(</span><span class="s">"total_tokens"</span><span class="o">).</span><span class="na">asInt</span><span class="o">();</span>

            <span class="nc">Message</span> <span class="n">responseMessage</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Message</span><span class="o">();</span>

            <span class="n">responseMessage</span><span class="o">.</span><span class="na">setChat</span><span class="o">(</span><span class="n">chat</span><span class="o">);</span>
            <span class="n">responseMessage</span><span class="o">.</span><span class="na">setModel</span><span class="o">(</span><span class="n">chatDTO</span><span class="o">.</span><span class="na">getModel</span><span class="o">());</span>
            <span class="n">responseMessage</span><span class="o">.</span><span class="na">setRole</span><span class="o">(</span><span class="s">"assistant"</span><span class="o">);</span>
            <span class="n">responseMessage</span><span class="o">.</span><span class="na">setContent</span><span class="o">(</span><span class="n">assistantContent</span><span class="o">);</span>
            <span class="n">responseMessage</span><span class="o">.</span><span class="na">setTokenCount</span><span class="o">(</span><span class="n">totalTokens</span><span class="o">);</span>
            <span class="n">messageRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">responseMessage</span><span class="o">);</span>
            <span class="k">return</span> <span class="n">responseMessage</span><span class="o">;</span>

        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>일단 빠른 테스트를 위해서 model을 고정시켰다. 필요하다면 이를 동적으로 변경하면 된다. 앞서 작성한 DTO 파일과 도메인을 이용해서 GPT에 요청을 보내고, 응답을 받아서 DB에 저장한다.
만약 도메인 저장이 필요가 없다면 해당 부분을 삭제하면 된다.</p>

<p>Configuration 파일에서 빈으로 등록했던 ObjectMapper를 이용해서 JSON 형식의 응답을 파싱한다.</p>

<h3 id="7-controller-파일">7. Controller 파일</h3>

<h4 id="chatcontrollerjava">ChatController.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">com.chatgptspring.controller</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.chatgptspring.domain.Chat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.chatgptspring.repository.ChatRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.chatgptspring.service.ChatService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.RequiredArgsConstructor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>

<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChatController</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ChatService</span> <span class="n">chatService</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/chat"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Iterable</span><span class="o">&lt;</span><span class="nc">Chat</span><span class="o">&gt;</span> <span class="nf">FindAllChats</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">chatService</span><span class="o">.</span><span class="na">FindAllChats</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/chat/new"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">CreateChat</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">chatService</span><span class="o">.</span><span class="na">CreateChat</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/chat/{chatId}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Chat</span> <span class="nf">FindChatById</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="nc">Long</span> <span class="n">chatId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">chatService</span><span class="o">.</span><span class="na">FindChatById</span><span class="o">(</span><span class="n">chatId</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h4 id="messagecontrollerjava">MessageController.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">com.chatgptspring.controller</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.chatgptspring.domain.Message</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.chatgptspring.service.ChatService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.chatgptspring.service.MessageService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">dto.ChatDTO</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">dto.MessageDTO</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.RequiredArgsConstructor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>


<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessageController</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ChatService</span> <span class="n">chatService</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MessageService</span> <span class="n">messageService</span><span class="o">;</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/chat/{chatId}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Message</span> <span class="nf">CreateMessage</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="nc">Long</span> <span class="n">chatId</span><span class="o">,</span> <span class="nd">@RequestBody</span> <span class="nc">MessageDTO</span> <span class="n">messageDTO</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">messageContent</span> <span class="o">=</span> <span class="n">messageDTO</span><span class="o">.</span><span class="na">getContent</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">messageService</span><span class="o">.</span><span class="na">SendMessage</span><span class="o">(</span><span class="n">chatId</span><span class="o">,</span> <span class="n">messageContent</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<h3 id="8-테스트">8. 테스트</h3>

<p>이제 Postman을 이용해서 테스트를 해보자. 먼저 챗을 생성하고, 챗의 id를 이용해서 메시지를 보내면 된다.</p>

<h4 id="chat-생성">Chat 생성</h4>

<p><img src="/img/posts/spring/gpt/2.png" width="90%" /></p>

<h4 id="메시지-보내기">메시지 보내기</h4>

<p><img src="/img/posts/spring/gpt/3.png" width="90%" />
<img src="/img/posts/spring/gpt/4.png" width="90%" /></p>

<p>간단한 시를 써보라고 했는데,</p>

<blockquote>
  <blockquote>
    <p>가을밤에 별빛이 찬란하고, 너의 손을 잡으면 행복해지는 마법 같아.</p>
  </blockquote>
</blockquote>

<p>라고 시를 작성해 주었다.</p>

<p>꽤나 문학적인걸, GPT.</p>

<h3 id="9-마치며">9. 마치며</h3>

<p>아직 백엔드가 완벽히 구현된 것은 아니다. 이를 이용해서 사용자 인증도 구현해야 하고, 더 많은 기능을 추가해야 한다.
프론트엔드와 연결하는 부분은 다음 포스트에서 다루도록 하겠다.</p>]]></content><author><name>ash tensor</name></author><category term="WEB" /><category term="JAVA" /><summary type="html"><![CDATA[[WEB][Spring] 스프링으로 간단한 Chat-GPT 페이지 구현하기 - 1]]></summary></entry><entry><title type="html">[WEB][Spring] 스프링 N + 1 문제</title><link href="http://localhost:4000/web/java/2024/08/26/spring-n-plus-1-problem.html" rel="alternate" type="text/html" title="[WEB][Spring] 스프링 N + 1 문제" /><published>2024-08-26T00:00:00+09:00</published><updated>2024-08-26T00:00:00+09:00</updated><id>http://localhost:4000/web/java/2024/08/26/spring-n-plus-1-problem</id><content type="html" xml:base="http://localhost:4000/web/java/2024/08/26/spring-n-plus-1-problem.html"><![CDATA[<h2 id="webspring-스프링-n--1-문제">[WEB][Spring] 스프링 N + 1 문제</h2>

<h3 id="1-서론">1. 서론</h3>

<p><img src="/img/posts/spring/1.png" width="80%" /></p>

<p>프로젝트를 진행 중에, 스프링에서 N + 1 문제가 발생했다. 현재 사진에서 보이는 것과 같이, 쿼리 시간이 약 30초 씩이나 걸리는 문제가 있었는데 
과거에 했던 프로젝트에서 해당 문제가 N+1 문제 때문에 발생한다는 것을 이미 알고 있었기 때문에 트러블 슈팅에 어려움을 겪지는 않았지만,
이번에 문제를 해결하면서 다시 한 번 정리해 보고자 했다.</p>

<p><img src="/img/posts/spring/2.png" width="80%" /></p>

<p>이는 해당 N + 1 문제를 해결한 뒤에 나온 API 테스트 결과이다. 30초에 달하던 쿼리 시간이 1.7초로 줄어든 것을 볼 수 있다.</p>

<h3 id="2-배경">2. 배경</h3>

<p><img src="/img/posts/spring/3.png" width="80%" /></p>

<p>문제가 되는 테이블은 다음과 같았다. (테이블 설계나 구조, 그리고 네이밍 컨벤션등이 이상하다고 지적한다면, 부끄럽지만 맞다. 
하지만, 이는 이미 구축된 시스템을 수정하는 과정에서 이미 데이터가 저장된 테이블 구조를 바꾸기 어려워서 그대로 사용하게 되었다.)
아무튼, 구조를 살펴보자면</p>

<ol>
  <li>주문을 저장하는 orders 라는 테이블이 존재하고</li>
  <li>각각 주문의 상세 내역을 저장하는 orderitem 라는 테이블이 존재한다. 그리고 이 테이블은 orders 테이블과 1:N 관계를 가지고 있다.
orderItem 테이블은 orders 테이블의 id를 참조하는 외래키를 가지고 있다. 
하지만 orderitem 테이블은 orders 테이블의 id를 참조하는 외래키를 가지고 있지 않다.</li>
</ol>

<p>이를 스프링 JPA로 구현하면 다음과 같다.</p>

<h4 id="orderjava">Order.java</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">jakarta.persistence.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Getter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Setter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.time.LocalDateTime</span><span class="o">;</span>

<span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"orders"</span><span class="o">)</span>
<span class="nd">@Getter</span> <span class="nd">@Setter</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Order</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span><span class="o">(</span><span class="n">fetch</span> <span class="o">=</span> <span class="nc">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">,</span> <span class="n">optional</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"customerID"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Customer</span> <span class="n">customer</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span><span class="o">(</span><span class="n">fetch</span> <span class="o">=</span> <span class="nc">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">,</span> <span class="n">optional</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"kioskID"</span><span class="o">,</span> <span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Kiosk</span> <span class="n">kiosk</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"date_time"</span><span class="o">,</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">LocalDateTime</span> <span class="n">dateTime</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"total_price"</span><span class="o">,</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">totalPrice</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"is_packaged"</span><span class="o">,</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">isPackaged</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"payment_uid"</span><span class="o">,</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">paymentUid</span><span class="o">;</span>

    <span class="c1">// 결제 환불을 위한 join</span>
    <span class="nd">@OneToOne</span><span class="o">(</span><span class="n">cascade</span> <span class="o">=</span> <span class="nc">CascadeType</span><span class="o">.</span><span class="na">REMOVE</span><span class="o">)</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"order_module_dto"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">OrderModuleDTO</span> <span class="n">orderModuleDTO</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="orderitemjava">OrderItem.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.annotation.JsonIgnoreProperties</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">jakarta.persistence.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Getter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Setter</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.math.BigDecimal</span><span class="o">;</span>

<span class="nd">@Entity</span>
<span class="nd">@Getter</span> <span class="nd">@Setter</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"orderitem"</span><span class="o">)</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderItem</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"orderID"</span><span class="o">,</span> <span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Order</span> <span class="n">order</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"menuID"</span><span class="o">,</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Menu</span> <span class="n">menu</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"custom_optionID"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">CustomOption</span> <span class="n">customOption</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kt">int</span> <span class="n">quantity</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="nc">Long</span> <span class="n">price</span><span class="o">;</span>

<span class="o">}</span>

</code></pre></div></div>

<ol>
  <li>여기서 ordermoduledto 라는 테이블이 존재하는데, 이 테이블은 orders 테이블과 1:1 관계를 가지고 있다.
ordermoduledto 테이블은 orders 테이블의 id를 참조하는 외래키를 가지고 있다.</li>
</ol>

<h3 id="3-문제-발생">3. 문제 발생</h3>

<p>그리고 문제가 발생했는데, order_complete를 이용해서 완료되지 않은 orders를 가져오는 API를 만들었는데,
이 API를 호출하면서 orders 테이블을 찾고, 그 과정에서 orders와 연결된 ordermoduledto 테이블을 추가적으로 찾는 N + 1 이 발생했고,
또 다시 orderitem 테이블을 쿼리하면서 약 30초간 쿼리 시간이 걸리는 문제가 발생했다.</p>

<p>다행히도, orderitem 테이블을 쿼리할 때는 N + 1 문제가 발생하지 않았다. 그 이유는 orderitem 테이블이 orders 테이블과 연결되어 있지만 
캐시되어 있기 때문이다.</p>

<h3 id="4-문제-해결">4. 문제 해결</h3>

<p>이 문제를 해결하기 위해서 일단 나는 <em>패치 조인</em>을 이용해서 해결했다.</p>

<h4 id="ordercompleterepositoryjava">OrderCompleteRepository.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">ac.su.kiosk.domain.OrderComplete</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">jakarta.transaction.Transactional</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.JpaRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.Modifying</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.Query</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">OrderCompleteRepository</span> <span class="kd">extends</span> <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="nc">OrderComplete</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">OrderComplete</span><span class="o">&gt;</span> <span class="nf">findAllByOrderId</span><span class="o">(</span><span class="nc">Long</span> <span class="n">orderId</span><span class="o">);</span>

    <span class="nd">@Transactional</span>
    <span class="nd">@Modifying</span>
    <span class="nd">@Query</span><span class="o">(</span><span class="s">"update OrderComplete oc set oc.complete = true where oc.id = :id"</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">updateById</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">);</span>

    <span class="nd">@Query</span><span class="o">(</span><span class="s">"select "</span> <span class="o">+</span>
            <span class="s">"oc from OrderComplete oc "</span> <span class="o">+</span>
            <span class="s">"JOIN FETCH oc.order o "</span> <span class="o">+</span>
            <span class="s">"JOIN FETCH o.orderModuleDTO omd "</span> <span class="o">+</span>
            <span class="s">"where oc.complete = :target"</span><span class="o">)</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">OrderComplete</span><span class="o">&gt;</span> <span class="nf">findAllByComplete</span><span class="o">(</span><span class="nc">Boolean</span> <span class="n">target</span><span class="o">);</span>

</code></pre></div></div>

<ol>
  <li>
    <p>처음에는 OrderComplete와 Order 테이블을 패치해 봤는데, 35초에 달하는 쿼리 속도가 약 28초 정도로 줄긴 했지만, 여전히 느리다.
그리고 ordermoduledto 테이블을 패치해 봤는데, 이 결과 약 1.7초로 줄어들어서 문제가 해결되었다.</p>
  </li>
  <li>
    <p><strong>Where in</strong> 을 이용해서 해결했는데, 이건 직접적으로 N + 1 쿼리를 줄이는 것은 아니지만,
이미 존재하던 코드의 방식으로는 select * from orderitem where orderID = ? 이런 식으로 쿼리를 날리는데,
이걸 where in을 이용해서 select * from orderitem where orderID in (?,?,?,…) 이런 식으로 쿼리를 날리는 방식으로 변경했다.
이는 타 프로젝트에서 쿼리 시간을 개선할 때 가장 큰 효과를 보았던 방식이다.</p>
  </li>
  <li>
    <p>그리고 <strong>batch size</strong>를 50으로 설정했는데, 프로젝트가 크지 않아서 이 정도의 배치 사이즈로도 큰 효과를 보았다.</p>
  </li>
</ol>

<h3 id="5-패치-조인">5. 패치 조인</h3>

<p>일단 패치 조인을 이용할 때, 내가 신경쓰였던 점은 List<OrderComplete> findAllByComplete(Boolean target); 이 메소드에서
리턴해야 할 객체가 List<OrderComplete> 인데,</OrderComplete></OrderComplete></p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    <span class="nv">"select "</span> <span class="o">+</span>
            <span class="nv">"oc from OrderComplete oc "</span> <span class="o">+</span>
            <span class="nv">"JOIN FETCH oc.order o "</span> <span class="o">+</span>
            <span class="nv">"JOIN FETCH o.orderModuleDTO omd "</span> <span class="o">+</span>
            <span class="nv">"where oc.complete = :target"</span>
            
</code></pre></div></div>

<p>이런 식으로 패치 조인을 이용하면 List<OrderComplete> 가 아닌 List&lt;Object[]&gt; 가 리턴될 수 있지 않을까? 라는 걱정이었다.
왜냐면 결과가 OrderComplete, Order, OrderModuleDTO 세 개의 객체가 조인된 객체가 리턴되기 때문이다.</OrderComplete></p>

<p>하지만 이런 걱정은 굳이 할 필요가 없었다. 스프링 JPA는 이런 경우에도 List<OrderComplete> 가 리턴된다.</OrderComplete></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>즉, JPQL 쿼리에서 

select oc from OrderComplete oc... 

와 같이 특정 엔티티를 선택하면, 
결과는 List&lt;OrderComplete&gt;로 반환되고, 이 경우 JPA는 OrderComplete 객체를 생성하고 
패치 조인으로 로드된 관련 엔티티(Order와 OrderModuleDTO)는 해당 객체의 필드에 자동으로 매핑된다.
</code></pre></div></div>

<p>그리고, 이번에 공부할 수 있었던 건, <strong>OrderComplete와 Order와는 연결되어 있지만, OrderModuleDTO는 연결되어 있지 않아도
패치 조인을 이용해서 Order를 타고 Order에 연결되어 있는 OrderModuleDTO를 가져올 수 있었다는 점이다.</strong></p>

<h3 id="6-마치며">6. 마치며</h3>

<p>N + 1 매핑을 해결하는 다양한 방법중에, 패치 조인을 이용한 방법을 정리해 보았다. 엔티티 그래프나 그 외의 
다양한 방법들이 존재하지만 과거에 이 방법을 사용했을 때 가장 효과적이었기 때문에 이 방법을 사용했고,
엔티티 그래프나 그 외의 방법들도 한 번 정리해 보고 싶다.</p>]]></content><author><name>ash tensor</name></author><category term="WEB" /><category term="JAVA" /><summary type="html"><![CDATA[[WEB][Spring] 스프링 N + 1 문제]]></summary></entry><entry><title type="html">[WEB][AWS] AWS Rekognition Face Detection Spring Boot 설정</title><link href="http://localhost:4000/web/java/2024/08/22/aws-rekognition-spring-setup.html" rel="alternate" type="text/html" title="[WEB][AWS] AWS Rekognition Face Detection Spring Boot 설정" /><published>2024-08-22T00:00:00+09:00</published><updated>2024-08-22T00:00:00+09:00</updated><id>http://localhost:4000/web/java/2024/08/22/aws-rekognition-spring-setup</id><content type="html" xml:base="http://localhost:4000/web/java/2024/08/22/aws-rekognition-spring-setup.html"><![CDATA[<h2 id="webaws-aws-rekognition-face-detection-spring-boot-설정">[WEB][AWS] AWS Rekognition Face Detection Spring Boot 설정</h2>

<h3 id="1-서론">1. 서론</h3>

<p>흔히 인터넷에서 많이 본 기능중에, 사진을 업로드하면 해당 사진 속의 얼굴을 인식하여 박스를 그리고, 얼굴의 감정 및 나이, 특징등을 
분석해서 보여주는 사진을 많이 보았을 것이다. 뜬금 없는 사진에서 역겨움이나 놀람, 행복 등으로 웃음을 주는 밈들을 생각해 보면 바로 떠올릴 수 있을 것이다.
…이런 식으로</p>

<p><img src="/img/posts/aws_face_rekognition/1.jpeg" width="80%" /></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
    </span><span class="nl">"faceDetails"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"boundingBox"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"width"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.38674828</span><span class="p">,</span><span class="w">
                </span><span class="nl">"height"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.37040558</span><span class="p">,</span><span class="w">
                </span><span class="nl">"left"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.30599424</span><span class="p">,</span><span class="w">
                </span><span class="nl">"top"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.19806679</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"ageRange"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"low"</span><span class="p">:</span><span class="w"> </span><span class="mi">20</span><span class="p">,</span><span class="w">
                </span><span class="nl">"high"</span><span class="p">:</span><span class="w"> </span><span class="mi">26</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"smile"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
                </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">99.86501</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"eyeglasses"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
                </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">99.99978</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"sunglasses"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
                </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">99.95743</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"gender"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">57.465927</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"beard"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
                </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">98.73258</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"mustache"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
                </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">99.56685</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"eyesOpen"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
                </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">99.998924</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"mouthOpen"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
                </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">99.27673</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"emotions"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CALM"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">100.0</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SAD"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.009685755</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CONFUSED"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.0065863132</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"DISGUSTED"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.0038862228</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ANGRY"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.003117323</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"HAPPY"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.0012536843</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SURPRISED"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">8.2701445E-4</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"FEAR"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">2.2947788E-4</span><span class="w">
                </span><span class="p">}</span><span class="w">
            </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p>일단 내 정장 사진을 입은 모습으로 테스트해 본 결과인데 나이는 20세에서 26세 정도로 나오고, 
웃음이 없고 안경을 썼으며, 남자로 판단하고, 수염은 없다고 판단하고, 눈은 떠있고, 입은 닫혀있으며, 감정은 차분하다고 판단했다.
혹시 몰라서 다른 사진으로도 테스트 해 보면</p>

<p><img src="/img/posts/aws_face_rekognition/2.jpeg" width="80%" /></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
    </span><span class="nl">"faceDetails"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
            </span><span class="s2">"ageRange"</span><span class="err">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"low"</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w">
                </span><span class="nl">"high"</span><span class="p">:</span><span class="w"> </span><span class="mi">16</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="err">...</span><span class="w">
            </span><span class="s2">"gender"</span><span class="err">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">99.85323</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="err">...</span><span class="w">
            </span><span class="s2">"emotions"</span><span class="err">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CALM"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">96.09375</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SURPRISED"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">2.1915436</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CONFUSED"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.54200494</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"DISGUSTED"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.11892319</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"HAPPY"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.086530045</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ANGRY"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.013077259</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SAD"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.003439188</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"FEAR"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">4.529953E-4</span><span class="w">
                </span><span class="p">}</span><span class="w">
            </span><span class="p">],</span><span class="w">
            </span><span class="err">...</span><span class="w">
</span><span class="err">}</span><span class="w">

</span></code></pre></div></div>

<p>일단 나이가 생각보다 정확하게 나온다는 점에서 놀랐는데, 일단 동양인의 얼굴은 나이가 보다 더 어려보이게 나오는 것 같기는 하다.
나의 경우에도 20세는 턱도 없이 어린 나이인데도 20세로 나오고, 카리나의 경우에는 10세에서 16세로 나왔다. 물론 AWS API이므로
만 나이겠지만, 아무리 그래도 10세는 너무 어린 나이로 나오는게 아닐까ㅋㅋㅋ 그리고 내 성별의 경우에도 남자일 확률이 57% 밖에는 
확신할 수 없다는 점이 좀 웃겼다.</p>

<p>아무튼, 이런 기능을 구현하기 위해서는 AWS Rekognition API를 사용하면 된다. 
내 다른 프로젝트에서 얼굴 인식, 즉 나이대와 성별을 체크하는 기능을 구현하고자 했는데 이를 위해서 AWS Rekognition API를 사용하였다.
그런데 AWS의 자습서 내용이 형편없기도 하고, 그리고 한국어로 된 Spring Boot에서 AWS Rekognition API를 사용하는 방법에 대한 자료가 많이 없어서
이렇게 직접 구현하면서 정리해보려고 한다.</p>

<h3 id="2-의존성-추가">2. 의존성 추가</h3>

<p>일단 메이븐의 경우에는 아래와 같이 의존성을 추가해주면 된다.</p>

<h4 id="pomxml">pom.xml</h4>
<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>com.amazonaws<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>aws-java-sdk-rekognition<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;version&gt;</span>1.12.770<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
   
</code></pre></div></div>

<p>자바 버전 17, 그리고 스프링 부트 버전 3.3.1을 사용했고, AWS Rekognition API의 버전은 1.12.770을 사용했다.
그래들의 경우에는</p>

<h4 id="buildgradle">build.gradle</h4>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
    </span><span class="err">implementation</span><span class="w"> </span><span class="err">'com.amazonaws:aws-java-sdk-rekognition:</span><span class="mf">1.12</span><span class="err">.</span><span class="mi">770</span><span class="err">'</span><span class="w">
    </span><span class="err">implementation</span><span class="w"> </span><span class="err">'com.amazonaws:aws-java-sdk-core:</span><span class="mf">1.12</span><span class="err">.</span><span class="mi">770</span><span class="err">'</span><span class="w">
    
</span></code></pre></div></div>

<p>이 의존성을 추가해 주어야 한다. 이 의존성을 추가해 주면 다음과 같은 경고 메시지가 나오는데</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2024-08-22T21:12:40.570+09:00  WARN 2168 --- [           main] com.amazonaws.util.VersionInfoUtils      : The 
AWS SDK for Java 1.x entered maintenance mode starting July 31, 2024 and will reach end of support on December 
31, 2025. For more information, see https://aws.amazon.com/blogs/developer/the-aws-sdk-for-java-1-x-is-in-
maintenance-mode-effective-july-31-2024/
You can print where on the file system the AWS SDK for Java 1.x core runtime is located by setting the AWS_JAVA_V1_
PRINT_LOCATION environment variable or aws.java.v1.printLocation system property to 'true'.
This message can be disabled by setting the AWS_JAVA_V1_DISABLE_DEPRECATION_ANNOUNCEMENT environment variable or 
aws.java.v1.disableDeprecationAnnouncement system property to 'true'.
The AWS SDK for Java 1.x is being used here:
</code></pre></div></div>

<p>이런 경고 메시지가 나오는데, 이는 AWS SDK for Java 1.x가 2025년 12월 31일까지 지원이 중단된다는 것을 알려주는 메시지이다.
메이븐 센트럴에서도 확인해 봤지만 일단 1.x 버전이 최신 버전이라서 1.x 버전을 사용해야 하는 것 같다. 2 버전은 출시되지는 않았다.</p>

<p><img src="/img/posts/aws_face_rekognition/3.png" width="80%" /></p>

<h3 id="3-aws-키-설정">3. AWS 키 설정</h3>

<p>그리고 AWS Rekognition API를 사용하기 위해서는 AWS키를 설정해 주어야 하는데, 나는 귀찮아서 루트키를 발급 받았지만 AWS에서는 IAM 사용자를 생성해서
키를 생성하는 것을 권장하고 있다. IAM 사용자를 생성하고, 해당 사용자에게 RekognitionFullAccess 권한을 부여하고, 해당 사용자의 키를 사용하면 된다.</p>

<p>혹시라도 어떻게 하는지 모르겠으면 <a href="&quot;https://aws.amazon.com/de/blogs/security/wheres-my-secret-access-key/&quot;">여기</a>를 참고하면 된다.</p>

<p><img src="/img/posts/aws_face_rekognition/4.png" width="80%" /></p>

<p>그리고 원래는 환경변수로 설정해 주는 것을 권장하지만, 일단 빠른 테스트를 위해 application.properties에 직접 삽입했다.</p>

<h4 id="applicationproperties">application.properties</h4>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="py">aws.accessKeyId</span><span class="p">=</span><span class="s">your-access-key</span>
<span class="py">aws.secretKey</span><span class="p">=</span><span class="s">your-secret-key</span>

</code></pre></div></div>

<h3 id="4-awsrekognitionconfiguration">4. AWSRekognitionConfiguration</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">com.amazonaws.auth.AWSStaticCredentialsProvider</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.auth.BasicAWSCredentials</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.regions.Regions</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.rekognition.AmazonRekognition</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.rekognition.AmazonRekognitionClientBuilder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AwsRekognitionConfiguration</span> <span class="o">{</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${aws.access-key}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">accessKey</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${aws.secret-key}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">secretKey</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">AmazonRekognition</span> <span class="nf">amazonRekognition</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">BasicAWSCredentials</span> <span class="n">credentials</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BasicAWSCredentials</span><span class="o">(</span><span class="n">accessKey</span><span class="o">,</span> <span class="n">secretKey</span><span class="o">);</span>
        <span class="k">return</span> <span class="nc">AmazonRekognitionClientBuilder</span>
                <span class="o">.</span><span class="na">standard</span><span class="o">()</span>
                <span class="o">.</span><span class="na">withRegion</span><span class="o">(</span><span class="nc">Regions</span><span class="o">.</span><span class="na">EU_WEST_1</span><span class="o">)</span>
                <span class="o">.</span><span class="na">withCredentials</span><span class="o">(</span><span class="k">new</span> <span class="nc">AWSStaticCredentialsProvider</span><span class="o">(</span><span class="n">credentials</span><span class="o">))</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<p>이렇게 AWSRekognitionConfiguration을 만들어서 AmazonRekognition 객체를 Bean으로 등록해 주면 된다. 
이 이후에는 AWSRekognitionService를 만들어서 실제 얼굴 인식을 하는 메소드를 만들어 주면 된다.</p>

<h3 id="5-awsrekognitionservice-및-awsrekognitioncontroller-생성">5. AWSRekognitionService 및 AWSRekognitionController 생성</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.rekognition.AmazonRekognition</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.rekognition.model.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.multipart.MultipartFile</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.ByteBuffer</span><span class="o">;</span>

<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AwsRekognitionService</span> <span class="o">{</span>
    
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">AmazonRekognition</span> <span class="n">client</span><span class="o">;</span>

    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">DetectFacesResult</span> <span class="nf">detectFacesRequest</span><span class="o">(</span><span class="nc">MultipartFile</span> <span class="n">multipartFile</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">DetectFacesRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DetectFacesRequest</span><span class="o">()</span>
                <span class="o">.</span><span class="na">withImage</span><span class="o">(</span><span class="k">new</span> <span class="nc">Image</span><span class="o">().</span><span class="na">withBytes</span><span class="o">(</span><span class="nc">ByteBuffer</span><span class="o">.</span><span class="na">wrap</span><span class="o">(</span><span class="n">multipartFile</span><span class="o">.</span><span class="na">getBytes</span><span class="o">())))</span>
                <span class="o">.</span><span class="na">withAttributes</span><span class="o">(</span><span class="nc">Attribute</span><span class="o">.</span><span class="na">ALL</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">client</span><span class="o">.</span><span class="na">detectFaces</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="kn">import</span> <span class="nn">com.amazonaws.services.rekognition.model.DetectFacesRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.rekognition.model.DetectFacesResult</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.example.awsrekognition.service.AwsRekognitionService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.http.ResponseEntity</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.multipart.MultipartFile</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>

<span class="nd">@RestController</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AwsRekognitionRestController</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">AwsRekognitionService</span> <span class="n">awsRekognitionService</span><span class="o">;</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/images/test-face"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">DetectFacesResult</span><span class="o">&gt;</span> <span class="nf">detectFaces</span><span class="o">(</span><span class="nd">@RequestPart</span> <span class="nc">MultipartFile</span> <span class="n">image</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">(</span><span class="n">awsRekognitionService</span><span class="o">.</span><span class="na">detectFacesRequest</span><span class="o">(</span><span class="n">image</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>이러면 이미지를 업로드하면 해당 이미지의 얼굴을 인식하는 기능을 구현할 수 있다.</p>

<h3 id="6-마무리">6. 마무리</h3>

<p>이렇게 AWS Rekognition API를 사용하여 Spring Boot에서 얼굴 인식을 구현하는 방법을 정리해 보았다.
이런 방법 말고도 S3 버킷에 이미지를 업로드하면 해당 이미지의 URL을 가져와서 얼굴 인식을 하는 방법도 있긴 하고,
여러 사진 중에서 해당 사진의 얼굴을 찾는 방법도 있다. 아마도 출입국 심사대나 보안 설정 같은 곳에서 유용하게 사용할 수 있지 않을까 싶다.</p>

<p>끝!</p>]]></content><author><name>ash tensor</name></author><category term="WEB" /><category term="JAVA" /><summary type="html"><![CDATA[AWS Rekognition API를 사용하여 Spring Boot에서 얼굴 인식을 구현.]]></summary></entry><entry><title type="html">[WEB][GCP] Spring Boot에서 GCP Bucket에 파일 업로드하기</title><link href="http://localhost:4000/web/java/2024/08/20/spring-gcp-bucket.html" rel="alternate" type="text/html" title="[WEB][GCP] Spring Boot에서 GCP Bucket에 파일 업로드하기" /><published>2024-08-20T00:00:00+09:00</published><updated>2024-08-20T00:00:00+09:00</updated><id>http://localhost:4000/web/java/2024/08/20/spring-gcp-bucket</id><content type="html" xml:base="http://localhost:4000/web/java/2024/08/20/spring-gcp-bucket.html"><![CDATA[<h2 id="webgcp-spring-boot에서-gcp-bucket에-파일-업로드하기">[WEB][GCP] Spring Boot에서 GCP Bucket에 파일 업로드하기</h2>

<h3 id="문제-설명">문제 설명</h3>

<p>사실 구현한지는 두달은 된 것 같은데, 프로젝트를 제대로 정리할 시간이 없다 보니까 이제서야 정리하게 되었다.
음, 일단 AWS S3보다 GCP 클라우드 버켓을 사용하는 경우가 더 적다 보니까, 인터넷에 잘 정리되어 있는 자료가 많지 않았다.
물론 클라우드 버켓이 S3보다 더 좋은 서비스를 제공하지는 않지만, AWS의 프리티어보다 GCP 프리티어의 제공량이 더 많기도 하고,
새 계정을 만들 경우에는 300$ 크레딧을 제공하기 때문에, 한번 새로운 계정을 만들어서 사용하는 것도 나쁘지 않다.</p>

<p>사실 GCP 버켓에 파일을 업로드하는 것은 AWS S3에 파일을 업로드하는 것과 크게 다르지 않다.</p>

<h3 id="gcpconfig">GCPConfig</h3>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
    </span><span class="err">dependencies</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">'implementation</span><span class="w"> </span><span class="err">'com.google.cloud:spring-cloud-gcp-starter-storage:</span><span class="mf">5.3</span><span class="err">.</span><span class="mi">0</span><span class="err">'</span><span class="w">
    </span><span class="p">}</span><span class="w">
    
</span></code></pre></div></div>

<p>일단 gradle에 위와 같은 의존성을 추가해 준다. GPT는 starter 의존성을 추가하는게 아니라.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="err">implementation</span><span class="w"> </span><span class="err">'com.google.cloud:google-cloud-storage:latest_version'</span><span class="w">

</span></code></pre></div></div>

<p>이렇게 개별 의존성을 추가하는 식으로 조언해 주는데, 공식 문서에서는 starter 의존성을 추가하는 방향으로
설명하고 있어서, 해당 의존성을 추가했다.
그리고 GCP 버켓에 접속할 수 있도록 서비스 계정을 생성하고 인증 키를 만들어야 한다.</p>

<p><img src="/img/posts/gcp/bucket/1.png" width="80%" /></p>

<ol>
  <li>Google Cloud Console에 접속.</li>
  <li>IAM &amp; Admin &gt; Service Accounts에서 새로운 서비스 계정을 생성.</li>
  <li>서비스 계정에 적절한 역할(예: Storage Admin 또는 Storage Object Admin)을 부여.</li>
  <li>서비스 계정의 키를 생성하고 JSON 파일을 다운로드.</li>
</ol>

<h3 id="환경변수-추가">환경변수 추가</h3>

<p>그리고 해당 키를 스프링에서 사용할 수 있게 하기 위해서 해당 키 파일을 환경변수로 설정해주거나, 
직접 키 파일을 프로젝트 내에 삽입하는 방법이 있다. 물론 보안상으로 당연히 환경변수로 설정하는 것이 좋다.
mac 기준으로 자신의 .zshrc에 해당 키를 환경변수로 설정해주면 된다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nb">sudo </span>nano ~/.zshrc

// 해당 키를 환경변수로 설정<span class="o">(</span>마지막줄에 추가해주면 된다<span class="o">)</span>

<span class="nb">export </span><span class="nv">GOOGLE_APPLICATION_CREDENTIALS</span><span class="o">=</span><span class="s2">"/path/to/your-service-account-file.json"</span>

</code></pre></div></div>

<p>배포때도 해당 키를 환경변수로 설정해주면 되는데, 서버의 경우 대부분이 우분투이기 때문에 .bashrc에 해당 키를 설정해주면 된다.
그리고 로컬 환경에서 해당 키를 설정해 주었는데도 오류가 나는 경우가 있는데, 배포는 문제 없이 잘 작동하는데 로컬에서만 오류가 나는 경우가 있었다.
내 경우에는 IntelliJ에서 해당 키를 인식하지 못한게 그 이유였는데 이를 해결하기 위해서는 인텔리제이의 환경변수에 해당 키를 추가해주면 된다.</p>

<p>인텔리제이에서 해당 키를 직접 추가하는 방법으로는</p>

<ol>
  <li>Run &gt; Edit Configurations</li>
</ol>

<p><img src="/img/posts/gcp/bucket/2.png" width="80%" /></p>

<ol>
  <li>Environment Variables에 해당 키를 추가해주면 된다.</li>
</ol>

<p><img src="/img/posts/gcp/bucket/3.png" width="80%" /></p>

<h3 id="gcpconfigjava">GcpConfig.java</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">ac.su.kiosk.config</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.google.auth.oauth2.GoogleCredentials</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.google.cloud.storage.Storage</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.google.cloud.storage.StorageOptions</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.FileInputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">GCPConfig</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">GCPConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">Storage</span> <span class="nf">storage</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">credentialsPath</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">getenv</span><span class="o">(</span><span class="s">"GOOGLE_APPLICATION_CREDENTIALS"</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">credentialsPath</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"GOOGLE_APPLICATION_CREDENTIALS environment variable is not set."</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Using GOOGLE_APPLICATION_CREDENTIALS from: "</span> <span class="o">+</span> <span class="n">credentialsPath</span><span class="o">);</span>

        <span class="k">try</span> <span class="o">(</span><span class="nc">FileInputStream</span> <span class="n">credentialsStream</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="n">credentialsPath</span><span class="o">))</span> <span class="o">{</span>
            <span class="nc">GoogleCredentials</span> <span class="n">credentials</span> <span class="o">=</span> <span class="nc">GoogleCredentials</span><span class="o">.</span><span class="na">fromStream</span><span class="o">(</span><span class="n">credentialsStream</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">createScoped</span><span class="o">(</span><span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"https://www.googleapis.com/auth/cloud-platform"</span><span class="o">));</span>
            <span class="k">return</span> <span class="nc">StorageOptions</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">().</span><span class="na">setCredentials</span><span class="o">(</span><span class="n">credentials</span><span class="o">).</span><span class="na">build</span><span class="o">().</span><span class="na">getService</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"Failed to load GoogleCredentials from path: "</span> <span class="o">+</span> <span class="n">credentialsPath</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
            <span class="k">throw</span> <span class="n">e</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>이렇게 GCPConfig를 만들어서 Storage를 Bean으로 등록해주면 된다. 
이렇게 하면 GCP 버켓에 접근할 수 있는 Storage 객체를 사용할 수 있다.</p>

<ul>
  <li>파일 입력 스트림 생성
  FileInputStream credentialsStream = new FileInputStream(credentialsPath):
  지정된 경로의 인증 파일(JSON)을 읽기 위해 파일 입력 스트림을 생성.
  try-with-resources 문을 사용하여 스트림이 자동으로 닫히도록 함.</li>
  <li>
    <p>GoogleCredentials 객체 생성 및 스코프 설정
  GoogleCredentials.fromStream(credentialsStream):
  파일 입력 스트림에서 인증 정보를 읽어와 GoogleCredentials 객체를 생성.
  .createScoped(List.of(“https://www.googleapis.com/auth/cloud-platform”)):
  필요한 OAuth 2.0 스코프를 설정.
  여기서는 cloud-platform 스코프를 사용하여 GCP의 모든 리소스에 대한 액세스 권한을 부여.
  필요에 따라 더 제한적인 스코프를 설정할 수 있음.
  https://www.googleapis.com/auth/devstorage.read_only: 읽기 전용 액세스</p>

    <p>https://www.googleapis.com/auth/devstorage.read_write: 읽기 및 쓰기 액세스</p>

    <p>https://www.googleapis.com/auth/devstorage.full_control: 완전한 제어 권한</p>
  </li>
  <li>Storage 객체 생성
  StorageOptions.newBuilder().setCredentials(credentials).build().getService():
  StorageOptions 빌더를 사용하여 GoogleCredentials를 설정하고 Storage 서비스 객체를 생성.
  이렇게 생성된 Storage 객체를 반환하여 애플리케이션 내에서 GCS와 상호 작용할 수 있도록 함.</li>
</ul>

<h3 id="storageservicejava">StorageService.java</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">com.google.cloud.storage.BlobInfo</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.google.cloud.storage.Storage</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.RequiredArgsConstructor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RestController</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.multipart.MultipartFile</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>

<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StorageService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Storage</span> <span class="n">storage</span><span class="o">;</span>
    
    <span class="c1">// application.properties에 설정한 버킷 이름을 가져옴</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${spring.cloud.gcp.storage.bucket-name}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">bucketName</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">uploadFile</span><span class="o">(</span><span class="nc">MultipartFile</span> <span class="n">file</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">blobName</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="na">getOriginalFilename</span><span class="o">();</span>
        <span class="nc">BlobInfo</span> <span class="n">blobInfo</span> <span class="o">=</span> <span class="n">storage</span><span class="o">.</span><span class="na">create</span><span class="o">(</span>
                <span class="nc">BlobInfo</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">(</span><span class="n">bucketName</span><span class="o">,</span> <span class="n">blobName</span><span class="o">).</span><span class="na">build</span><span class="o">(),</span>
                <span class="n">file</span><span class="o">.</span><span class="na">getBytes</span><span class="o">()</span>
        <span class="o">);</span>
        <span class="k">return</span> <span class="n">blobInfo</span><span class="o">.</span><span class="na">getMediaLink</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>uploadFile 메소드는 업로드된 파일의 URL을 반환한다. 나는 application.properties에 버킷 이름을 설정했는데, 
문자열로 직접 설정해도 상관 없다.</p>

<h3 id="storagecontrollerjava">StorageController.java</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    <span class="nd">@RestController</span>
    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/upload_test"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">restImage</span><span class="o">(</span><span class="nd">@RequestPart</span><span class="o">(</span><span class="s">"file"</span><span class="o">)</span> <span class="nc">MultipartFile</span> <span class="n">file</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">message</span> <span class="o">=</span> <span class="n">storageService</span><span class="o">.</span><span class="na">uploadFile</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
            <span class="nc">TestEntity</span> <span class="n">test</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TestEntity</span><span class="o">();</span>
            <span class="n">test</span><span class="o">.</span><span class="na">setTestString</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
            <span class="n">testRepo</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">test</span><span class="o">);</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nc">ResponseEntity</span><span class="o">&lt;&gt;(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">CREATED</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nc">ResponseEntity</span><span class="o">&lt;&gt;(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">INTERNAL_SERVER_ERROR</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
</code></pre></div></div>

<p>이렇게 파일을 업로드하는 컨트롤러를 만들어주면 된다. 업로드된 파일의 URL을 반환하고, 해당 URL을 DB에 저장하는 식으로 구현했다.
그리고 해당 컨트롤러는 RestController인데 파일을 업로드 하는 경우에, @RequestPart를 사용해야 한다.
이 부분에서 트러블슈팅에 시간이 많이 걸렸는데 @RequestBody나 @RequestParam을 사용하면 파일을 업로드할 수 없다.</p>

<p>@RequestPart와 @RequestParam, @RequestBody 가 정확히 뭔지 모르고 막연하게 사용하다가 이런 문제가 생겼는데, 이번에
확실히 정리하게 되어서 오히려 좋은 기회가 되었다고 생각한다.</p>

<h3 id="requestpart와-requestparam-requestbody">RequestPart와 RequestParam, RequestBody</h3>

<h4 id="requestpart에-대한-자세한-설명">@RequestPart에 대한 자세한 설명</h4>

<p>@RequestPart는 Spring MVC에서 멀티파트 요청(multipart request)에서 특정한 파트를 매핑하기 위해 사용되는 어노테이션이다. 
주로 파일 업로드 또는 복합 데이터(파일 + JSON 객체 등)를 처리할 때 사용되는데, 다음과 같은 시나리오에서 사용된다.</p>

<ol>
  <li>파일 업로드 시, 파일을 받기 위해 사용.</li>
  <li>파일과 함께 전송되는 다른 데이터를 받기 위해 사용.</li>
  <li>JSON 데이터와 파일을 함께 처리할 때 사용.</li>
</ol>

<h4 id="주요-특징">주요 특징</h4>
<ol>
  <li>다양한 데이터 타입 처리: @RequestPart는 MultipartFile뿐만 아니라, 문자열, JSON 객체, POJO 등 다양한 타입을 처리할 수 있다.</li>
  <li>
    <p>멀티파트 요청과 JSON 객체: 파일 외에도 JSON 객체를 함께 전송할 수 있으며, 이를 각각의 파트로 분리하여 처리할 수 있다.</p>
  </li>
  <li>
    <p>JSON 파싱 및 파일 업로드
@RequestPart는 JSON 데이터를 자동으로 파싱하여 POJO로 변환할 수 있으며, 동시에 파일 업로드도 처리할 수 있다. 이러한 기능은 파일과 관련된 메타데이터를 함께 처리해야 할 때 매우 유용하다.</p>
  </li>
  <li>Content-Type 헤더 요구사항
@RequestPart: multipart/form-data로 인코딩된 요청에서 특정 파트를 처리하는 데 적합하며, JSON 객체를 포함하는 멀티파트 요청의 <strong>Content-Type</strong>이 multipart/form-data로 지정되어야 한다.
@RequestParam: application/x-www-form-urlencoded와 같은 단순 폼 데이터에 적합하며, JSON 데이터를 처리하기에는 제한적.</li>
</ol>

<h4 id="requestbody와-requestpart의-차이점">@RequestBody와 @RequestPart의 차이점</h4>
<ol>
  <li>@RequestBody
주요 목적: HTTP 요청의 본문(body)에 포함된 데이터를 직접 매핑하여 자바 객체로 변환하는 데 사용된다.</li>
</ol>

<p>지원하는 Content-Type: @RequestBody는 주로 JSON, XML, plain text 등과 같은 데이터를 처리하는 데 사용된다. 이 경우 요청의 Content-Type이 application/json 또는 application/xml 같은 형식이 된다.</p>

<p>사용 사례:</p>

<p>단순한 JSON 객체를 자바 객체로 매핑할 때 주로 사용됨.
예를 들어, 클라이언트가 JSON으로 인코딩된 데이터를 전송하고, 서버가 이를 자바 객체로 변환하여 처리하는 경우에 적합함.</p>]]></content><author><name>ash tensor</name></author><category term="WEB" /><category term="JAVA" /><summary type="html"><![CDATA[[WEB][GCP] Spring Boot에서 GCP Bucket에 파일 업로드하기]]></summary></entry><entry><title type="html">[자격증][실기] 빅데이터 분석기사 2024년 1회(8회)실기 합격 후기</title><link href="http://localhost:4000/%EC%9E%90%EA%B2%A9%EC%A6%9D/2024/08/20/bigdata-processing-engineer.html" rel="alternate" type="text/html" title="[자격증][실기] 빅데이터 분석기사 2024년 1회(8회)실기 합격 후기" /><published>2024-08-20T00:00:00+09:00</published><updated>2024-08-20T00:00:00+09:00</updated><id>http://localhost:4000/%EC%9E%90%EA%B2%A9%EC%A6%9D/2024/08/20/bigdata-processing-engineer</id><content type="html" xml:base="http://localhost:4000/%EC%9E%90%EA%B2%A9%EC%A6%9D/2024/08/20/bigdata-processing-engineer.html"><![CDATA[<h2 id="자격증실기-빅데이터-분석기사-2024년-1회8회실기-합격-후기-및-시험-문제">[자격증][실기] 빅데이터 분석기사 2024년 1회(8회)실기 합격 후기 및 시험 문제</h2>

<h3 id="합격-인증">합격 인증</h3>

<p><img src="/img/posts/bigdata/3.png" width="80%" /></p>

<p>솔직히 좀 부끄럽긴 한데… 3과목 점수가 5점밖에 안나와서 남 보여줄만한 점수는 아니긴 해도, 일단 합격은 합격이니까.</p>

<h3 id="시험-총평">시험 총평</h3>

<p>나는 시험을 동부자격검정센터에서 실기 시험을 봤는데 생각보다 시험장이 조금 작긴 했다. 
일단 태릉입구 근방 주민은 쉽게 찾아갈 수 있는게, BYC 직영매장 근처에 바로 시험장이 있어서 찾아가기 쉽다.</p>

<p>일단 빅데이터 분석기사의 실기 시험을 공부하며 내가 느꼈던 점은, 필기가 더 어렵고, 실기가 더 쉽다고 느꼈던 점이었다.</p>

<h4 id="1과목">1과목</h4>

<p><img src="/img/posts/bigdata/6.png" width="80%" /></p>

<p>(8회 시험에서는 약 몇백줄 되는 CSV를 제공했는데 다양한 나라의 맥주 판매? 소비 데이터 중에서 특정 조건에 맞는 나라의 정보를 추출하는 문제였다.
즉 꼭 저런 식의 전처리 문제만 나오는 건 아니다..!)
1과목은 데이터 전처리 과목인데, 판다스 라이브러리 등을 사용해서 기초적인 데이터 조작을 할 수 있는지를 묻는 문제인데,
파이썬을 쓸 줄만 안다면 누구나 이 문제를 풀 수 있다. 왜냐하면 help와 dir 명령어를 사용할 수 있기 때문에 pandas를 사용하지 못한다고 하더라도
도움을 받을 수 있기 때문이다. 사실상 30점은 기본으로 가져가는 점수라고 생각한다.</p>

<h4 id="2과목">2과목</h4>

<p><img src="/img/posts/bigdata/7.png" width="80%" /></p>

<p>2과목은 분석 모델링 과목인데, 회귀 모델이나 분류 모델을 사용해서 주어진 문제에 따른 데이터를 반환하는 문제다.
이 문제는 40점 배점으로 이 문제도 어려운 문제는 아니다. 내 기준으로 RMSE가 100에서 120 사이에 있었는데 40점으로 만점을 받았다.</p>

<p>8회차 문제를 설명하자면, 두 지하철역의 주요 변수(이름, 날씨, 기온, 습도, 풍속, 미세먼지 등)를 이용해서 두 지하철역의 승하차 인원을 예측하는 문제였다.</p>

<p>일단 2과목에서 점수를 받지 못하면 합격이 어렵다고 봐야 한다. 2유형은 40점이라 배점이 크기도 하지만, 아예 0점이 나오는 경우가 많아서 
숙달될 수 있을 정도로 코드를 써보는 편이 좋다.
내 경험상 2유형을 정리해 보자면 일단 <strong>원본 데이터를 잘 살펴 봐야 한다.</strong> 예를 들어서, 범주형 변수인 경우에는
라벨 인코딩 보다는(물론 안하는 것보다는 성능이 좋겠지만) pandas의 get_dummies를 이용하는 원핫 인코딩을 사용하는 것이 좋다.</p>

<p>또한, 이번 8회차 시험 문제를 설명했듯이, 두 지하철역의 승하차 인원을 예측하는 문제였는데, 꽤 많은 사람들이 <strong>지하철 역 이름</strong>을 변수로 사용하지 않아서 
점수가 낮게 나왔는데(문제에서는 A역 B역으로 주어졌다) 아마도 A역, B역으로 익명화 되어 있어서 변수로 사용하지 않은 건 이해한다. 하지만 우리가 
실제 지하철 역을 이용할 때 항상 집에서 가까운 지하철 역을 이용하는 것처럼, 강남의 유동인구가 많기 때문에 강남역은 당연히 노선도의 끝의 지하철 역보다는
이용자수가 많을 것이 분명하다.</p>

<p>이런 점을 고려하지 않고 지하철 역 이름을 변수로 사용하지 않은 사람들이 많았는데, 물론 사용하지 않다고 하더라도 점수를 받을 수는 있지만 내가 시험장에서 해당 데이터를 기반으로
분석했을때, 해당 변수가 설명력이 가장 높은 변수였기 때문에 아마 점수가 조금 떨어졌을 것이다. 이렇듯 어느정도 실제 데이터를 살펴보는게 중요하다!</p>

<p><img src="/img/posts/bigdata/4.png" width="80%" /></p>

<p>그리고 돌아다니는 팁으로 랜덤포레스트 회귀 &amp; 분류를 암기해 가는 2과목 팁이 존재하는데 실제로 이 방법이 가장 좋은 것 같다. 실제 시험장에서 
결측치와 이상치 제거를 수행한 뒤에 선형 회귀 및 다양한 모델을 사용해서 예측을 수행했는데, 그냥 원 핫 인코딩을 적용한 랜덤포레스트 회귀가 가장 좋은 성능을 보였다.</p>

<p>그리고 0점 나오는 경우가 많았는데, 이는 csv 파일을 저장하지 않은 경우도 있겠지만 <strong>정답 행 갯수보다 적거나 많은 행을 제출</strong>해서 그렇다.
이런 경우에는 0점이 나올 수 있기 때문에 주의해야 한다. 앞에 있던 사진처럼 총 행의 갯수(학습용 데이터 수, 평가용 데이터 수)를 제공해주기 때문에 
무조건 csv 파일을 제출할 때 정답 행 갯수와 같은지 len() 함수 등을 이용해서 <strong>꼭꼭</strong> 확인해야 한다!!</p>

<h4 id="3과목">3과목</h4>

<p><img src="/img/posts/bigdata/8.png" width="80%" /></p>

<p>물론 5점 맞은 주제에 무슨 후기냐 싶겠지만, 변명을 하자면 문제가 두문제 나오는데, 각각 5점짜리 소문항 3개씩 15점짜리 문제 두 개였다.
각각 문제는 1번 소문항이 틀리면 나머지 두개의 문항도 모두 틀리는 구조이기 때문에 2번 문항에서 t-검정의 유의구간을 반대로 설정하는 
실수를 저질러서 모두 다 틀려버리고 말았다….</p>

<p>개인적으로는 3과목이 가장 어려운 과목이라고 생각하고, 앞으로도 계속 어려워 질 것이라고 생각한다.
그 이유는 일단 지금 3과목에서는 통계적 검정을 주로 물어보기는 하지만 꼭 통계적 검정(t 검정 혹은 카이제곱 검정)을 물어보지 않을 수도 있다는 점이다.
실제로 저 예시 문제에서 나온 것처럼 선형 회귀의 계수나 변수 중요도, 오즈비를 물어보는 경우가 대부분이었다.
실제 기 치뤄진 시험의 기출문제에서도 다른 통계적 지식을 물어보는 경우가 있었는데 이런 경우에는 정말 어려운 문제가 나올 수 있다고 느꼈다. 
게다가 빅분기 특성상 기출문제도 정확하지 않기 때문에, 추후에 이 시험의 난이도를 올리고자 한다면 2과목 점수를 낮추고 3과목 점수를 올리는 식으로 
변별력을 줄 수도 있지 않을까? 그런 생각이 들었다.</p>

<p><img src="/img/posts/bigdata/5.png" width="80%" /></p>

<p>게다가, 지금은 1과목과 2과목을 모두 맞추면 70점으로 무조건 합격이 가능하기에 떠도는 팁으로는 1과목 2과목만 준비해서 특정 방법(랜덤포레스트 회귀 또는 분류)
만 달달 외워서 시험보는 편이 팁이라고 돌아다니는데, 랜덤포레스트 특성상 이런 시험의 데이터 셋에서는 어느정도 무조건적으로 성능이 좋게 나올 수 밖에는 
없기 때문에… 시험 점수 등을 조정해서 3과목을 공부할 수 밖에는 없게끔 시험을 언젠가 바꿀 수도 있지 않을까 생각이 들었다.</p>

<h3 id="마치며">마치며</h3>

<p>빅데이터 분석기사는 일단 필기를 합격했다면 실기는 수월하게 합격할 수 있는 시험이라고 느꼈다. 비록 작업형 시험이기는 하지만 코드가 정말 익숙하지 않은 사람이라도 
충분히 합격할 수 있는 시험이다. 
일단 수험서로는 ㅇㄱㅈ 출판사의 책을 사용했는데, 솔직히 별로 좋지 않았다고 할 수 밖에는 없다. 내용이 완전 틀린 내용이 실려있기도 했고,
해설과 본문 내용이 충돌되는 경우도 많았다. 다른 출판사의 책을 보지는 않았지만 사는 것이 더 좋지 않을까? 그런 생각은 있다. 적어도 2024년에는..</p>

<p>아무튼, 이렇게 빅데이터 분석기사 24년 1회 후기를 마친다!!</p>]]></content><author><name>ash tensor</name></author><category term="자격증" /><summary type="html"><![CDATA[[자격증][실기] 빅데이터 분석기사 2024년 1회(8회)실기 합격 후기 및 시험 문제]]></summary></entry><entry><title type="html">[자격증][실기] 정보처리기사 2024년 1회 실기 합격 후기</title><link href="http://localhost:4000/%EC%9E%90%EA%B2%A9%EC%A6%9D/2024/08/06/engineer-information-processor.html" rel="alternate" type="text/html" title="[자격증][실기] 정보처리기사 2024년 1회 실기 합격 후기" /><published>2024-08-06T00:00:00+09:00</published><updated>2024-08-06T00:00:00+09:00</updated><id>http://localhost:4000/%EC%9E%90%EA%B2%A9%EC%A6%9D/2024/08/06/engineer-information-processor</id><content type="html" xml:base="http://localhost:4000/%EC%9E%90%EA%B2%A9%EC%A6%9D/2024/08/06/engineer-information-processor.html"><![CDATA[<h2 id="자격증실기-정보처리기사-2024년-1회-실기-합격-후기">[자격증][실기] 정보처리기사 2024년 1회 실기 합격 후기</h2>

<h3 id="합격-인증">합격 인증</h3>

<p><img src="/img/posts/information_processor/1.png" width="80%" /></p>

<p><img src="/img/posts/information_processor/2.png" width="80%" /></p>

<p>정보처리기사를 합격하고 합격한 내용을 정리해야지 생각했는데, 너무 바빠서 이제야 정리를 하게 되었다. 일단 정보처리기사와 같은 산업인력공단에서 주관하는 시험은
합격한 다음에 결과가 너무 늦게 나오기 때문에 솔직히 조금 짜증나는 감도 있다.</p>

<p>가채점 등으로 내가 합격했다고 생각이 들지만서도 결과가 나오기 전까지는 불안한 마음이 너무 들기 떄문에… 게다가 이번에는 이상이 있는 문제가 너무 많이 나와서
합격한 것이 맞는지도 의심이 들기도 했다. 벌써 2회차 시험이 끝났지만 일단 지금이라도 합격한 내용을 정리해보도록 하겠다.</p>

<h3 id="시험-총평">시험 총평</h3>

<p>일단 다양한 곳에서 제공하는 복원 문제를 본다면 당연히 알겠지만, 1회차 시험은 작년 3회차 시험에 비해 쉬운 시험이었다.
작년 3회차 시험은 일단 완전수 문제라고 부르는 1부터 100까지 계산해야되는 3중 for 문 문제와 더불어, 보기를 제공하지 않는 시험이었기 때문에
그 체감이 더 두드러졌던 것 같다.</p>

<p>개인적으로 정보처리기사 시험은 공부해 본 결과 코드 문제가 많이 나오면 나올수록 더 쉬운 시험이라고 생각하는데, 왜냐하면 외워야 하는 양이
정보처리기사의 경우에는 넓기 떄문에 코드 문제가 아닌 지식을 요구하는 문제가 나오면 더 잘 기억하는 사람이 합격하기 때문이다.
이번 시험도, 그리고 2024년 2회차 시험도 코드 문제가 많이 나오는 기조는 동일했다고 들었다. 
게다가 1회차 시험에서는 보기를 제공하는 문제가 많이 나왔다. 예를 들어서 <strong>디자인패턴</strong> 문제, 그리고 <strong>정보보안</strong>관련 문제에서 보기를 제공하고 
올바른 보기를 골라 쓰라는 문제가 나왔는데, 이와 같은 경우에는 공부를 했으면 정확히 암기하지 않는다고 하더라도 맞출 수 있는 내용이라 
흔히 말하는 ‘억까’ 문제가 나오지 않아서 좋았다. 내 기억에는 커버리지 관련 내용도 보기를 제공했던 것 같아서 15점은 무조건 맞출 수 있었다.</p>

<p>그리고 특이했던 점으로는 데이터베이스 파트에서 올바른 정규화 단계를 작성하라는 문제가 나왔는데 이런 문제는 기존에 나오지 않았던 문제라서
당황할 수 있었다. 내가 틀린 문제중에 하나였다.</p>

<p>프로그래밍 파트에서 -내가 생각하기에- 오류 문항이 두 문제 있었는데, 첫번째로는 C 관련 문제에서 return 문이 없어서 전원 정답 처리된 문제와
자바 실행 순서 관련 문제가 있었다. 자바 실행순서 관련 문제는, 개인적으로는 문제가 잘못되었다고 생각하는데, 문제는 다음과 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">// 10. 답안 : 6 3 1 7 2</span>
<span class="c1">// - JAVA언어, 상속 실행 순서, 5 → ( ) → ( ) → ( ) → ( ) → ( ), 번호 중복없이 작성</span>
<span class="c1">// - 출제 : [프로그래밍 언어21 - 2.JAVA언어 – 4)생성자, 상속, 오버라이딩, 오버로딩, 추상 클래스]</span>

<span class="kd">class</span> <span class="nc">ClassOne</span> <span class="o">{</span>
	<span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">;</span>
	<span class="nc">ClassOne</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">// ①</span>
		<span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kt">int</span> <span class="nf">getArea</span><span class="o">()</span> <span class="o">{</span>  <span class="c1">// ②</span>
		<span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">ClassTwo</span> <span class="kd">extends</span> <span class="nc">ClassOne</span> <span class="o">{</span>
	<span class="kt">int</span> <span class="n">x</span><span class="o">;</span>
	<span class="nc">ClassTwo</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">// ③</span>
		<span class="kd">super</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">x</span><span class="o">);</span> 
	<span class="o">}</span>
	<span class="kt">int</span> <span class="nf">getArea</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">// ④</span>
		<span class="k">return</span> <span class="n">x</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Gisafirst</span> <span class="o">{</span>  
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">// ⑤</span>
		<span class="nc">ClassOne</span> <span class="n">one</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ClassTwo</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>  <span class="c1">// ⑥</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">one</span><span class="o">.</span><span class="na">getArea</span><span class="o">());</span>  <span class="c1">// ⑦</span>
	<span class="o">}</span>
<span class="o">}</span>


</code></pre></div></div>

<p>출처 : <a href="https://www.gisafirst.com/board/n1/view.php?offset=0&amp;tq=1393907668&amp;reqCategory=&amp;idx=447&amp;word=&amp;s_type=&amp;s_content=&amp;s_terms=">기사퍼스트 : 정보처리기사 실기 가답안 (합격률 36.8%, 합격자 수 9,263명)</a></p>

<p>그런데 한 번씩만 작성하도록 되어 있는데, 자바 실행 순서가 스택프레임에 쌓이게 되면서 스택의 가장 위의 메서드가 실행될 텐데, 논리적인 순서가 해당 메소드가 여러번
쓰일 수 있게 된다. 재귀함수를 생각해보면 내가 무슨 말을 하는지 이해하기 쉬울 것이다.</p>

<p>합격 여부를 떠나서, 나라에서 진행하는 공적인 자격을 부여하는 시험에, 이런 식의 문제를 내는게 너무 이상하다고 생각한다.
오히려 프로그램의 실행 순서를 제대로 아는, 자바 스택 프레임이나 메모리 구조에 대해 자세히 아는 사람이 문제를 틀릴 가능성이 있고, 
제대로 겉핥기식으로 아는 사람이 문제를 맞출 가능성이 높은 게 이상한 것 같다(문제 낸 사람은 당연히 상속 관련만 고려했겠지만).</p>

<p>이 외에 다른 문제들 역시 기출문제에서 출제되었던 내용과 별다를바 없이 출제되었다.</p>

<p>C언어의 경우에는 기본적인 C언어 문법과 포인터를 묻는 문제, 자바의 경우에도 역시 기본적인 문법과 자바 상속과 오버라이딩 관련 문제, 
파이썬의 경우에는 항상 그랬듯이 기본적인 빌트인 함수와 슬라이싱 관련 문제가 출제되었고 개정된 후 기출문제가 그래도 충분히 쌓인 지금이라면
기출문제를 공부했다면 충분히 맞출 수 있지 않았을까 싶었다.</p>

<p>어려웠던 문제로는 계산이 필요했던 문제- 서브넷 마스크 개념을 묻는 네트워크 문제가 있었고, 또 운영체제 파트에서 페이징 관련해서 묻는 문제가 있었는데
앞으로도 이런 식으로 운영체제와 네트워크 부분이 더욱 어렵게 출제될 수도 있지 않을까 싶었다.</p>

<h3 id="공부법">공부법</h3>

<p>솔직히 정보처리기사는 어려운 시험이냐고 물으면 그렇지는 않다고 대답할 수는 있지만, 그렇다고 그냥 아무런 공부도 하지 않고
정보처리기사를 위한 시험공부를 하지 않고 붙을 수 있냐고 물어본다면 그렇지 않다고 대답할 수 있다고 생각한다.</p>

<p>일단 방대한 양의 지식을 외워야 하는 것은 둘째치고, 코드문제에서도 선술했던 각 언어의 특징을 잡아서 공부하는 것이 중요하기 때문이다.</p>

<p>알고리즘이나 자료구조에 대해 묻는 것도 아니고, 각 언어별로</p>

<ul>
  <li>C는 포인터</li>
  <li>자바는 상속과 오버라이딩</li>
  <li>파이썬은 슬라이싱과 빌트인 함수</li>
  <li>각종 잘 사용하지 않는 연산자들 (삼항연산자, 비트연산자, 각 연산자의 계산우선순위등)</li>
</ul>

<p>이런 식으로 각 언어별로 묻는 것이 많기 때문에, 이런 부분을 특징지어서 잘 알고 있어야 한다. 
내가 PS를 잘 푼다고는 생각하지는 않지만 알고리즘 문제를 푸는것을 좋아하는 사람이고, 각 언어에 충분히 익숙하다고 생각했는데, 
정보처리기사 시험 처음 기출문제를 풀면서 공부했을때는 코드문제를 많이 틀렸을 정도다.</p>

<p>그러니 전공자라고 해도 정보처리기사의 코드 문제를 따로 충분히 공부해야 한다고 생각하고,</p>

<p>외워야 하는 부분에 대해서는 수험서의 도움을 받아서 빈출되는 부분을 확실히 외워야 한다.
물론 정보처리기사가 60점만 넘으면 되는 시험이기는 해도, 작년 3회차처럼 말도 안되는 문제가 나올 수도 있고, 보기가 나오지 않을 수도 있기 때문에
보기가 없는 단답식 문제를 충분히 적어낼 수 있어야 된다. 게다가 나름 정보처리기사의 내용들이 완전 도움이 안되는 내용인 것도 아니니까….</p>

<h3 id="마치며">마치며</h3>

<p>대표적으로 많이 사용하는 수험서로는 시나공이나 수제비가 있는데 나는 수제비로 공부했다. 당연히 각 책의 장단점이 있다고 생각하고 둘 다 좋은 책이다.
두 책을 다 보기는 했는데, 내가 수제비를 중점으로 공부한 이유는 일단 수제비가 내용이 더 많다는 점에 있었다. 
내용이 적으면 당연히 더 좋지만(외울게 적으니까) 개인적으로는 이런 시험은 한 번 떨어지면 다시 다음에 또 봐야 되는데, 정보처리기사가 
1년에 세 번 있는데, 한 번 떨어지면 거의 반년간 기다려야 되니 조금이라도 떨어질 위험을 지고 싶지가 않았다.</p>

<p>아무튼, 이미 2회차 시험이 끝난 지금 살짝 늦은 감이 있지만, 이렇게 정보처리기사 24년 1회 후기를 마친다!!</p>

<p>참고로 저 수첩형 자격증은 합격 공고가 난 그날 바로 접수했는데 신청한지 약 1주 반 정도가 지나서야 배송됐다. 혹시라도 궁금해 하는 사람이
있을 수도 있을 것 같아서.</p>]]></content><author><name>ash tensor</name></author><category term="자격증" /><summary type="html"><![CDATA[[자격증][실기] 정보처리기사 2024년 1회 실기 합격 후기]]></summary></entry></feed>