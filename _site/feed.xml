<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-02-07T13:01:18+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Tensor Studio</title><subtitle>텐서 스튜디오</subtitle><author><name>ash tensor</name></author><entry><title type="html">[리눅스] 애플 실리콘 맥에 리눅스 설치하는 법(UTM)</title><link href="http://localhost:4000/linux/2024/02/01/utm.html" rel="alternate" type="text/html" title="[리눅스] 애플 실리콘 맥에 리눅스 설치하는 법(UTM)" /><published>2024-02-01T00:00:00+09:00</published><updated>2024-02-01T00:00:00+09:00</updated><id>http://localhost:4000/linux/2024/02/01/utm</id><content type="html" xml:base="http://localhost:4000/linux/2024/02/01/utm.html"><![CDATA[<h2 id="리눅스-애플-실리콘-맥에-리눅스-설치-후기utm">[리눅스] 애플 실리콘 맥에 리눅스 설치 후기(UTM)</h2>

<h3 id="utm">UTM</h3>

<p><a href="https://mac.getutm.app/">UTM</a>은 이 링크에서 얻을 수 있다. 일단 <a href="https://gymdev.tistory.com/75">이 페이지</a>에서 너무 설치법을 잘 정리해 주고 있어서 내가 따로 첨언할 부분은 없었다. 아, 설치 중 중간에 <strong>display out을 확인할 수 없다</strong> 고 한동안 표시돼서 설치가 안되는건가 했는데, 조금 기다리면 문제 없이 리눅스가 부팅되니까 조금 기다리면 된다!</p>

<p><img src="/img/스크린샷 2024-02-01 오후 1.27.20.png" style="width: 80%" /></p>

<p>m1맥에서 제대로 구동되는 것을 확인했다.</p>]]></content><author><name>ash tensor</name></author><category term="linux" /><summary type="html"><![CDATA[[리눅스] 애플 실리콘 맥에 리눅스 설치 후기(UTM)]]></summary></entry><entry><title type="html">[백준] 백준 1931번 :: 회의실 배정 :: 실버 1</title><link href="http://localhost:4000/%EB%B0%B1%EC%A4%80/ps/%ED%8C%8C%EC%9D%B4%EC%8D%AC/java/2024/02/01/boj1931.html" rel="alternate" type="text/html" title="[백준] 백준 1931번 :: 회의실 배정 :: 실버 1" /><published>2024-02-01T00:00:00+09:00</published><updated>2024-02-01T00:00:00+09:00</updated><id>http://localhost:4000/%EB%B0%B1%EC%A4%80/ps/%ED%8C%8C%EC%9D%B4%EC%8D%AC/java/2024/02/01/boj1931</id><content type="html" xml:base="http://localhost:4000/%EB%B0%B1%EC%A4%80/ps/%ED%8C%8C%EC%9D%B4%EC%8D%AC/java/2024/02/01/boj1931.html"><![CDATA[<h2 id="백준-백준-1931번--회의실-배정--실버-1">[백준] 백준 1931번 :: 회의실 배정 :: 실버 1</h2>

<h3 id="문제-설명">문제 설명</h3>

<p>한 개의 회의실이 있는데 이를 사용하고자 하는 N개의 회의에 대하여 회의실 사용표를 만들려고 한다. 각 회의 I에 대해 시작시간과 끝나는 시간이 주어져 있고, 각 회의가 겹치지 않게 하면서 회의실을 사용할 수 있는 회의의 최대 개수를 찾아보자. 단, 회의는 한번 시작하면 중간에 중단될 수 없으며 한 회의가 끝나는 것과 동시에 다음 회의가 시작될 수 있다. 회의의 시작시간과 끝나는 시간이 같을 수도 있다. 이 경우에는 시작하자마자 끝나는 것으로 생각하면 된다.</p>

<p><strong>입력</strong></p>

<p>첫째 줄에 회의의 수 N(1 ≤ N ≤ 100,000)이 주어진다. 둘째 줄부터 N+1 줄까지 각 회의의 정보가 주어지는데 이것은 공백을 사이에 두고 회의의 시작시간과 끝나는 시간이 주어진다. 시작 시간과 끝나는 시간은 231-1보다 작거나 같은 자연수 또는 0이다.</p>

<p><strong>출력</strong></p>

<p>첫째 줄에 최대 사용할 수 있는 회의의 최대 개수를 출력한다.</p>

<h3 id="제한시간">제한시간</h3>

<p>2 초	128 MB</p>

<h3 id="예제-입력">예제 입력</h3>

<p>11</p>

<p>1 4</p>

<p>3 5</p>

<p>0 6</p>

<p>5 7</p>

<p>3 8</p>

<p>5 9</p>

<p>6 10</p>

<p>8 11</p>

<p>8 12</p>

<p>2 13</p>

<p>12 14</p>

<h3 id="예제-출력">예제 출력</h3>

<p>4</p>

<h4 id="접근방법">접근방법</h4>

<p>나는 이거 좀 어려웠다. 개인적으로 흔한 골드 문제보다도 어려웠던 것 같은데, 왜냐하면 그리디로 풀어야 하나? 하고 돌려봤더니 답이 안나와서 DP로 도전하다 다시 그리디로 돌아왔기 때문이다.</p>

<p>처음에는 회의 시작 시간 기준으로 그리디를 적용했으나, 정답이 나오지 않았다. 그리디의 특성상 최소단위로 나눈 작업의 결과가 항상 최적이라는 보장이 없기 때문에 그렇다. 이런 경우에는 작업을 나누는 기준이 잘못되었거나/그리디로 해결할 수 있는 문제가 아닌 경우가 많다. 아니면 기준/정렬이 잘못되었거나.</p>

<p>이 문제의 경우에는 회의가 끝나는 시간을 기준으로 정렬해서 그리디를 적용해야 풀이가 가능했다. 다음은 시작시간, 끝시간을 입력으로 받아서 튜플을 (끝시간, 시작시간)으로 저장한 예시 코드이다.</p>

<h4 id="파이썬-코드">파이썬 코드</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">conference_number</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">())</span>
<span class="n">conference_list</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">conference_number</span><span class="p">)</span> <span class="p">:</span>
    <span class="n">first</span><span class="p">,</span> <span class="n">second</span> <span class="o">=</span> <span class="nf">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nf">input</span><span class="p">().</span><span class="nf">split</span><span class="p">())</span>
    <span class="n">conference_list</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="n">second</span><span class="p">,</span> <span class="n">first</span><span class="p">))</span>

<span class="n">conference_list</span><span class="p">.</span><span class="nf">sort</span><span class="p">()</span>
<span class="n">n</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">conference_list</span> <span class="p">:</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="n">c</span> <span class="p">:</span>
        <span class="n">answer</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">i</span>

<span class="nf">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>

</code></pre></div></div>

<h4 id="자바-코드시작시간-끝시간-정렬">자바 코드(시작시간, 끝시간) 정렬</h4>

<p>다음은 위 코드를 자바 코드로, 정렬을 (끝시간, 시작시간) 으로 해 풀이한 것이 아니라 (시작시간, 끝시간)을 기준으로 정렬해 풀이한 코드이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">boj</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.reflect.Array</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Comparator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">boj1931</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">conferenceNumber</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>

        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">[]&gt;</span> <span class="n">conferenceList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">conferenceNumber</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span><span class="o">[]</span> <span class="n">temp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
            <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
            <span class="kt">int</span> <span class="n">end</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
            <span class="n">temp</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span>
            <span class="n">temp</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">end</span><span class="o">;</span>
            <span class="n">conferenceList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">temp</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">conferenceList</span><span class="o">,</span> <span class="k">new</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">[]&gt;()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">o1</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">o1</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="n">o2</span><span class="o">[</span><span class="mi">1</span><span class="o">])</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="n">o1</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">-</span> <span class="n">o2</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
                <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="n">o1</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="n">o2</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="o">);</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">conferenceList</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;=</span> <span class="n">conferenceList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)[</span><span class="mi">0</span><span class="o">])</span> <span class="o">{</span>
                <span class="n">answer</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
                <span class="n">n</span> <span class="o">=</span> <span class="n">conferenceList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)[</span><span class="mi">1</span><span class="o">];</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">answer</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>


</code></pre></div></div>]]></content><author><name>ash tensor</name></author><category term="백준" /><category term="PS" /><category term="파이썬" /><category term="JAVA" /><summary type="html"><![CDATA[[백준] 백준 1931번 :: 회의실 배정 :: 실버 1]]></summary></entry><entry><title type="html">[백준][자료구조] 백준 2178번 :: 미로 탐색 :: 실버 1</title><link href="http://localhost:4000/%EB%B0%B1%EC%A4%80/ps/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/%ED%8C%8C%EC%9D%B4%EC%8D%AC/java/2024/01/30/boj2178.html" rel="alternate" type="text/html" title="[백준][자료구조] 백준 2178번 :: 미로 탐색 :: 실버 1" /><published>2024-01-30T00:00:00+09:00</published><updated>2024-01-30T00:00:00+09:00</updated><id>http://localhost:4000/%EB%B0%B1%EC%A4%80/ps/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/%ED%8C%8C%EC%9D%B4%EC%8D%AC/java/2024/01/30/boj2178</id><content type="html" xml:base="http://localhost:4000/%EB%B0%B1%EC%A4%80/ps/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/%ED%8C%8C%EC%9D%B4%EC%8D%AC/java/2024/01/30/boj2178.html"><![CDATA[<h2 id="백준자료구조-백준-2178번--미로-탐색--실버-1">[백준][자료구조] 백준 2178번 :: 미로 탐색 :: 실버 1</h2>

<h3 id="문제-설명">문제 설명</h3>

<p>N * M 크기의 배열로 표현되는 미로가 있다. 미로에서 1은 이동할 수 있는 칸을 나타내고, 0은 이동할 수 없는 칸을 나타낸다. 이러한 미로가 주어졌을 때, (1, 1)에서 출발하여 (N, M)의 위치로 이동할 때 지나야 하는 최소의 칸 수를 구하는 프로그램을 작성하시오. 한 칸에서 다른 칸으로 이동할 때, 서로 인접한 칸으로만 이동할 수 있다.</p>

<p>위의 예에서는 15칸을 지나야 (N, M)의 위치로 이동할 수 있다. 칸을 셀 때에는 시작 위치와 도착 위치도 포함한다.</p>

<p><strong>입력</strong></p>

<p>첫째 줄에 두 정수 N, M(2 ≤ N, M ≤ 100)이 주어진다. 다음 N개의 줄에는 M개의 정수로 미로가 주어진다. 각각의 수들은 붙어서 입력으로 주어진다.</p>

<p><strong>출력</strong></p>

<p>첫째 줄에 지나야 하는 최소의 칸 수를 출력한다. 항상 도착위치로 이동할 수 있는 경우만 입력으로 주어진다.</p>

<h3 id="제한시간">제한시간</h3>

<p>1 초	192 MB</p>

<h3 id="예제-입력">예제 입력</h3>

<p>4 6
101111
101010
101011
111011</p>

<h3 id="예제-출력">예제 출력</h3>

<p>15</p>

<h4 id="접근방법">접근방법</h4>

<p>흔한 4방향 미로찾기 문제이다. 이런 문제는 너무 템플릿화 되어서, 푸는 방법이 정형화되어 있다.</p>
<ol>
  <li>첫번째로 이런 격자형 문제는 방향 배열을 사용해서 문제에 접근한다. 위, 아래, 좌, 우를 각각 dx, dy라는 방향 배열을 정의하는 것이다. 만약 방향 배열을 정의하지 않으면 코드가 너무 복잡해진다.</li>
  <li>또한 <strong>최단거리</strong>를 구하는 문제이기 때문에 BFS로 접근하는 편이 좋다.</li>
</ol>

<h5 id="방향배열">방향배열</h5>

<p>방향 배열을 사용하지 않은 예시를 보자. 이는 다음과 같다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">def</span> <span class="nf">connected_node_checker</span><span class="p">(</span><span class="n">the_map</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="p">:</span>
    <span class="c1">## 가장 첫번쨰 열일때.
</span>    <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">:</span>
        <span class="k">if</span> <span class="n">y</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">:</span>
            <span class="n">connected_node</span> <span class="o">=</span> <span class="p">[[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="p">],[</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">]]</span>
            <span class="n">valued_connected_node</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">connected_node</span> <span class="p">:</span>
                <span class="k">if</span> <span class="n">the_map</span><span class="p">[</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">:</span>
                    <span class="n">valued_connected_node</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                <span class="k">else</span> <span class="p">:</span>
                    <span class="k">pass</span>
            <span class="k">return</span> <span class="n">valued_connected_node</span>

        <span class="k">elif</span> <span class="n">y</span> <span class="o">==</span> <span class="nf">len</span><span class="p">(</span><span class="n">the_map</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">-</span><span class="mi">1</span> <span class="p">:</span>
            <span class="n">connected_node</span> <span class="o">=</span> <span class="p">[[</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">],[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span>
            <span class="n">valued_connected_node</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">connected_node</span> <span class="p">:</span>
                <span class="k">if</span> <span class="n">the_map</span><span class="p">[</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">:</span>
                    <span class="n">valued_connected_node</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                <span class="k">else</span> <span class="p">:</span>
                    <span class="k">pass</span>
            <span class="k">return</span> <span class="n">valued_connected_node</span>

        <span class="k">else</span> <span class="p">:</span>
            <span class="n">connected_node</span> <span class="o">=</span> <span class="p">[[</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">],[</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="p">],[</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">y</span><span class="p">]]</span>
            <span class="n">valued_connected_node</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">connected_node</span> <span class="p">:</span>
                <span class="k">if</span> <span class="n">the_map</span><span class="p">[</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                    <span class="n">valued_connected_node</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                <span class="k">else</span> <span class="p">:</span>
                    <span class="k">pass</span>
            <span class="k">return</span> <span class="n">valued_connected_node</span>

    <span class="k">elif</span> <span class="n">x</span> <span class="o">==</span> <span class="nf">len</span><span class="p">(</span><span class="n">the_map</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">:</span>
        <span class="k">if</span> <span class="n">y</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">:</span>
            <span class="n">valued_connected_node</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="n">connected_node</span> <span class="o">=</span> <span class="p">[[</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">],[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="p">]]</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">connected_node</span> <span class="p">:</span>
                <span class="k">if</span> <span class="n">the_map</span><span class="p">[</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">:</span>
                    <span class="n">valued_connected_node</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                <span class="k">else</span> <span class="p">:</span>
                    <span class="k">pass</span>
            <span class="k">return</span> <span class="n">valued_connected_node</span>

        <span class="k">elif</span> <span class="n">y</span> <span class="o">==</span> <span class="nf">len</span><span class="p">(</span><span class="n">the_map</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">:</span>
            <span class="n">valued_connected_node</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="n">connected_node</span> <span class="o">=</span> <span class="p">[[</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span> <span class="p">,</span><span class="n">y</span><span class="p">],</span> <span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">connected_node</span> <span class="p">:</span>
                <span class="k">if</span> <span class="n">the_map</span><span class="p">[</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">:</span>
                    <span class="n">valued_connected_node</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                <span class="k">else</span> <span class="p">:</span>
                    <span class="k">pass</span>
            <span class="k">return</span> <span class="n">valued_connected_node</span>

        <span class="k">else</span> <span class="p">:</span>
            <span class="n">valued_connected_node</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="n">connected_node</span> <span class="o">=</span> <span class="p">[[</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">],</span> <span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]]</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">connected_node</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">the_map</span><span class="p">[</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                    <span class="n">valued_connected_node</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">pass</span>
            <span class="k">return</span> <span class="n">valued_connected_node</span>

    <span class="k">else</span> <span class="p">:</span>
        <span class="k">if</span> <span class="n">y</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">:</span>
            <span class="n">connected_node</span> <span class="o">=</span> <span class="p">[[</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">],[</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">],[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="p">]]</span>
            <span class="n">valued_connected_node</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">connected_node</span> <span class="p">:</span>
                <span class="k">if</span> <span class="n">the_map</span><span class="p">[</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">:</span>
                    <span class="n">valued_connected_node</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                <span class="k">else</span> <span class="p">:</span>
                    <span class="k">pass</span>
            <span class="k">return</span> <span class="n">valued_connected_node</span>

        <span class="k">elif</span> <span class="n">y</span> <span class="o">==</span> <span class="nf">len</span><span class="p">(</span><span class="n">the_map</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">:</span>
            <span class="n">connected_node</span> <span class="o">=</span> <span class="p">[[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">],[</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">],[</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">]]</span>
            <span class="n">valued_connected_node</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">connected_node</span> <span class="p">:</span>
                <span class="k">if</span> <span class="n">the_map</span><span class="p">[</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">:</span>
                    <span class="n">valued_connected_node</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                <span class="k">else</span> <span class="p">:</span>
                    <span class="k">pass</span>
            <span class="k">return</span> <span class="n">valued_connected_node</span>

        <span class="k">else</span> <span class="p">:</span>
            <span class="n">connected_node</span> <span class="o">=</span> <span class="p">[[</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">],[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">+</span><span class="mi">1</span> <span class="p">],[</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">],[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span>
            <span class="n">valued_connected_node</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">connected_node</span> <span class="p">:</span>
                <span class="k">if</span> <span class="n">the_map</span><span class="p">[</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">:</span>
                    <span class="n">valued_connected_node</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                <span class="k">else</span> <span class="p">:</span>
                    <span class="k">pass</span>
            <span class="k">return</span> <span class="n">valued_connected_node</span>

</code></pre></div></div>

<p>위 방법은 매우 불편하다. 물론 이 방법으로 문제를 접근한다고 하더라도 답은 똑같다. 하지만 이렇게 배열의 첫번째 인덱스, 두번쨰 인덱스 모두의 경우의 수를 다 따져서 하드코딩하는 경우에는 반복문의 수가 너무 많고, 구현 과정에서 Human error가 발생할 가능성이 높다. 따라서 이런 경우에는 방향배열이라는 방법을 사용한다. 위 방법과 마찬가지인 내용이지만 훨신 간단하다. 코드를 한번 보자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1"># 방향 배열 정의 (상, 우, 하, 좌)
</span><span class="n">dx</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
<span class="n">dy</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">connected_node_checker_2</span><span class="p">(</span><span class="n">the_map</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="p">:</span>
    <span class="n">valued_connected_node</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
        <span class="n">nx</span><span class="p">,</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">y</span> <span class="o">+</span> <span class="n">dy</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="k">if</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">nx</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">the_map</span><span class="p">)</span> <span class="ow">and</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">ny</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">the_map</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="ow">and</span> <span class="n">the_map</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">valued_connected_node</span><span class="p">.</span><span class="nf">append</span><span class="p">([</span><span class="n">nx</span><span class="p">,</span> <span class="n">ny</span><span class="p">])</span>
    <span class="k">return</span> <span class="n">valued_connected_node</span>

</code></pre></div></div>

<p>코드가 훨신 간단해졌다. 코드의 내용은 간단하다. 중요한 부분은 5번째 라인의 if문이다. 주어진 조건 the_map[i][j] 에서 nx(배열의 첫번째 인덱스)가 0 이하가 될 수는 없다. 그런 경우에는 indexOutOf에러가 발생할 것이다. 또한 nx가 len(the_map)보다 커질 수도 없다. y도 마찬가지이다. if 0 &lt;= nx &lt; len(the_map) and 0 &lt;= ny &lt; len(the_map[0]) 이 부분이 바로 그러한 인덱스를 제한해 준 조건이다.</p>

<p>그리고 and the_map[nx][ny] == 1 부분은 실제로 값을 참조해서 연결되어 있는 노드가 있는지 확인하는 조건이다.
방향 배열을 사용하니 코드가 더 간단해졌다. 수없이 많은 반복문이 없어진 것은 덤이다.</p>

<h5 id="bfs">BFS</h5>

<p>위 함수를 사용하여 BFS를 구현한 함수이다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">def</span> <span class="nf">bfs_to_goal</span><span class="p">(</span><span class="n">the_map</span><span class="p">,</span> <span class="n">start_node</span> <span class="p">:</span> <span class="nb">list</span><span class="p">,</span> <span class="n">goal</span><span class="p">:</span> <span class="nb">list</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">:</span>
    <span class="n">open_list</span> <span class="o">=</span> <span class="nf">deque</span><span class="p">()</span>
    <span class="n">visited_set</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">False</span><span class="p">]</span><span class="o">*</span><span class="nf">len</span><span class="p">(</span><span class="n">the_map</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">the_map</span><span class="p">))]</span>

    <span class="n">open_list</span><span class="p">.</span><span class="nf">append</span><span class="p">([</span><span class="n">start_node</span><span class="p">])</span>
    <span class="n">visited_set</span><span class="p">[</span><span class="n">start_node</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">start_node</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">True</span> 

    <span class="k">while</span> <span class="n">open_list</span> <span class="p">:</span>
        <span class="n">selected_node</span> <span class="o">=</span> <span class="n">open_list</span><span class="p">.</span><span class="nf">popleft</span><span class="p">()</span>
        <span class="n">last_selected_node</span> <span class="o">=</span> <span class="n">selected_node</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

        <span class="k">if</span> <span class="n">last_selected_node</span> <span class="o">==</span> <span class="n">goal</span> <span class="p">:</span>
            <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">selected_node</span><span class="p">)</span>

        <span class="n">connected_node_list</span> <span class="o">=</span> <span class="nf">connected_node_checker_2</span><span class="p">(</span><span class="n">the_map</span><span class="p">,</span> <span class="n">last_selected_node</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">last_selected_node</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">connected_node_list</span> <span class="p">:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">visited_set</span><span class="p">[</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="p">:</span>
                <span class="n">temp</span> <span class="o">=</span> <span class="n">selected_node</span><span class="p">[:]</span>
                <span class="n">temp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                <span class="n">open_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span>
                <span class="n">visited_set</span><span class="p">[</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">True</span> 
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>

</code></pre></div></div>

<p>open_list는 deque이다. 일반 list로 구현할 경우에는 굉장히 느려지기 때문에, deque를 사용해야 한다. 또한 visited_set은 2차원 boolean 배열인데, 처음에는 시간을 위해서 set을 사용했지만(list를 사용하면 안 된다. list는 매우 느리기 때문에 시간초과로 문제가 터져버린다) 이런 경우에 메모리가 초과되어 버렸다. 따라서 2차원 boolean 배열로 각각 노드마다 방문을 했는지 하지 않았는지를 검사했다.</p>

<h5 id="java-코드">java 코드</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">dx</span> <span class="o">=</span> <span class="o">{-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">};</span>
    <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">dy</span> <span class="o">=</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">};</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">condition</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
        <span class="n">condition</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="n">condition</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="n">scanner</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>

        <span class="kt">int</span><span class="o">[][]</span> <span class="n">theMap</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">condition</span><span class="o">[</span><span class="mi">0</span><span class="o">]][</span><span class="n">condition</span><span class="o">[</span><span class="mi">1</span><span class="o">]];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">condition</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">temp</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">theMap</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)</span> <span class="o">-</span> <span class="sc">'0'</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="kt">int</span><span class="o">[]</span> <span class="n">startNode</span> <span class="o">=</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">goal</span> <span class="o">=</span> <span class="o">{</span><span class="n">condition</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">condition</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="mi">1</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="n">bfsToGoal</span><span class="o">(</span><span class="n">theMap</span><span class="o">,</span> <span class="n">startNode</span><span class="o">,</span> <span class="n">goal</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">answer</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">[]&gt;</span> <span class="nf">connectedNodeChecker</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">theMap</span><span class="o">,</span> <span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">[]&gt;</span> <span class="n">valuedConnectedNode</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">nx</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="kt">int</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">y</span> <span class="o">+</span> <span class="n">dy</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="k">if</span><span class="o">(</span><span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">nx</span> <span class="o">&amp;&amp;</span> <span class="n">nx</span> <span class="o">&lt;</span> <span class="n">theMap</span><span class="o">.</span><span class="na">length</span> <span class="o">&amp;&amp;</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">ny</span> <span class="o">&amp;&amp;</span> <span class="n">ny</span> <span class="o">&lt;</span> <span class="n">theMap</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">length</span> <span class="o">&amp;&amp;</span> <span class="n">theMap</span><span class="o">[</span><span class="n">nx</span><span class="o">][</span><span class="n">ny</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="kt">int</span><span class="o">[]</span> <span class="n">temp</span> <span class="o">=</span> <span class="o">{</span><span class="n">nx</span><span class="o">,</span> <span class="n">ny</span><span class="o">};</span>
                <span class="n">valuedConnectedNode</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">temp</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">valuedConnectedNode</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">bfsToGoal</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">theMap</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">startNode</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">goal</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">[]&gt;&gt;</span> <span class="n">openList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
        <span class="kt">boolean</span><span class="o">[][]</span> <span class="n">visitedSet</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">theMap</span><span class="o">.</span><span class="na">length</span><span class="o">][</span><span class="n">theMap</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">length</span><span class="o">];</span>
        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">[]&gt;</span> <span class="n">tempStartNode</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="n">tempStartNode</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">startNode</span><span class="o">);</span>
        <span class="n">openList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">tempStartNode</span><span class="o">);</span>
        <span class="n">visitedSet</span><span class="o">[</span><span class="n">startNode</span><span class="o">[</span><span class="mi">0</span><span class="o">]][</span><span class="n">startNode</span><span class="o">[</span><span class="mi">1</span><span class="o">]]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

        <span class="k">while</span> <span class="o">(!</span><span class="n">openList</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">[]&gt;</span> <span class="n">selectedNode</span> <span class="o">=</span> <span class="n">openList</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
            <span class="kt">int</span><span class="o">[]</span> <span class="n">lastSelectedNode</span> <span class="o">=</span> <span class="n">selectedNode</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">selectedNode</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">lastSelectedNode</span><span class="o">,</span> <span class="n">goal</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">selectedNode</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
            <span class="o">}</span>

            <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">[]&gt;</span> <span class="n">connectedNodeList</span> <span class="o">=</span> <span class="n">connectedNodeChecker</span><span class="o">(</span><span class="n">theMap</span><span class="o">,</span> <span class="n">lastSelectedNode</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="n">lastSelectedNode</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">i</span> <span class="o">:</span> <span class="n">connectedNodeList</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(!</span><span class="n">visitedSet</span><span class="o">[</span><span class="n">i</span><span class="o">[</span><span class="mi">0</span><span class="o">]][</span><span class="n">i</span><span class="o">[</span><span class="mi">1</span><span class="o">]])</span> <span class="o">{</span>
                    <span class="n">visitedSet</span><span class="o">[</span><span class="n">i</span><span class="o">[</span><span class="mi">0</span><span class="o">]][</span><span class="n">i</span><span class="o">[</span><span class="mi">1</span><span class="o">]]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
                    <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">[]&gt;</span> <span class="n">clonedSelectedNode</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">selectedNode</span><span class="o">);</span>
                    <span class="n">clonedSelectedNode</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                    <span class="n">openList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">clonedSelectedNode</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name>ash tensor</name></author><category term="백준" /><category term="PS" /><category term="자료구조" /><category term="파이썬" /><category term="JAVA" /><summary type="html"><![CDATA[[백준][자료구조] 백준 2178번 :: 미로 탐색 :: 실버 1]]></summary></entry><entry><title type="html">[백준][자료구조] 백준 1935번 :: 후위 표기식 2 :: 실버 3</title><link href="http://localhost:4000/java/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/%EB%B0%B1%EC%A4%80/ps/2024/01/23/boj1935.html" rel="alternate" type="text/html" title="[백준][자료구조] 백준 1935번 :: 후위 표기식 2 :: 실버 3" /><published>2024-01-23T00:00:00+09:00</published><updated>2024-01-23T00:00:00+09:00</updated><id>http://localhost:4000/java/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/%EB%B0%B1%EC%A4%80/ps/2024/01/23/boj1935</id><content type="html" xml:base="http://localhost:4000/java/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/%EB%B0%B1%EC%A4%80/ps/2024/01/23/boj1935.html"><![CDATA[<h2 id="백준자료구조-백준-1935번--후위-표기식-2--실버-3">[백준][자료구조] 백준 1935번 :: 후위 표기식 2 :: 실버 3</h2>

<h3 id="문제-설명">문제 설명</h3>

<p>후위 표기식과 각 피연산자에 대응하는 값들이 주어져 있을 때, 그 식을 계산하는 프로그램을 작성하시오.</p>

<p><strong>입력</strong></p>

<p>첫째 줄에 피연산자의 개수(1 ≤ N ≤ 26) 가 주어진다. 그리고 둘째 줄에는 후위 표기식이 주어진다. (여기서 피연산자는 A~Z의 영대문자이며, A부터 순서대로 N개의 영대문자만이 사용되며, 길이는 100을 넘지 않는다) 그리고 셋째 줄부터 N+2번째 줄까지는 각 피연산자에 대응하는 값이 주어진다. 3번째 줄에는 A에 해당하는 값, 4번째 줄에는 B에 해당하는값 , 5번째 줄에는 C …이 주어진다, 그리고 피연산자에 대응 하는 값은 100보다 작거나 같은 자연수이다.</p>

<p>후위 표기식을 앞에서부터 계산했을 때, 식의 결과와 중간 결과가 -20억보다 크거나 같고, 20억보다 작거나 같은 입력만 주어진다.</p>

<p><strong>출력</strong></p>

<p>계산 결과를 소숫점 둘째 자리까지 출력한다.</p>

<h3 id="제한시간">제한시간</h3>

<p>2 초	128 MB</p>

<h3 id="예제-입력">예제 입력</h3>

<p>5
ABC*+DE/-
1
2
3
4
5</p>

<h3 id="예제-출력">예제 출력</h3>

<p>6.20</p>

<h4 id="접근방법">접근방법</h4>

<p>이 문제는 자료구조의 스택을 활용하는 문제로, 대표적인 스택을 활용한 자료구조 예제 중 하나이다. 보통 괄호 검사와 함께 자료구조 시간에 배우는데, 이를 풀기 위해서는 후위 표기식을 알아야 하고, 스택 자료구조를 사용할 줄 알아야 한다.</p>

<p>5%에서 해결이 안 돼서 곤란했는데 float으로는 정밀도를 해결할 수 없어서 Double로 계산해야만 문제가 풀린다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">boj</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">boj1935</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">solve</span><span class="o">();</span>

    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">solve</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">quest</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="n">scanner</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>

        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Double</span><span class="o">&gt;</span> <span class="n">operandMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>


        <span class="kt">char</span><span class="o">[]</span> <span class="n">operator</span> <span class="o">=</span> <span class="o">{</span><span class="sc">'*'</span><span class="o">,</span> <span class="sc">'+'</span><span class="o">,</span> <span class="sc">'-'</span><span class="o">,</span> <span class="sc">'/'</span><span class="o">};</span>

        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">&gt;</span> <span class="n">operators</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">operator</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">operators</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nc">String</span> <span class="n">questLine</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>
        <span class="kt">char</span><span class="o">[]</span> <span class="n">questArray</span> <span class="o">=</span> <span class="n">questLine</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>

        <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">questStack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">questLine</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">operators</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">questArray</span><span class="o">[</span><span class="n">i</span><span class="o">]))</span> <span class="o">{</span>

                <span class="k">switch</span><span class="o">(</span><span class="n">questArray</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
                    <span class="k">case</span> <span class="sc">'*'</span> <span class="o">:</span>
                        <span class="nc">String</span> <span class="n">temp1</span> <span class="o">=</span> <span class="n">questStack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                        <span class="nc">String</span> <span class="n">temp2</span> <span class="o">=</span> <span class="n">questStack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>

                        <span class="nc">Double</span> <span class="n">operand1</span> <span class="o">=</span> <span class="n">operandMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">temp2</span><span class="o">);</span>
                        <span class="nc">Double</span> <span class="n">operand2</span> <span class="o">=</span> <span class="n">operandMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">temp1</span><span class="o">);</span>

                        <span class="nc">Double</span> <span class="n">tempAnswer</span> <span class="o">=</span> <span class="n">operand1</span> <span class="o">*</span> <span class="n">operand2</span><span class="o">;</span>
                        <span class="n">questStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">tempAnswer</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
                        <span class="n">operandMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">tempAnswer</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">tempAnswer</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>

                    <span class="k">case</span> <span class="sc">'-'</span> <span class="o">:</span>
                        <span class="nc">String</span> <span class="n">temp3</span> <span class="o">=</span> <span class="n">questStack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                        <span class="nc">String</span> <span class="n">temp4</span> <span class="o">=</span> <span class="n">questStack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>

                        <span class="nc">Double</span> <span class="n">operand3</span> <span class="o">=</span> <span class="n">operandMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">temp4</span><span class="o">);</span>
                        <span class="nc">Double</span> <span class="n">operand4</span> <span class="o">=</span> <span class="n">operandMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">temp3</span><span class="o">);</span>

                        <span class="nc">Double</span> <span class="n">tempAnswer1</span> <span class="o">=</span> <span class="n">operand3</span> <span class="o">-</span> <span class="n">operand4</span><span class="o">;</span>
                        <span class="n">questStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">tempAnswer1</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
                        <span class="n">operandMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">tempAnswer1</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">tempAnswer1</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>

                    <span class="k">case</span> <span class="sc">'+'</span> <span class="o">:</span>
                        <span class="nc">String</span> <span class="n">temp5</span> <span class="o">=</span> <span class="n">questStack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                        <span class="nc">String</span> <span class="n">temp6</span> <span class="o">=</span> <span class="n">questStack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>

                        <span class="nc">Double</span> <span class="n">operand5</span> <span class="o">=</span> <span class="n">operandMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">temp6</span><span class="o">);</span>
                        <span class="nc">Double</span> <span class="n">operand6</span> <span class="o">=</span> <span class="n">operandMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">temp5</span><span class="o">);</span>

                        <span class="nc">Double</span> <span class="n">tempAnswer2</span> <span class="o">=</span> <span class="n">operand5</span> <span class="o">+</span> <span class="n">operand6</span><span class="o">;</span>
                        <span class="n">questStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">tempAnswer2</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
                        <span class="n">operandMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">tempAnswer2</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">tempAnswer2</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>

                    <span class="k">case</span> <span class="sc">'/'</span> <span class="o">:</span>
                        <span class="nc">String</span> <span class="n">temp7</span> <span class="o">=</span> <span class="n">questStack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                        <span class="nc">String</span> <span class="n">temp8</span> <span class="o">=</span> <span class="n">questStack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>

                        <span class="nc">Double</span> <span class="n">operand7</span> <span class="o">=</span> <span class="n">operandMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">temp8</span><span class="o">);</span>
                        <span class="nc">Double</span> <span class="n">operand8</span> <span class="o">=</span> <span class="n">operandMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">temp7</span><span class="o">);</span>

                        <span class="nc">Double</span> <span class="n">tempAnswer3</span> <span class="o">=</span> <span class="n">operand7</span> <span class="o">/</span> <span class="n">operand8</span><span class="o">;</span>
                        <span class="n">questStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">tempAnswer3</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
                        <span class="n">operandMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">tempAnswer3</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">tempAnswer3</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">operandMap</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="nc">Character</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">questArray</span><span class="o">[</span><span class="n">i</span><span class="o">])))</span> <span class="o">{</span>
                    <span class="n">questStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="nc">Character</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">questArray</span><span class="o">[</span><span class="n">i</span><span class="o">]));</span>

                <span class="o">}</span>
                <span class="k">else</span> <span class="o">{</span>
                <span class="nc">Double</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextDouble</span><span class="o">();</span>
                <span class="n">scanner</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>

                <span class="n">operandMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="nc">Character</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">questArray</span><span class="o">[</span><span class="n">i</span><span class="o">]),</span> <span class="n">temp</span><span class="o">);</span>
                <span class="n">questStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="nc">Character</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">questArray</span><span class="o">[</span><span class="n">i</span><span class="o">]));</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="nc">String</span> <span class="n">answer</span> <span class="o">=</span> <span class="n">questStack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
        <span class="nc">Double</span> <span class="n">finalAnswer</span> <span class="o">=</span> <span class="nc">Double</span><span class="o">.</span><span class="na">parseDouble</span><span class="o">(</span><span class="n">answer</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%.2f"</span><span class="o">,</span> <span class="n">finalAnswer</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name>ash tensor</name></author><category term="JAVA" /><category term="자료구조" /><category term="백준" /><category term="PS" /><summary type="html"><![CDATA[[백준][자료구조] 백준 1935번 :: 후위 표기식 2 :: 실버 3]]></summary></entry><entry><title type="html">[백준][PS] 회사에 있는 사람 :: 실버 5(자료구조)</title><link href="http://localhost:4000/ps/%EB%B0%B1%EC%A4%80/java/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/2024/01/17/coworkerInCompany.html" rel="alternate" type="text/html" title="[백준][PS] 회사에 있는 사람 :: 실버 5(자료구조)" /><published>2024-01-17T00:00:00+09:00</published><updated>2024-01-17T00:00:00+09:00</updated><id>http://localhost:4000/ps/%EB%B0%B1%EC%A4%80/java/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/2024/01/17/coworkerInCompany</id><content type="html" xml:base="http://localhost:4000/ps/%EB%B0%B1%EC%A4%80/java/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/2024/01/17/coworkerInCompany.html"><![CDATA[<h2 id="백준ps-회사에-있는-사람--실버-5자료구조">[백준][PS] 회사에 있는 사람 :: 실버 5(자료구조)</h2>

<h3 id="문제-설명">문제 설명</h3>

<p>상근이는 세계적인 소프트웨어 회사 기글에서 일한다. 이 회사의 가장 큰 특징은 자유로운 출퇴근 시간이다. 따라서, 직원들은 반드시 9시부터 6시까지 회사에 있지 않아도 된다.</p>

<p>각 직원은 자기가 원할 때 출근할 수 있고, 아무때나 퇴근할 수 있다.</p>

<p>상근이는 모든 사람의 출입카드 시스템의 로그를 가지고 있다. 이 로그는 어떤 사람이 회사에 들어왔는지, 나갔는지가 기록되어져 있다. 로그가 주어졌을 때, 현재 회사에 있는 모든 사람을 구하는 프로그램을 작성하시오.</p>

<p><strong>입력</strong></p>

<p>첫째 줄에 로그에 기록된 출입 기록의 수 n이 주어진다. (2 ≤ n ≤ 106) 다음 n개의 줄에는 출입 기록이 순서대로 주어지며, 각 사람의 이름이 주어지고 “enter”나 “leave”가 주어진다. “enter”인 경우는 출근, “leave”인 경우는 퇴근이다.</p>

<p>회사에는 동명이인이 없으며, 대소문자가 다른 경우에는 다른 이름이다. 사람들의 이름은 알파벳 대소문자로 구성된 5글자 이하의 문자열이다.</p>

<p><strong>출력</strong></p>

<p>현재 회사에 있는 사람의 이름을 사전 순의 역순으로 한 줄에 한 명씩 출력한다.</p>

<h3 id="제한시간">제한시간</h3>

<p>1초, 메모리제한 256MB</p>

<h4 id="접근-방법">접근 방법</h4>

<p>솔직히 엄청 쉬운 문제다. 누구나 구현할 수 있고, 전공자가 아니더라도 누구나 이 문제를 구현하는데는 문제가 없을 것이다. 맵 자료형을 써도 되고, 파이썬에서는 딕셔너리를 쓰거나, 해시 맵을 쓰거나, 집합 자료구조를 사용해도 문제는 무리 없이 풀린다. 하지만 자료구조에 대한 이해가 없이 배열과 같은 선형 자료구조를 사용하면 <strong>시간 초과</strong>를 마주치는 문제다. 개인적으로 이 문제는 좋은 문제라고 생각해서 가져왔다.</p>

<h5 id="잘못된-접근">잘못된 접근</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">boj</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.lang.reflect.Array</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">boj7785</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">coworkerList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="nc">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">coworkerNumber</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">coworkerNumber</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">coworkerName</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
            <span class="nc">String</span> <span class="n">sign</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">sign</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"enter"</span><span class="o">)){</span>
                <span class="n">coworkerList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">coworkerName</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="o">{</span>
               <span class="n">coworkerList</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">coworkerName</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">coworkerList</span><span class="o">,</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">reverseOrder</span><span class="o">());</span>
        <span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">coworker</span> <span class="o">:</span> <span class="n">coworkerList</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">coworker</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이렇게 풀어도 답은 문제없이 나온다. 하지만 시간초과로 문제 해결이 실패하게 된다. 구현방법을 보면 enter이면 ArrayList<String>에 동료의 이름을 집어 넣고, 만약에 leave라는 문자열을 마주치면 ArrayList에서 해당 문자열을 삭제한다.</String></p>

<p>여기서 문제가 발생하는데, 배열과 같은 선형 자료구조는 중간 노드의 삽입과 삭제가 빈번하게 일어날 때, 성능이 매우 나빠진다.</p>

<p>왜냐하면 연속된 메모리 공간에 요소들을 저장하고 있기 때문에 중간에 요소를 추가하거나, 삭제하면 해당 위치 이후의 모든 요소를 이동시켜야만 한다. 이런 경우에 노드의 추가와 삭제에 소요되는 시간 복잡도는 O(n)이 된다. 이렇게 추가적으로 시간이 매우 많이 소요되기 때문에 1초라는 시간으로는 문제를 풀이할 수 없다.</p>

<p>이런 경우에는 순서가 상관없는 자료구조로 문제를 풀이해야 한다. 대표적으로는 set 자료형이 있다. 다음은 HashSet 자료형으로 풀이한 자바 코드다.</p>

<h4 id="자바-풀이">자바 풀이</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">boj7785</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">coworkerSet</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>

        <span class="nc">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">coworkerNumber</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">coworkerNumber</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">coworkerName</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
            <span class="nc">String</span> <span class="n">sign</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>

            <span class="k">if</span> <span class="o">(</span><span class="n">sign</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"enter"</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">coworkerSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">coworkerName</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">coworkerSet</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">coworkerName</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">coworkerList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">coworkerSet</span><span class="o">);</span>
        <span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">coworkerList</span><span class="o">,</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">reverseOrder</span><span class="o">());</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">coworker</span> <span class="o">:</span> <span class="n">coworkerList</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">coworker</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>ash tensor</name></author><category term="PS" /><category term="백준" /><category term="JAVA" /><category term="자료구조" /><summary type="html"><![CDATA[[백준][PS] 회사에 있는 사람 :: 실버 5(자료구조)]]></summary></entry><entry><title type="html">[깃허브 블로그] 동일 카테고리의 최근 글 기능 개발(clean blog theme)</title><link href="http://localhost:4000/%EA%B9%83%ED%97%88%EB%B8%8C/2024/01/17/bottom-category-build.html" rel="alternate" type="text/html" title="[깃허브 블로그] 동일 카테고리의 최근 글 기능 개발(clean blog theme)" /><published>2024-01-17T00:00:00+09:00</published><updated>2024-01-17T00:00:00+09:00</updated><id>http://localhost:4000/%EA%B9%83%ED%97%88%EB%B8%8C/2024/01/17/bottom-category-build</id><content type="html" xml:base="http://localhost:4000/%EA%B9%83%ED%97%88%EB%B8%8C/2024/01/17/bottom-category-build.html"><![CDATA[<h2 id="동일-카테고리의-최근-글-기능">동일 카테고리의 최근 글 기능</h2>

<p><img src="/img/posts/clean-blog-setup/18.png" style="display: block; margin-left: auto; margin-right: auto; width: 80%" /></p>

<p>사진을 보면 이해가 아주 쉬울텐데
티스토리 블로그나 네이버 블로그 모두, 블로그 하단부에는 최근 동일 카테고리의 글 몇개를 보여주는 기능이 존재한다(정확히 무슨 이름인지는 모르겠다). 상황에 따라 전부 보여주기도 하고, 최근 글 몇개만 보여주기도 한다. 아마 잘은 모르겠지만 blogger나 wordpress 모두 동일할 것이다. 나도 그런 블로그에 익숙해서인지 모르겠지만 NavBar에 카테고리를 추가하기도 하고, 헤더 부분과 본문에 카테고리 링크를 표시하는 기능을 추가하기도 했는데 아무리 그래도 블로그에 이 기능이 없으면 허전하다고 느꼈고, 리퀴드 / html에 익숙해지기도 했고 해서, 이렇게 추가하게 되었다.</p>

<h3 id="코드">코드</h3>

<p>post.markdown 파일을 수정하면 된다. 나는 댓글창 위에 있는게 편해서 if page.comments 부분 위에 추가했는데 본인이 불편하지 않은 곳 어디든 추가하면 된다. 당연히 기존 코드 구조를 해치지 않는 선에서.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
&lt;ul class="row mb-5 "&gt;
{% assign firstCategory = page.categories | first %}
&lt;p&gt;
    &lt;a style= "font-size: 20px; font-weight: bold;" href= "{{ site.url }}/category/{{ firstCategory }}.html"&gt;
    {{ firstCategory }} 카테고리의 다른 글
    &lt;/a&gt;
&lt;/p&gt;
{% assign posts = site.categories[firstCategory] | sort: 'date' | reverse | limit: 5 %}
{% assign counter = 0 %}
{% for post in posts %}
    {% if counter &lt; 5 %}
    
    &lt;li&gt;
        &lt;h3&gt;
        &lt;a href="{{ site.baseurl }}{{ post.url }}" style= "font-size: 20px;"&gt;
            {{ post.title }}
        &lt;/a&gt;
        &lt;small style= "font-size: 20px;"&gt;{{ post.date | date_to_string }}&lt;/small&gt;
        &lt;/h3&gt;
    &lt;/li&gt;
    {% assign counter = counter | plus: 1 %}
    {% endif %}
{% endfor %}
&lt;/ul&gt;


</code></pre></div></div>

<h3 id="설명">설명</h3>

<p>지킬에서 사용하는 리퀴드 언어에서는 assign을 이용해서 변수를 할당한다. 이건 자바스크립트와 조금 비슷한 것 같다. 그래서 코드를 살펴보면  firstCategory라는 변수에 page의 categories의 첫번째 카테고리를 할당한다. 여기서 page.categories라는 리스트는 프론트매터의 categoris: xxx에 해당하는 부분이다.</p>

<p><img src="/img/posts/clean-blog-setup/19.png" style="display: block; margin-left: auto; margin-right: auto; width: 80%" /></p>

<p>바로 이 부분.</p>

<p>당연하겠지만 이 기능은 첫번째 카테고리의 내용만을 표시한다. 카테고리에는 여러개의 카테고리를 할당할 수는 있지만 보여주는건 하나뿐이다. 아무래도 여러개를 보여주면 너무 헷갈리지 않을까 싶어서 이렇게 설정했다. 리퀴드에서는 파이썬의 for문과 똑같이 for x in xlist 구조의 향상된 순회가 가능하다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% assign posts = site.categories[firstCategory] | sort: 'date' | reverse | limit: 5 %}
{% assign counter = 0 %}
{% for post in posts %}
    {% if counter &lt; 5 %}
    
    &lt;li&gt;
        &lt;h3&gt;
        &lt;a href="{{ site.baseurl }}{{ post.url }}" style= "font-size: 20px;"&gt;
            {{ post.title }}
        &lt;/a&gt;
        &lt;small style= "font-size: 20px;"&gt;{{ post.date | date_to_string }}&lt;/small&gt;
        &lt;/h3&gt;
    &lt;/li&gt;
    {% assign counter = counter | plus: 1 %}
    {% endif %}
{% endfor %}
</code></pre></div></div>

<p>그리고 위 부분에서는 예전에 카테고리를 만들때 사용했던 코드를 응용했는데, 이해가 가지 않았던 점은 분명 <strong>limit: 5</strong>를 설정했는데 어떻게 해도 5개 이상으로 표시가 되어서 GPT에게도 물어봤지만 “코드는 정확해, 아무런 문제도 없어.” 라는 대답만 들을 수 있었다. 왜 그런지 잘 모르겠는데, 정렬 문제인가 싶어서 여러번 설정을 바꿔봤지만 그 문제는 아닌 것 같다. 어쩔 수 없이 그냥 for 문에 카운터를 설정해서 5개만 표시되도록 코드를 수정했다. « 이유 아는 사람 있으면 알려주시길</p>

<p>아무튼 수정한 결과 이 문단의 바로 아랫부분에 나오는 페이지를 완성할 수 있었다! CSS 스타일을 내가 처음부터 직접 만든 게 아니라 상당히 투박하기도 하고 모바일에서 어떻게 나올지는 잘 모르겠지만 일단 작동은 하긴 하니까, 여기에서 마무리 지어야겠다.</p>]]></content><author><name>ash tensor</name></author><category term="깃허브" /><summary type="html"><![CDATA[동일 카테고리의 최근 글 기능]]></summary></entry><entry><title type="html">[자바][자료구조] T 메모리구조</title><link href="http://localhost:4000/java/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/2024/01/17/tMemoryJava.html" rel="alternate" type="text/html" title="[자바][자료구조] T 메모리구조" /><published>2024-01-17T00:00:00+09:00</published><updated>2024-01-17T00:00:00+09:00</updated><id>http://localhost:4000/java/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/2024/01/17/tMemoryJava</id><content type="html" xml:base="http://localhost:4000/java/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/2024/01/17/tMemoryJava.html"><![CDATA[<h2 id="자바자료구조-t-메모리구조">[자바][자료구조] T 메모리구조</h2>

<p><img src="/img/posts/JAVA/TMemorySample.png" style="display: block; margin-left: auto; margin-right: auto; width: 100%" /></p>

<h3 id="mainjava">Main.java</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">tmemorysample</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">SAMPLE_INTEGER_A</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="no">SAMPLE_INTEGER_B</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">fact</span><span class="o">(</span><span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">target</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="n">target</span> <span class="o">*</span> <span class="n">fact</span><span class="o">(</span><span class="n">target</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
            <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">sample</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="n">sample</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="no">SAMPLE_INTEGER_A</span><span class="o">);</span>
        <span class="n">sample</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="no">SAMPLE_INTEGER_B</span><span class="o">);</span>

        <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="nc">SolveA</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">sample</span><span class="o">);</span>

        <span class="nc">SolveB</span> <span class="n">solveB</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SolveB</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">solveB</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">sample</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">&gt;=</span> <span class="no">SAMPLE_INTEGER_A</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">fact</span><span class="o">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">SolveA</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">a</span><span class="o">){</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">a</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">answer</span> <span class="o">+=</span> <span class="n">a</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="solvebjava">SolveB.java</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">tmemorysample</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SolveB</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">a</span><span class="o">){</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">a</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">answer</span> <span class="o">+=</span> <span class="n">a</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name>ash tensor</name></author><category term="JAVA" /><category term="자료구조" /><summary type="html"><![CDATA[[자바][자료구조] T 메모리구조]]></summary></entry><entry><title type="html">[프로그래머스][PS] 타겟 넘버 :: LEVEL 2 (DP 풀이)</title><link href="http://localhost:4000/ps/dp/%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/java/2024/01/16/targetNumber.html" rel="alternate" type="text/html" title="[프로그래머스][PS] 타겟 넘버 :: LEVEL 2 (DP 풀이)" /><published>2024-01-16T00:00:00+09:00</published><updated>2024-01-16T00:00:00+09:00</updated><id>http://localhost:4000/ps/dp/%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/java/2024/01/16/targetNumber</id><content type="html" xml:base="http://localhost:4000/ps/dp/%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/java/2024/01/16/targetNumber.html"><![CDATA[<h2 id="프로그래머스ps-타겟-넘버--level-2-dp-풀이">[프로그래머스][PS] 타겟 넘버 :: LEVEL 2 (DP 풀이)</h2>

<h3 id="문제-설명">문제 설명</h3>

<p>문제 설명
n개의 음이 아닌 정수들이 있습니다. 이 정수들을 순서를 바꾸지 않고 적절히 더하거나 빼서 타겟 넘버를 만들려고 합니다. 예를 들어 [1, 1, 1, 1, 1]로 숫자 3을 만들려면 다음 다섯 방법을 쓸 수 있습니다.</p>

<p>-1+1+1+1+1 = 3</p>

<p>+1-1+1+1+1 = 3</p>

<p>+1+1-1+1+1 = 3</p>

<p>+1+1+1-1+1 = 3</p>

<p>+1+1+1+1-1 = 3</p>

<p>사용할 수 있는 숫자가 담긴 배열 numbers, 타겟 넘버 target이 매개변수로 주어질 때 숫자를 적절히 더하고 빼서 타겟 넘버를 만드는 방법의 수를 return 하도록 solution 함수를 작성해주세요.</p>

<p><strong>제한사항</strong></p>

<ol>
  <li>주어지는 숫자의 개수는 2개 이상 20개 이하입니다.</li>
  <li>각 숫자는 1 이상 50 이하인 자연수입니다.</li>
  <li>타겟 넘버는 1 이상 1000 이하인 자연수입니다.</li>
</ol>

<h3 id="서론">서론</h3>

<p>일단 프로그래머스에서는 이 문제를 DFS / BFS 문제로 설정해 놓았다. 당연히, 이렇게 풀 수 있다. 
조합을 만들어서, 선택된 값들을 음수 또는 양수로 바꿔서 Sum을 리턴하면 되는 문제다.
하지만 굳이 풀어보지 않더라도 아마 이 방법은 분명 최적해가 아닐 것이다. (DFS, BFS로 풀지 못한다는 말이 아니다!!) 
내 경험상 많은 경우에, 이런 문제의 최적해는 DP로 풀어야 하는 경우가 많다.</p>

<h3 id="접근-방법">접근 방법</h3>

<p>이 문제는 <strong>동전 거스름돈 문제</strong> 와 유사하다.</p>

<p>일단 각 노드는 양수와 음수만을 가질 수 있으므로</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>양수 부분집합의 합 - 음수 부분집합의 합 = 타겟 넘버
양수 부분집합의 합 + 음수 부분집합의 합 = 주어진 숫자들의 합
</code></pre></div></div>

<p>이렇게 부분집합을 나눌 수 있다.</p>

<p>이 방정식을 풀면</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2 * 양수 부분집합이 합 + (음수 부분집합의 합은 소거된다) = 타겟 넘버 + 주어진 숫자들의 합  
</code></pre></div></div>

<p>이고, 따라서</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>양수 부분집합의 합 = (타겟 넘버 + 주어진 숫자들의 합) / 2 라는 결과를 얻을 수 있다.
</code></pre></div></div>

<p>또한 만약에 조건을 quest = [1,2,3] 이고 targetNumber = 1 인 조건을 생각해 보자.
이를 위 식에 대입해 보면</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>양수 부분집합의 합 = ( 1 + 6 ) / 2 로 3.5
</code></pre></div></div>

<p>3.5가 나오는데 이는 문제의 조건에 위배된다. 당연히 int끼리 더하고 빼는데 어떻게 float이 나오겠는가? 정수를 더하고 빼는데 유리수가 나올 수 없다.
따라서 만약 이런 경우에는 해가 없어서 0을 리턴해야 한다. 이렇게 문제의 조건을 간단하게 양수 부분집합의 합으로만 한정지었다.</p>

<p>이제 DP를 사용할 수 있다.</p>

<h3 id="파이썬-코드">파이썬 코드</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">quest</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
    <span class="n">sum_quest</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">(</span><span class="n">quest</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">sum_quest</span> <span class="o">&lt;</span> <span class="n">target</span> <span class="ow">or</span> <span class="p">(</span><span class="n">sum_quest</span> <span class="o">+</span> <span class="n">target</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">0</span>

    <span class="n">subset_sum</span> <span class="o">=</span> <span class="p">(</span><span class="n">sum_quest</span> <span class="o">+</span> <span class="n">target</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
    <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">subset_sum</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">quest</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">subset_sum</span><span class="p">,</span> <span class="n">num</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="n">dp</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="n">num</span><span class="p">]</span>

    <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="n">subset_sum</span><span class="p">]</span>

</code></pre></div></div>

<p>dp 배열은 각 부분집합의 합이 index가 되는 경우이다. 아까의 예시로 돌아가보자. 즉 quest가 [1, 2, 3]이고 targetNumber가 2일때
dp[0] 은 부분집합의 합이 0이 되는 경우이고, dp[1]은 부분집합의 합이 1이 되는 경우이다. 이런 경우에 8번 라인을 보면 dp[0] = 1이라고 초기화 해 놨는데 이는 당연하다</p>

<p>왜냐하면 부분집합의 합이 0이 되는 경우는 단 한가지, 아무것도 선택하지 않는 경우 하나밖에는 없기 떄문이다.</p>

<p>이제 for 루프로 넘어가보면 quest 배열, 즉 조건 [1, 2, 3] 일때를 계속 설명해보자.</p>

<p>num이 1일때 j는 subset_sum(양수 부분집합의 합) 부터 num - 1 까지 역순회를 한다. j는 4이므로
dp[4] = dp[4- num (즉 3)] ….. dp[1] = dp[1] + dp[1 - num(즉 0)] 이 된다. 이는 부분집합의 합이 1인 경우는 부분집합의 합이 [0]이 되는 경우에 1을 더하는 것으로. num이 1일때만 가능하다. 이는 동전 거스르기 문제와 비슷하다고 할 수 있다.</p>

<p>dp[j]를 “j원을 거슬러주는 방법의 수”라고 생각해보자. 그리고 주어진 숫자들을 각각 “동전”이라고 생각했을때 이제 이 “동전”들을 사용하여 “j원”을 만드는 방법의 수를 찾는 것이다.</p>

<p>dp[j]에 dp[j - num]을 더하는 것은, “j원”을 만드는 방법에 “j - num원”을 만드는 방법을 추가하는 것으로 이는 “num원 짜리 동전”을 추가로 사용하여 “j원”을 만드는 새로운 방법을 찾는 것을 의미한다.</p>

<h3 id="자바-풀이">자바 풀이</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">quest</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">sumQuest</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">:</span> <span class="n">quest</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">sumQuest</span> <span class="o">=</span> <span class="n">sumQuest</span> <span class="o">+</span> <span class="n">i</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kt">int</span> <span class="n">subsetSum</span> <span class="o">=</span> <span class="o">(</span><span class="n">sumQuest</span> <span class="o">+</span> <span class="n">target</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">dp</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">subsetSum</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
        <span class="n">dp</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">quest</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">subsetSum</span><span class="o">;</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="n">num</span><span class="o">;</span> <span class="n">j</span><span class="o">--)</span> <span class="o">{</span> <span class="c1">// j &gt;= num으로 변경</span>
                <span class="n">dp</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">dp</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">+</span> <span class="n">dp</span><span class="o">[</span><span class="n">j</span> <span class="o">-</span> <span class="n">num</span><span class="o">];</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">dp</span><span class="o">[</span><span class="n">subsetSum</span><span class="o">];</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">quest</span> <span class="o">=</span> <span class="o">{</span><span class="mi">4</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">targetNumber</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
        <span class="nc">Solution</span> <span class="n">sol</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Solution</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="n">sol</span><span class="o">.</span><span class="na">solution</span><span class="o">(</span><span class="n">quest</span><span class="o">,</span><span class="n">targetNumber</span><span class="o">);</span> 
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">answer</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>ash tensor</name></author><category term="PS" /><category term="DP" /><category term="파이썬" /><category term="프로그래머스" /><category term="JAVA" /><summary type="html"><![CDATA[[프로그래머스][PS] 타겟 넘버 :: LEVEL 2 (DP 풀이)]]></summary></entry><entry><title type="html">[JAVA] 중첩 클래스</title><link href="http://localhost:4000/java/2024/01/12/nestedclass.html" rel="alternate" type="text/html" title="[JAVA] 중첩 클래스" /><published>2024-01-12T00:00:00+09:00</published><updated>2024-01-12T00:00:00+09:00</updated><id>http://localhost:4000/java/2024/01/12/nestedclass</id><content type="html" xml:base="http://localhost:4000/java/2024/01/12/nestedclass.html"><![CDATA[<p>자바의 중첩 클래스(Nested Class)는 다른 클래스 내부에 정의된 클래스를 말한다. 중첩 클래스는 외부 클래스의 멤버로 간주되고, 외부 클래스의 멤버 변수 및 메서드에 쉽게 접근할 수 있다. 보통 논리적으로 관련된 클래스를 그룹화하는데 사용된다.</p>

<p><strong>상속과 같은 개념의 확장 관계는 아니지만 어떤 개념의 상하관계를 개념적으로 구현해야 하는 경우에 사용되는데</strong> 예를 들어서 국적 또는 국민은 국가라는 개념의 확장이 아니므로 상속 관계로 표현이 불가능하기 때문이다.</p>

<p>구현 포인트는 다음과 같다.</p>

<ol>
  <li>
    <p>예시 코드에서 Korean 및 American, NorthKorean 은 각 국가의 중첩 클래스로 작성하였다. Korean.Korean, US.American은 인터페이스 <strong>ILibertyToMove</strong>의 구현체이기 때문에 <strong>tourAbroad(Nation nation) 및 submittingPassport 메소드</strong>가 존재하기 때문에 여행이 가능하고, NorthKorea.NorthKorean은 구현체가 아니라 해외 여행 및 여권 제출이 불가능하다.</p>
  </li>
  <li>
    <p>마찬가지로 Korea, US, NorthKorea 모두 추상 클래스 Nation을 상속받았지만, Korea, US는 인터페이스 <strong>IVisitable</strong>의 구현체이여서 Korea.Korean, US.American이 서로의 국가를 방문 가능하다. 하지만 NorthKorean은 IVisitable의 구현체가 아니기 때문에 타 국가가 해당 국가의 방문이 불가능하다.</p>
  </li>
  <li>
    <p>각 국가는 중첩 클래스로 <strong>.administraionBureau, .ImmigrationBureau</strong>를 가지고(싱글톤이다), 각 Bureau는 추상 클래스인 Bureau를 상속하고, <strong>ImmigrationBureau는 IImmigrationBureau라는 인터페이스</strong>를 상속받아 <strong>visa 메소드와 immigrationScreening 메소드</strong>와 같은 일반적인 Bureau가 아닌 이민청의 일을 할 수 있게 구현했다.</p>
  </li>
</ol>

<p>이번 구현을 통해서 타입 캐스팅을 하며 인터페이스가 왜 필요한지 절실히 깨닫는 계기가 되었다. 구현이 부족한 부분이 많지만 일단 이 정도로 마무리할 생각이다.</p>

<p>자세한 코드는 <a href="https://github.com/Ash-tensor/studyingJava.git">깃허브 주소</a>에 업로드했다.</p>

<h2 id="구현-예시">구현 예시</h2>

<h3 id="main">Main</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">jan11st</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// 싱글톤이기 때문에 Korea, US, NorthKorea 객체는 생성하지 않아도 됨</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"객체 생성"</span><span class="o">);</span>
        <span class="nc">Korea</span><span class="o">.</span><span class="na">Korean</span> <span class="no">A</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Korea</span><span class="o">.</span><span class="na">Korean</span><span class="o">(</span><span class="s">"한국인"</span><span class="o">,</span> <span class="s">"Male"</span><span class="o">,</span> <span class="s">"KOREA"</span><span class="o">);</span>
        <span class="no">US</span><span class="o">.</span><span class="na">American</span> <span class="no">B</span> <span class="o">=</span> <span class="k">new</span> <span class="no">US</span><span class="o">.</span><span class="na">American</span><span class="o">(</span><span class="s">"미국인"</span><span class="o">,</span> <span class="s">"Female"</span><span class="o">,</span> <span class="s">"US"</span><span class="o">);</span>
        <span class="nc">NorthKorea</span><span class="o">.</span><span class="na">NorthKorean</span> <span class="no">C</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NorthKorea</span><span class="o">.</span><span class="na">NorthKorean</span><span class="o">(</span><span class="s">"북한인"</span><span class="o">,</span> <span class="s">"Male"</span><span class="o">,</span> <span class="s">"NorthKorea"</span><span class="o">);</span>

        <span class="no">A</span><span class="o">.</span><span class="na">birthRegistration</span><span class="o">();</span>
        <span class="no">B</span><span class="o">.</span><span class="na">birthRegistration</span><span class="o">();</span>
        <span class="no">C</span><span class="o">.</span><span class="na">birthRegistration</span><span class="o">();</span>


        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"현재 %s의 위치 : %s\n"</span><span class="o">,</span> <span class="no">A</span><span class="o">.</span><span class="na">name</span><span class="o">,</span> <span class="no">A</span><span class="o">.</span><span class="na">region</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"현재 %s의 위치 : %s\n"</span><span class="o">,</span> <span class="no">B</span><span class="o">.</span><span class="na">name</span><span class="o">,</span> <span class="no">B</span><span class="o">.</span><span class="na">region</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\n* 한국인의 미국 방문 상황 :"</span><span class="o">);</span>

        <span class="no">A</span><span class="o">.</span><span class="na">tourAbroad</span><span class="o">(</span><span class="no">US</span><span class="o">.</span><span class="na">getInstance</span><span class="o">());</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\n* 미국인의 한국 방문 상황 :"</span><span class="o">);</span>

        <span class="no">B</span><span class="o">.</span><span class="na">tourAbroad</span><span class="o">(</span><span class="nc">Korea</span><span class="o">.</span><span class="na">getInstance</span><span class="o">());</span>
        <span class="c1">// C는 ILibertyToMove(이동할 자유)를 구현하지 않기 때문에 .tourAbroad 할 수 없다.</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\n* 북한 방문 상황 :"</span><span class="o">);</span>

        <span class="c1">// NorthKorea는 IVisitable interface를 구현하지 않기 때문에 방문할 수 없다.</span>
        <span class="no">A</span><span class="o">.</span><span class="na">tourAbroad</span><span class="o">(</span><span class="nc">NorthKorea</span><span class="o">.</span><span class="na">getInstance</span><span class="o">());</span>
        <span class="no">B</span><span class="o">.</span><span class="na">tourAbroad</span><span class="o">(</span><span class="nc">NorthKorea</span><span class="o">.</span><span class="na">getInstance</span><span class="o">());</span>


        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"* 현재 %s의 위치 : %s\n"</span><span class="o">,</span> <span class="no">A</span><span class="o">.</span><span class="na">name</span><span class="o">,</span> <span class="no">A</span><span class="o">.</span><span class="na">region</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"* 현재 %s의 위치 : %s\n"</span><span class="o">,</span> <span class="no">B</span><span class="o">.</span><span class="na">name</span><span class="o">,</span> <span class="no">B</span><span class="o">.</span><span class="na">region</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\n* Situation Immigration :"</span><span class="o">);</span>

        <span class="no">A</span><span class="o">.</span><span class="na">Immigrate</span><span class="o">(</span><span class="no">US</span><span class="o">.</span><span class="na">getInstance</span><span class="o">());</span>

    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="실행-결과">실행 결과</h3>

<p><img src="/img/posts/nestedclass/1.PNG" style="width: 75%" /></p>

<p><img src="/img/posts/nestedclass/2.PNG" style="width: 75%" /></p>

<h3 id="ivisitable-인터페이스">IVisitable 인터페이스</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">jan11st</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">IVisitable</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">Bureau</span> <span class="nf">visitImmigrationBureau</span><span class="o">();</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="korea-클래스">Korea 클래스</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">jan11st</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.lang.reflect.Array</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="c1">// IVisitable 인터페이스를 구현해야만 Human 객체가 해당 Nation을 방문할 수 있음</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Korea</span> <span class="kd">extends</span> <span class="nc">Nation</span> <span class="kd">implements</span> <span class="nc">Republic</span><span class="o">,</span> <span class="nc">IVisitable</span><span class="o">{</span>

    <span class="c1">// 싱글톤</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Korea</span> <span class="no">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Korea</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">NAME</span> <span class="o">=</span> <span class="s">"Republic Of Korea"</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">CAPITAL_CITY</span> <span class="o">=</span> <span class="s">"SEOUL"</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">REGION</span> <span class="o">=</span> <span class="s">"ASIA"</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">LANGUAGE</span> <span class="o">=</span> <span class="s">"KOREAN"</span><span class="o">;</span>

    <span class="c1">//국가 리스트</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Korean</span><span class="o">&gt;</span> <span class="n">civilianList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

    <span class="kd">private</span> <span class="nf">Korea</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Korea</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="no">INSTANCE</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">immigrationRegistration</span><span class="o">(</span><span class="nc">Human</span> <span class="n">human</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="nc">ImmigrationBureau</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">immigrationScreening</span><span class="o">(</span><span class="n">human</span><span class="o">))</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"한국 정부 : 이민 최종 승인"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"한국 정부 : 이민 최종 거절"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">ImmigrationBureau</span> <span class="nf">visitImmigrationBureau</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">ImmigrationBureau</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Bureau</span> <span class="nf">visitAdministartionBureau</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">AdministrationBureau</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getNAME</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Korea</span><span class="o">.</span><span class="na">NAME</span><span class="o">;</span>
    <span class="o">}</span>

<span class="c1">//정부 구현</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">AdministrationBureau</span> <span class="kd">extends</span> <span class="nc">Bureau</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">AdministrationBureau</span> <span class="no">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AdministrationBureau</span><span class="o">();</span>
        <span class="kd">private</span> <span class="nf">AdministrationBureau</span><span class="o">()</span> <span class="o">{}</span>
        <span class="kd">public</span> <span class="kd">static</span> <span class="nc">AdministrationBureau</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="no">INSTANCE</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">birthRegistration</span><span class="o">(</span><span class="nc">Korean</span> <span class="n">korean</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"한국 정부 : %s 출생신고 접수 완료\n"</span><span class="o">,</span> <span class="n">korean</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
            <span class="nc">Korea</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">civilianList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">korean</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">deathRegistration</span><span class="o">(</span><span class="nc">Korean</span> <span class="n">korean</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">Korea</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">civilianList</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">korean</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="c1">//이민청 구현, Bureau 추상클래스를 상속하고, IImmigrationBureau 인터페이스를 구현해 visa 발급,</span>
    <span class="c1">// 이민 신청등의 일(일반 Bureau가 아닌 이민청이 해야하는 일을 구현)</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ImmigrationBureau</span> <span class="kd">extends</span> <span class="nc">Bureau</span> <span class="kd">implements</span> <span class="nc">IImmigrationBureau</span> <span class="o">{</span>

        <span class="c1">//수교국 리스트를 생성, List는 Nation 추상클래스 받아 모든 Nation이 ListArray에 들어갈 수 있게함</span>

        <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Nation</span><span class="o">&gt;</span> <span class="n">dipolomaticNations</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="no">US</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(),</span> <span class="nc">Korea</span><span class="o">.</span><span class="na">getInstance</span><span class="o">());</span>

        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">ImmigrationBureau</span> <span class="no">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ImmigrationBureau</span><span class="o">();</span>

        <span class="kd">private</span> <span class="nf">ImmigrationBureau</span><span class="o">()</span> <span class="o">{</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="kd">static</span> <span class="nc">ImmigrationBureau</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="no">INSTANCE</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">visa</span><span class="o">(</span><span class="nc">Human</span> <span class="n">human</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"visa"</span><span class="o">);</span>
            <span class="c1">// 수교국 명단에 있으면 비자주기</span>
<span class="c1">//            human이 IlibertyToMove 구현체이면</span>
            <span class="k">if</span><span class="o">(</span><span class="n">human</span> <span class="k">instanceof</span> <span class="nc">ILibertyToMove</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%s : 여권 있음\n"</span><span class="o">,</span> <span class="n">human</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
                <span class="nc">ILibertyToMove</span> <span class="n">tourist</span> <span class="o">=</span> <span class="o">(</span><span class="nc">ILibertyToMove</span><span class="o">)</span> <span class="n">human</span><span class="o">;</span>
                <span class="nc">Nation</span> <span class="n">passport</span> <span class="o">=</span> <span class="n">tourist</span><span class="o">.</span><span class="na">passportSubmitting</span><span class="o">();</span>

            <span class="k">for</span><span class="o">(</span><span class="nc">Nation</span> <span class="n">nation</span> <span class="o">:</span> <span class="k">this</span><span class="o">.</span><span class="na">dipolomaticNations</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">passport</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">nation</span><span class="o">))</span> <span class="o">{</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"이민청 : 수교국 명단에 있음"</span><span class="o">);</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"이민청 : 비자 발급 가능"</span><span class="o">);</span>
                    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="o">}</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"이민청 : 수교국 명단에 없음"</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"이민청 : 비자 발급 불가"</span><span class="o">);</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">immigrationScreening</span><span class="o">(</span><span class="nc">Human</span> <span class="n">human</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">visa</span><span class="o">(</span><span class="n">human</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">human</span> <span class="k">instanceof</span> <span class="nc">IImmigrant</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"이민청 :이민심사 승인"</span><span class="o">);</span>
                    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"이민청 :이민심사 거절"</span><span class="o">);</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

<span class="c1">//    Korean은 Human이고 이동할 수 있는 자유가 있음</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Korean</span> <span class="kd">extends</span> <span class="nc">Human</span> <span class="kd">implements</span> <span class="nc">ILibertyToMove</span><span class="o">{</span>
        <span class="nc">Boolean</span> <span class="n">died</span><span class="o">;</span>
        <span class="nc">Nation</span> <span class="n">nationality</span><span class="o">;</span>

        <span class="kd">public</span> <span class="nf">Korean</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">sex</span><span class="o">,</span> <span class="nc">String</span> <span class="n">region</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">sex</span><span class="o">,</span> <span class="n">region</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%s : %s 출생\n"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">region</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">birthRegistration</span><span class="o">()</span> <span class="o">{</span>
            <span class="nc">Bureau</span> <span class="n">administrationBureau</span> <span class="o">=</span> <span class="nc">Korea</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">visitAdministartionBureau</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%s : %s 한국 행정센터 방문\n"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">region</span><span class="o">);</span>
            <span class="nc">AdministrationBureau</span> <span class="n">koreaAdministartionBureau</span> <span class="o">=</span> <span class="o">(</span><span class="nc">AdministrationBureau</span><span class="o">)</span> <span class="n">administrationBureau</span><span class="o">;</span>
            <span class="n">koreaAdministartionBureau</span><span class="o">.</span><span class="na">birthRegistration</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
            <span class="k">this</span><span class="o">.</span><span class="na">nationality</span> <span class="o">=</span> <span class="nc">Korea</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">death</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">died</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">tourAbroad</span><span class="o">(</span><span class="nc">Nation</span> <span class="n">nation</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">nation</span> <span class="k">instanceof</span> <span class="nc">IVisitable</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%s : %s 방문 가능.\n"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">,</span> <span class="n">nation</span><span class="o">.</span><span class="na">getNAME</span><span class="o">());</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%s : %s 도착\n"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">,</span> <span class="n">nation</span><span class="o">.</span><span class="na">getNAME</span><span class="o">());</span>
                <span class="nc">IVisitable</span> <span class="n">travelDestination</span> <span class="o">=</span> <span class="o">(</span><span class="nc">IVisitable</span><span class="o">)</span> <span class="n">nation</span><span class="o">;</span>

                <span class="nc">Bureau</span> <span class="n">immigrationBureau</span> <span class="o">=</span> <span class="n">travelDestination</span><span class="o">.</span><span class="na">visitImmigrationBureau</span><span class="o">();</span>

                <span class="k">if</span> <span class="o">(</span><span class="n">immigrationBureau</span> <span class="k">instanceof</span> <span class="nc">IImmigrationBureau</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nc">IImmigrationBureau</span> <span class="nc">IBureau</span> <span class="o">=</span> <span class="o">(</span><span class="nc">IImmigrationBureau</span><span class="o">)</span> <span class="n">immigrationBureau</span><span class="o">;</span>

                    <span class="k">if</span><span class="o">(</span><span class="nc">IBureau</span><span class="o">.</span><span class="na">visa</span><span class="o">(</span><span class="k">this</span><span class="o">))</span> <span class="o">{</span>
                        <span class="k">this</span><span class="o">.</span><span class="na">region</span> <span class="o">=</span> <span class="n">nation</span><span class="o">.</span><span class="na">getNAME</span><span class="o">();</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">else</span><span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%s : 목적지는 방문할 수 없다.\n"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="nc">Nation</span> <span class="nf">passportSubmitting</span><span class="o">()</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%s : 여권 제출.\n"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">nationality</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">Immigrate</span><span class="o">(</span><span class="nc">Nation</span> <span class="n">nation</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nation</span> <span class="k">instanceof</span> <span class="nc">IVisitable</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">IVisitable</span> <span class="n">targetNation</span> <span class="o">=</span> <span class="o">(</span><span class="nc">IVisitable</span><span class="o">)</span> <span class="n">nation</span><span class="o">;</span>

                <span class="nc">Bureau</span> <span class="n">targetNationBureau</span> <span class="o">=</span> <span class="n">targetNation</span><span class="o">.</span><span class="na">visitImmigrationBureau</span><span class="o">();</span>
                <span class="nc">IImmigrationBureau</span> <span class="n">targetNationImmigrationBureau</span> <span class="o">=</span> <span class="o">(</span><span class="nc">IImmigrationBureau</span><span class="o">)</span> <span class="n">targetNationBureau</span><span class="o">;</span>
                <span class="n">targetNationImmigrationBureau</span><span class="o">.</span><span class="na">immigrationScreening</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>

            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="iimmigrationbureau-인터페이스">IImmigrationBureau 인터페이스</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">jan11st</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">IImmigrationBureau</span> <span class="o">{</span>
    <span class="kt">boolean</span> <span class="nf">visa</span><span class="o">(</span><span class="nc">Human</span> <span class="n">human</span><span class="o">);</span>
    <span class="kt">boolean</span> <span class="nf">immigrationScreening</span><span class="o">(</span><span class="nc">Human</span> <span class="n">human</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="northkorea-클래스">NorthKorea 클래스</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">jan11st</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.lang.reflect.Array</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="c1">//NorthKorea는 IVisitable의 구현체가 아니기 때문에 방문할 수 없음.</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">NorthKorea</span> <span class="kd">extends</span> <span class="nc">Nation</span> <span class="kd">implements</span> <span class="nc">Dictatorship</span><span class="o">{</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">NorthKorea</span> <span class="no">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NorthKorea</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">NAME</span> <span class="o">=</span> <span class="s">"Democratic People\'s Republic of Korea"</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">CAPITAL_CITY</span> <span class="o">=</span> <span class="s">"PYEONGYANG"</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">REGION</span> <span class="o">=</span> <span class="s">"ASIA"</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">LANGUAGE</span> <span class="o">=</span> <span class="s">"KOREAN"</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">NorthKorean</span><span class="o">&gt;</span> <span class="n">civilianList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

    <span class="kd">private</span> <span class="nf">NorthKorea</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="c1">// NorthKorean은 ILibertyToMove의 구현체가 아니기 때문에</span>
    <span class="c1">// tourAborad와 submittingPassport 메소드가 없음</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">NorthKorea</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="no">INSTANCE</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">immigrationRegistration</span><span class="o">(</span><span class="nc">Human</span> <span class="n">human</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="nc">ImmigrationBureau</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">immigrationScreening</span><span class="o">(</span><span class="n">human</span><span class="o">))</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"NorthKorean immigration Bureau : immigration Accepted"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"NorthKorean immigratoin Bureau : immigration Disaccepted"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getNAME</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">NorthKorea</span><span class="o">.</span><span class="na">NAME</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Bureau</span> <span class="nf">visitAdministartionBureau</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">AdministrationBureau</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">AdministrationBureau</span> <span class="kd">extends</span> <span class="nc">Bureau</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">AdministrationBureau</span> <span class="no">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AdministrationBureau</span><span class="o">();</span>
        <span class="kd">private</span> <span class="nf">AdministrationBureau</span><span class="o">()</span> <span class="o">{}</span>
        <span class="kd">public</span> <span class="kd">static</span> <span class="nc">AdministrationBureau</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="no">INSTANCE</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">birthRegistration</span><span class="o">(</span><span class="nc">NorthKorean</span> <span class="n">northKorean</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"북한 정부 : %s 출생신고 접수 완료\n"</span><span class="o">,</span> <span class="n">northKorean</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
            <span class="nc">NorthKorea</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">civilianList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">northKorean</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">deathRegistration</span><span class="o">(</span><span class="nc">NorthKorean</span> <span class="n">northKorean</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">NorthKorea</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">civilianList</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">northKorean</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ImmigrationBureau</span> <span class="kd">extends</span> <span class="nc">Bureau</span> <span class="kd">implements</span> <span class="nc">IImmigrationBureau</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Nation</span><span class="o">&gt;</span> <span class="n">dipolomaticNations</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">();</span>

        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">ImmigrationBureau</span> <span class="no">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ImmigrationBureau</span><span class="o">();</span>

        <span class="kd">private</span> <span class="nf">ImmigrationBureau</span><span class="o">()</span> <span class="o">{</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="kd">static</span> <span class="nc">ImmigrationBureau</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="no">INSTANCE</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">visa</span><span class="o">(</span><span class="nc">Human</span> <span class="n">human</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"visa"</span><span class="o">);</span>
            <span class="c1">// 수교국 명단에 있으면 비자주기</span>

            <span class="k">if</span><span class="o">(</span><span class="n">human</span> <span class="k">instanceof</span> <span class="nc">ILibertyToMove</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%s : 여권 있음\n"</span><span class="o">,</span> <span class="n">human</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
                <span class="nc">ILibertyToMove</span> <span class="n">tourist</span> <span class="o">=</span> <span class="o">(</span><span class="nc">ILibertyToMove</span><span class="o">)</span> <span class="n">human</span><span class="o">;</span>
                <span class="nc">Nation</span> <span class="n">passport</span> <span class="o">=</span> <span class="n">tourist</span><span class="o">.</span><span class="na">passportSubmitting</span><span class="o">();</span>

                <span class="k">for</span><span class="o">(</span><span class="nc">Nation</span> <span class="n">nation</span> <span class="o">:</span> <span class="k">this</span><span class="o">.</span><span class="na">dipolomaticNations</span><span class="o">)</span> <span class="o">{</span>
<span class="c1">//                if(human instanceof ILibertyToMove) {</span>
<span class="c1">//                    System.out.printf("%s : 여권 있음\n", human.name);</span>
<span class="c1">//                    ILibertyToMove tourist = (ILibertyToMove) human;</span>
<span class="c1">//                    Nation passport = tourist.passportSubmitting();</span>

                    <span class="k">if</span> <span class="o">(</span><span class="n">passport</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">nation</span><span class="o">))</span> <span class="o">{</span>
                        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"이민청 : 수교국 명단에 있음"</span><span class="o">);</span>
                        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"이민청 : 비자 발급 가능"</span><span class="o">);</span>
                        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"이민청 : 수교국 명단에 없음"</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"이민청 : 비자 발급 불가"</span><span class="o">);</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">immigrationScreening</span><span class="o">(</span><span class="nc">Human</span> <span class="n">human</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">visa</span><span class="o">(</span><span class="n">human</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">human</span> <span class="k">instanceof</span> <span class="nc">IImmigrant</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"이민청 :이민심사 승인"</span><span class="o">);</span>
                    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"이민청 :이민심사 거절"</span><span class="o">);</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">NorthKorean</span> <span class="kd">extends</span> <span class="nc">Human</span><span class="o">{</span>
        <span class="nc">Boolean</span> <span class="n">died</span><span class="o">;</span>
        <span class="nc">Nation</span> <span class="n">nationality</span><span class="o">;</span>

        <span class="kd">public</span> <span class="nf">NorthKorean</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">sex</span><span class="o">,</span> <span class="nc">String</span> <span class="n">region</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">sex</span><span class="o">,</span> <span class="n">region</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%s : %s Born\n"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">region</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">birthRegistration</span><span class="o">()</span> <span class="o">{</span>
            <span class="nc">Bureau</span> <span class="n">administrationBureau</span> <span class="o">=</span> <span class="nc">NorthKorea</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">visitAdministartionBureau</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%s : visit %s Administration Bureau\n"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">region</span><span class="o">);</span>
            <span class="nc">AdministrationBureau</span> <span class="n">northKoreaAdministartionBureau</span> <span class="o">=</span> <span class="o">(</span><span class="nc">AdministrationBureau</span><span class="o">)</span> <span class="n">administrationBureau</span><span class="o">;</span>
            <span class="n">northKoreaAdministartionBureau</span><span class="o">.</span><span class="na">birthRegistration</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
            <span class="k">this</span><span class="o">.</span><span class="na">nationality</span> <span class="o">=</span> <span class="nc">NorthKorea</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">death</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">died</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="human-클래스">Human 클래스</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">jan11st</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Human</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">sex</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">region</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Human</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">sex</span><span class="o">,</span> <span class="nc">String</span> <span class="n">region</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">sex</span> <span class="o">=</span> <span class="n">sex</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">region</span> <span class="o">=</span> <span class="n">region</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kt">void</span> <span class="nf">death</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">};</span>

    <span class="kt">void</span> <span class="nf">eat</span><span class="o">()</span> <span class="o">{};</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="us-클래스">US 클래스</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">jan11st</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.lang.reflect.Array</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">US</span> <span class="kd">extends</span> <span class="nc">Nation</span> <span class="kd">implements</span> <span class="nc">Republic</span><span class="o">,</span> <span class="nc">IVisitable</span><span class="o">{</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="no">US</span> <span class="no">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="no">US</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">NAME</span> <span class="o">=</span> <span class="s">"United States Of America"</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">CAPITAL_CITY</span> <span class="o">=</span> <span class="s">"WASHINTON"</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">REGION</span> <span class="o">=</span> <span class="s">"NA"</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">LANGUAGE</span> <span class="o">=</span> <span class="s">"ENGLISH"</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">American</span><span class="o">&gt;</span> <span class="n">civilianList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

    <span class="kd">private</span> <span class="nf">US</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="no">US</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="no">INSTANCE</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">immigrationRegistration</span><span class="o">(</span><span class="nc">Human</span> <span class="n">human</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="nc">ImmigrationBureau</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">immigrationScreening</span><span class="o">(</span><span class="n">human</span><span class="o">))</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"US Government : Immigration Finally Accepted"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"US Government : Immigration Finally Disaccepted"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getNAME</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="no">US</span><span class="o">.</span><span class="na">NAME</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">ImmigrationBureau</span> <span class="nf">visitImmigrationBureau</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">ImmigrationBureau</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Bureau</span> <span class="nf">visitAdministartionBureau</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">AdministrationBureau</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">AdministrationBureau</span> <span class="kd">extends</span> <span class="nc">Bureau</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">AdministrationBureau</span> <span class="no">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AdministrationBureau</span><span class="o">();</span>
        <span class="kd">private</span> <span class="nf">AdministrationBureau</span><span class="o">()</span> <span class="o">{}</span>
        <span class="kd">public</span> <span class="kd">static</span> <span class="nc">AdministrationBureau</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="no">INSTANCE</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">birthRegistration</span><span class="o">(</span><span class="nc">American</span> <span class="n">american</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"US Administration Bureau : %s \'s birth registration Accepted\n"</span><span class="o">,</span> <span class="n">american</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>

            <span class="no">US</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">civilianList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">american</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">deathRegistration</span><span class="o">(</span><span class="nc">American</span> <span class="n">american</span><span class="o">)</span> <span class="o">{</span>
            <span class="no">US</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">civilianList</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">american</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ImmigrationBureau</span> <span class="kd">extends</span> <span class="nc">Bureau</span> <span class="kd">implements</span> <span class="nc">IImmigrationBureau</span><span class="o">{</span>
        <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Nation</span><span class="o">&gt;</span> <span class="n">dipolomaticNations</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="no">US</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(),</span> <span class="nc">Korea</span><span class="o">.</span><span class="na">getInstance</span><span class="o">());</span>

        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">ImmigrationBureau</span> <span class="no">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ImmigrationBureau</span><span class="o">();</span>

        <span class="kd">private</span> <span class="nf">ImmigrationBureau</span><span class="o">()</span> <span class="o">{</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="kd">static</span> <span class="nc">ImmigrationBureau</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="no">INSTANCE</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">visa</span><span class="o">(</span><span class="nc">Human</span> <span class="n">human</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"visa"</span><span class="o">);</span>
            <span class="c1">// 수교국 명단에 있으면 비자주기</span>

            <span class="k">if</span> <span class="o">(</span><span class="n">human</span> <span class="k">instanceof</span> <span class="nc">ILibertyToMove</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%s : Having Passport \n"</span><span class="o">,</span> <span class="n">human</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
                <span class="nc">ILibertyToMove</span> <span class="n">tourist</span> <span class="o">=</span> <span class="o">(</span><span class="nc">ILibertyToMove</span><span class="o">)</span> <span class="n">human</span><span class="o">;</span>
                <span class="nc">Nation</span> <span class="n">passport</span> <span class="o">=</span> <span class="n">tourist</span><span class="o">.</span><span class="na">passportSubmitting</span><span class="o">();</span>

            <span class="k">for</span><span class="o">(</span><span class="nc">Nation</span> <span class="n">nation</span> <span class="o">:</span> <span class="k">this</span><span class="o">.</span><span class="na">dipolomaticNations</span><span class="o">)</span> <span class="o">{</span>
<span class="c1">//                if(human instanceof ILibertyToMove) {</span>
<span class="c1">//                    System.out.printf("%s : 여권 있음\n", human.name);</span>
<span class="c1">//                    ILibertyToMove tourist = (ILibertyToMove) human;</span>
<span class="c1">//                    Nation passport = tourist.passportSubmitting();</span>

                    <span class="k">if</span> <span class="o">(</span><span class="n">passport</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">nation</span><span class="o">))</span> <span class="o">{</span>
                        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Immigration Bureau : Visa Waiver Program Partner"</span><span class="o">);</span>
                        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Immigration Bureau : Visa Granted"</span><span class="o">);</span>
                        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Immigration Bureau : Not Visa Waiver Program Partner"</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Immigration Bureau : Visa not Granted"</span><span class="o">);</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">immigrationScreening</span><span class="o">(</span><span class="nc">Human</span> <span class="n">human</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">visa</span><span class="o">(</span><span class="n">human</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">human</span> <span class="k">instanceof</span> <span class="nc">IImmigrant</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Immigration Bureau : Immigration Accepted"</span><span class="o">);</span>
                    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Immigration Bureau : Immigration Disaccepted"</span><span class="o">);</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">American</span> <span class="kd">extends</span> <span class="nc">Human</span> <span class="kd">implements</span> <span class="nc">ILibertyToMove</span><span class="o">{</span>
        <span class="nc">Boolean</span> <span class="n">died</span><span class="o">;</span>
        <span class="nc">Nation</span> <span class="n">nationality</span><span class="o">;</span>

        <span class="kd">public</span> <span class="nf">American</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">sex</span><span class="o">,</span> <span class="nc">String</span> <span class="n">region</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">sex</span><span class="o">,</span> <span class="n">region</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%s : %s Born\n"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">region</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">birthRegistration</span><span class="o">()</span> <span class="o">{</span>
            <span class="nc">Bureau</span> <span class="n">administrationBureau</span> <span class="o">=</span> <span class="no">US</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">visitAdministartionBureau</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%s : visit %s Administration Bureau\n"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">region</span><span class="o">);</span>
            <span class="nc">AdministrationBureau</span> <span class="nc">USAdministartionBureau</span> <span class="o">=</span> <span class="o">(</span><span class="nc">AdministrationBureau</span><span class="o">)</span> <span class="n">administrationBureau</span><span class="o">;</span>
            <span class="nc">USAdministartionBureau</span><span class="o">.</span><span class="na">birthRegistration</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
            <span class="k">this</span><span class="o">.</span><span class="na">nationality</span> <span class="o">=</span> <span class="nc">Korea</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">death</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">died</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">tourAbroad</span><span class="o">(</span><span class="nc">Nation</span> <span class="n">nation</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">nation</span> <span class="k">instanceof</span> <span class="nc">IVisitable</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%s : %s can be visited.\n"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">,</span> <span class="n">nation</span><span class="o">.</span><span class="na">getNAME</span><span class="o">());</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%s : Arrived at %s\n"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">,</span> <span class="n">nation</span><span class="o">.</span><span class="na">getNAME</span><span class="o">());</span>
                <span class="nc">IVisitable</span> <span class="n">travelDestination</span> <span class="o">=</span> <span class="o">(</span><span class="nc">IVisitable</span><span class="o">)</span> <span class="n">nation</span><span class="o">;</span>

                <span class="nc">Bureau</span> <span class="n">immigrationBureau</span> <span class="o">=</span> <span class="n">travelDestination</span><span class="o">.</span><span class="na">visitImmigrationBureau</span><span class="o">();</span>


                <span class="k">if</span> <span class="o">(</span><span class="n">immigrationBureau</span> <span class="k">instanceof</span> <span class="nc">IImmigrationBureau</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nc">IImmigrationBureau</span> <span class="nc">IBureau</span> <span class="o">=</span> <span class="o">(</span><span class="nc">IImmigrationBureau</span><span class="o">)</span> <span class="n">immigrationBureau</span><span class="o">;</span>

                    <span class="k">if</span><span class="o">(</span><span class="nc">IBureau</span><span class="o">.</span><span class="na">visa</span><span class="o">(</span><span class="k">this</span><span class="o">))</span> <span class="o">{</span>
                        <span class="k">this</span><span class="o">.</span><span class="na">region</span> <span class="o">=</span> <span class="n">nation</span><span class="o">.</span><span class="na">getNAME</span><span class="o">();</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">else</span><span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%s :Destination is not available to visit.\n"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="nc">Nation</span> <span class="nf">passportSubmitting</span><span class="o">()</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%s : Submit Passport\n"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">nationality</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>ash tensor</name></author><category term="JAVA" /><summary type="html"><![CDATA[자바의 중첩 클래스(Nested Class)는 다른 클래스 내부에 정의된 클래스를 말한다. 중첩 클래스는 외부 클래스의 멤버로 간주되고, 외부 클래스의 멤버 변수 및 메서드에 쉽게 접근할 수 있다. 보통 논리적으로 관련된 클래스를 그룹화하는데 사용된다.]]></summary></entry><entry><title type="html">[HTML/JAVASCRIPT] 아주 간단한 버켓리스트 페이지 제작 - 도장찍기 부분 제작 (2/2)</title><link href="http://localhost:4000/web/2024/01/12/bucketlist-stamp.html" rel="alternate" type="text/html" title="[HTML/JAVASCRIPT] 아주 간단한 버켓리스트 페이지 제작 - 도장찍기 부분 제작 (2/2)" /><published>2024-01-12T00:00:00+09:00</published><updated>2024-01-12T00:00:00+09:00</updated><id>http://localhost:4000/web/2024/01/12/bucketlist-stamp</id><content type="html" xml:base="http://localhost:4000/web/2024/01/12/bucketlist-stamp.html"><![CDATA[<p>javascript를 이용해 도장을 찍는 기능을 구현했다. javascript는 동적 웹 페이지를 만들기 위한 프로그래밍 언어로, 웹 브라우저에서 실행된다. 깃허브 페이지는 정적 웹 페이지를 호스팅 하는데 쓰이지만, 동적 서버 코드를 사용하는 것이 아니기 때문에 상관 없다.</p>

<h2 id="완성된-버켓리스트">완성된 버켓리스트</h2>

<iframe src="https://ash-tensor.github.io/bucketlist/" width="100%" height="800"></iframe>

<p>간단한 완료 도장이 찍히는 코드.</p>

<h3 id="코드">코드</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;script&gt;
    // 페이지 로드 시 이전 상태 복원
    document.addEventListener("DOMContentLoaded", (event) =&gt; {
    const buckets = document.querySelectorAll(".bucket");
    buckets.forEach((bucket, index) =&gt; {
        // 로컬 스토리지에서 상태 읽기
        const isDone = localStorage.getItem("bucket" + index) === "done";
        if (isDone) {
        bucket.classList.add("done");
        }
    });
    });

    // 버킷 리스트 클릭 이벤트
    const buckets = document.querySelectorAll(".bucket");
    buckets.forEach((bucket, index) =&gt; {
    bucket.addEventListener("click", function () {
        // 클래스 토글
        bucket.classList.toggle("done");

        // 로컬 스토리지에 상태 저장
        if (bucket.classList.contains("done")) {
        localStorage.setItem("bucket" + index, "done");
        } else {
        localStorage.setItem("bucket" + index, "");
        }
    });
    });
&lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre></div></div>

<h3 id="코드-설명">코드 설명</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>document.addEventListener("DOMContentLoaded", (event) =&gt; { ... }):
</code></pre></div></div>

<p>이 코드는 웹 페이지의 HTML이 완전히 로드되고 나서 실행된다. 이를 통해 페이지가 로드되자마자 필요한 작업을 수행할 수 있는데, 여기서는 로드되고 난 후, 이전에 저장된 상태를 불러오는 것을 맡고 있다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const buckets = document.querySelectorAll(".bucket");
</code></pre></div></div>

<p>웹 페이지에서 클래스 이름이 “bucket”인 모든 요소를 선택하고, 그 결과를 “buckets”라는 상수에 저장함.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>buckets.forEach((bucket, index) =&gt; { ... })
</code></pre></div></div>

<p>“buckets”라는 변수에 저장된 모든 요소에 대해 작업을 수행함.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const isDone = localStorage.getItem("bucket" + index) === "done";:
</code></pre></div></div>

<p>로컬 스토리지에서 “bucket” + index(인덱스 번호)라는 키를 가진 아이템을 가져와서, 그 값이 “done”인지 확인함.</p>

<p>로컬 스토리지는 웹 브라우저에서 제공하는 간단한 키-값 형태의 클라이언트 측 웹 스토리지 메커니즘이다. 웹 앱에서 데이터를 로컬에 저장하고 나중에 사용자가 페이지를 새로고침하거나 다시 방문할 때도 그 데이터를 유지할 수 있게 한다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if (isDone) { bucket.classList.add("done"); }:
</code></pre></div></div>

<p>만약 위에서 확인한 값이 “done”이라면, 해당 버킷에 “done” 클래스를 추가함.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bucket.addEventListener("click", function () { ... }):
</code></pre></div></div>

<p>이 코드는 각 버킷에 클릭 이벤트 리스너를 추가한다. 이를 통해 사용자가 버킷을 클릭할 때마다 특정 함수가 실행된다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bucket.classList.toggle("done");:
</code></pre></div></div>

<p>클릭 이벤트가 발생하면, 해당 버킷의 클래스 리스트에서done” 클래스를 토글(있으면 제거, 없으면 추가)</p>

<p>if (bucket.classList.contains(“done”)) { localStorage.setItem(“bucket” + index, “done”); } else { localStorage.setItem(“bucket” + index, “”); }:</p>

<p>버킷에 “done” 클래스가 있으면 로컬 스토리지에 “done”이라는 값을 저장하고, 없으면 빈 문자열을 저장한다.</p>

<p>이렇게 페이지 로드 시 웹 브라우저의 로컬 스토리지를 확인하여 버킷 리스트의 상태를 복원하고, 사용자가 버킷을 클릭하여 상태를 변경할 때마다 그 상태를 로컬 스토리지에 저장하는 역할을 해 도장을 찍는 간단한 기능을 구현할 수 있다!</p>

<h3 id="마무리">마무리</h3>

<p>2024년이 시작한지 얼마 안 지났는데, 하루하루가 굉장히 빠르다는 느낌이 든다. 아침에 일어나고 일과가 끝나고 집에 돌아가면 여섯시 - 일곱시 가량인데, 하루하루 목표를 위해서 열심히 달려야 간단하게 제작한 버켓리스트 페이지에 도장을 찍을 수 있을 것 같다.</p>

<p>열심히 해 보자고!</p>]]></content><author><name>ash tensor</name></author><category term="WEB" /><summary type="html"><![CDATA[javascript를 이용해 도장을 찍는 기능을 구현했다. javascript는 동적 웹 페이지를 만들기 위한 프로그래밍 언어로, 웹 브라우저에서 실행된다. 깃허브 페이지는 정적 웹 페이지를 호스팅 하는데 쓰이지만, 동적 서버 코드를 사용하는 것이 아니기 때문에 상관 없다.]]></summary></entry></feed>