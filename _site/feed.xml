<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-03-29T18:03:26+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Tensor Studio</title><subtitle>텐서 스튜디오</subtitle><author><name>ash tensor</name></author><entry><title type="html">[WEB][JAVA] 개발자 취업 후기</title><link href="http://localhost:4000/web/java/2025/03/29/backend-interview-question.html" rel="alternate" type="text/html" title="[WEB][JAVA] 개발자 취업 후기" /><published>2025-03-29T00:00:00+09:00</published><updated>2025-03-29T00:00:00+09:00</updated><id>http://localhost:4000/web/java/2025/03/29/backend-interview-question</id><content type="html" xml:base="http://localhost:4000/web/java/2025/03/29/backend-interview-question.html"><![CDATA[<h2 id="webjava-개발자-취업-후기-및-백엔드-및-웹개발-it-직군-기술면접-준비">[WEB][JAVA] 개발자 취업 후기 및 백엔드 및 웹개발, IT 직군 기술면접 준비</h2>

<h3 id="1-서론">1. 서론</h3>

<p>와 벌써 2월 중순인데, 가장 최근 올렸던 글이 12월 28일 올린 글이다. 
매번 꾸준히 포스트를 올리는 것이 너무 어렵다. 리액트 관련 라이브러리 소개 포스트를 올릴까 했는데 
솔직히 너무 바쁘다, 그리고 퇴근하고 집에 와서는 시간이 없어서 글을 도저히 쓸 수가 없다…</p>

<p>아무튼 최근 꽤 많은 곳의 면접을 다녀왔는데, 크게는 중견기업 ERP 개발 직무부터, 웹 개발, 그리고 풀스택 개발 직무, 또 작게는 SI 중소기업까지 면접을 보았는데, 
내가 취업하기까지 받은 질문들과 면접 질문에 대한 답변을 한번 정리해보고자 한다. 물론 엄청 고등한 대기업은 지원조차 하지 않았지만 이정도면 누군가는 충분히 도움을 받을 수 있을 것 같다.</p>

<p>그리고 이 글은 현재, 3월 29일에 취업하고 약 두달 쯤 뒤에 다시 관조해가며 쓰는 글인데 지금까지 내가 느낀 점 등이 다른 사람에게 도움이 되기를 바라는 마음이 있다.</p>

<h4 id="현재-it-취업은-겨울인가">현재 IT 취업은 겨울인가?</h4>

<p><img src="/img/posts/interview/winter.jpg" style="width: 80%" /></p>

<p>여기에 대한 솔직한 대답을 한다면 <strong>“그렇다”</strong> 고 생각한다.
겨울이 다 지나고 봄이 온 지금이지만 개발자 취업은 좀 현실적으로 어려워졌다고 느낀다.
내 실력이 부족함을 지적한다면, 그건 당연히 맞다.</p>

<p>하지만 이제 현실적으로 봤을때 <strong>모든 사람들이(취업문을 두드리는 사회 초년생들이) 현업자 수준의 실력을 갖추는 건</strong>, 그게 더 말도 안되는 것을 요구하는
것이지 않을까? 이건 간신히 취업을 한 지금도 동일하게 생각한다.</p>

<p>왜냐면 아무리 정말 다양한 기술스택을(아래에서 더 설명할 것이지만) 많이 알고 능숙하게 이용한다고 해도 
본인이 입사할 회사에서(심지어 어떤 회사에 들어갈 지도 모른다) <strong>그 스택을 어떤 버전을 어떤 방법으로 이용할 지 알 수 없기 때문이다.</strong></p>

<p>하지만 이제 내 생각에는 그래도 개인의 노력으로 어찌저찌 보완할 부분이 분명히 존재하고, 취업 준비 등으로 전공자, 비전공자 불문하고 한계를 깰 수 있다고
분명 생각한다.</p>

<h4 id="기술-스택">기술 스택</h4>

<p><img src="/img/posts/interview/skill-2.png" style="width: 80%" /></p>

<p>기술 스택에 대해 이야기를 해 보면, 위 그림에 나와있는 것도 정말 많다고 느껴지지만 저것들은 정말 극소수고 
현재 존재하는, 그리고 지금도 개발되고 있는 이 수없이 많은 기술과 제품들을 모조리 학습한다고 해서 좋은 걸까?</p>

<p>그렇다면 필연적으로 각각의 이해도는 분명 낮아질 수밖에는 없을 텐데, 어느 정도까지 이해도를 높혀야 하고 어느 정도까지 범위를 넖혀야 할 것인지
고민이 될 수밖에는 없다. 나도 그랬고.</p>

<p>스프링으로 예를 들면, 스프링에 대한 무한한 이해, 그러니까 공식 문서를 완전 달달달 외워서 그 공식 문서를 한줄한줄 스터디 하는게 과연 옳은 걸까?
개발자 커뮤니티나 흔히 말하는 인프런 등에서 이루어지는 스터디를 보면 이런식의 스터디를 하는 경우가 많이 보이는데(이게 아무런 의미가 없다는 건 아니다)
내 식견이 짧아서 그런 것일 수도 있곘지만 이게 무슨 의미가 있나 싶다.</p>

<p>이력서에 한줄 적는 의미가 있나? 그래서 만약 모든 것을 완벽히 통달한다면 그것도 좋을지도 모른다. 면접에서 10년차 개발자에게 하나도 틀리지 않고
잘 기억해서 설명할 자신이 있다면.</p>

<p>게다가 만약 본인이 맞게 알고 면접자가 틀리게 안다고 하더라도- 그것도 문제다. 면접장에서 면접관에게 ‘아니, 제가 맞고 당신이 틀렸습니다’ 라고 
핏대 세워 토론할 것도 아니기 때문이다. 실제로 이런 경우가 분명 있다.</p>

<p>물론 이러한 이론적인 지식이 필요 없다는 것은 분명 아니다. 너무 중요한 지식이라는 것에 동의하지만 
내 생각에 주니어 개발자, 아니 주니어라고 할 수도 없지, 아직 개발자가 되기도 전이니까. 아무튼 이런 개발자 취업을 준비하는 사람이라면
이러한 공부는 할 필요가 없다고, 적어도 나는 생각한다.</p>

<p>오히려 그것보다는 <strong>해당 기술을 통해서 어떤 문제를 해결했고, 어떻게 문제를 해결할 수 있었는지, 왜 해당 기술을 사용했는지</strong> 제대로 
생각하는게 우선이라고 본다.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/gXfEE6v5bSI?si=wHGvNLtnyjRtU8FZ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<p>판교 뚜벅쵸님의 이 동영상이 정말 도움이 많이 될 수 있다고 생각하는데(무조건 다 봐야된다고 생각하지만)
혹시라도 먼저 내용을 알고 싶다면</p>

<ul>
  <li>면접자리는 지식 배틀하는 자리가 아니다.</li>
  <li>수십개 고등한 기술스택을 아는 사람이 채용되는 것이 아니라, 해당 회사와 가장 잘 들어맞는 기술 스택을 가진 사람이 채용된다.</li>
</ul>

<p>등등, 아무튼 내가 하고 싶은 말은 이 두가지다. 
본인이 정말 고등하게 쿠버네티스와 헬름 차트를 이용해 CI/CD를 구현했고 카프카를 이용해 이벤트 기반 동시성 처리를 했으며, 
AI기능은 뭘 집어넣었고, 레디스를 이용해 속도를 개선했으며(당연히 개선되었겠지, 램위에 올렸는데)…이런 화려한 기술스택으로 포장된 프로젝트를 이력서에 써 봐야
해당 프로젝트가 결국 이용자가 1명에 그치는 <strong>포트폴리오용 프로젝트</strong>라는 점에서 벗어날 수 없을 뿐만 아니라
면접을 보러간 회사에서 해당 기술을 사용하고 있다면 채용되겠지만 아니라면 <strong>“어쩌라고?”</strong> 라는 소리만 듣다 나올 것이다.</p>

<p>만약 본인이 대기업을(그것도 네카라쿠배당토라고 하는 IT 서비스 계열만 특정된다. 일반 대기업이나 금융권들은 훨신 레거시한 기술을 사용한다)
지망하고 능력도 있다면, 더 열심히 하면 되겠지만</p>

<p><strong>네가 레거시 기업에서 일해서 그런 말을 하는 것이 아니냐?</strong> 고 한다면 어느정도 인정한다. 하지만 
만약 본인이 그게 아니라 나와 같이 상위 20퍼센트 정도 되는 평범한 정규분포 상에 있다면 
오히려 이런 것보다는 기술 면접에서 질문하는 기본기 관련 질문들, 네트워크, DB, 웹기술, 스프링 등에 올바르게 대답하는 것이 오히려 더 높은 점수를 받을 수 있을 것이다.</p>

<p>게다가 요즘 Chat-gpt로 대표되는 인공지능 도구의 발달로 인해서 너무 포트폴리오 자체를 맹신하지 않는 느낌도 있다(고 들었다).</p>

<h3 id="2-코딩테스트">2. 코딩테스트</h3>

<p>또 개발자 채용에 대해서 코딩테스트에 대한 이야기를 하지 않을 수가 없는데, 코딩테스트를 하는 기업이 있고 그렇지 않은 기업들이 존재한다(당연하겠지만). 그런데 코딩테스트 방법도 좀 다른데, 크게 보자면</p>

<ul>
  <li>구름, 프로그래머스등의 플랫폼을(혹은 자체 플랫폼) 이용하여 코딩테스트를 진행하는 기업</li>
  <li>면접 전 간단히 <strong>종이에 손코딩을 해가며</strong> 직접 코딩테스트를 진행하는 기업</li>
</ul>

<p>이렇게 두 가지 방법으로 코딩테스트를 진행하는데, 나는 처음 코딩테스트를 볼 때 어쩌면 당연히 백준처럼 
온라인에서 코딩테스트를 진행하는 기업이 많을 것이라고 생각했는데, <strong>오히려 면접 전 종이에 손코딩을 해가며 진행하는 기업이 더 많았다.</strong> 그러니까, 손코딩을 꼭 어느정도는 익숙해져 있어야 한다고 생각이 든다.</p>

<p>왜냐하면 내가 가장 최악의 면접이었다고 생각하는(내가 너무 대답을 못해서) 브레인즈 컴퍼니의 면접에서 js관련 간단한 문제를(심지어 1번이었는데) 손코딩을 하라고 했기 때문이다. 진짜 너무 못해서 가끔씩 그 상황이 꿈에서도 나오는데 나중에 이야기를 할 수 있으면 하도록 하고.</p>

<p>그리고 또 특이했던 코딩테스트 중에 하나는 온라인으로 진행은 하지만, 구름이나 프로그래머스와는 다르게 
온라인상에서 코드를 실행시킬 수 없고, 그냥 txt로 코드를 작성하는 것과 다름없는 방식이었다.</p>

<p>대기업은 물론 코딩테스트가 엄청 어렵고 백준 골드 및 플래티넘 문제까지는 준비해 가야 하는 경우가 많겠지만 내가 느끼기엔 중소 및 중견기업에서는 그것보다는 인성면접이나, 대학 생활, 서류 및 포트폴리오가 조금 더 중요하게 보는 경우가 많은 것 같다.</p>

<h4 id="21-손코딩">2.1 손코딩</h4>

<p>개인적으로 내 생각에, 앞으로도 직접 종이에 펜으로 손코딩을 하도록 하는 기업들이 많아질 것 같다. 뭐 그냥 감이기는 하지만, AI 도구들 때문에 집에서 코딩을 온라인으로 하는 경우에 치팅을 막을 수 없어질 것 같기 때문이다.</p>

<p>그리고 <strong>영세한 기업들만 손코딩 하는게 아니냐?</strong> 이렇게 생각할 수도 있는데, 내 경험상 꽤 큰 기업(신입사원 기준 초봉 5000만원 이상)에서도 손코딩을 하는 경우가 많았다.</p>

<p>게다가 요즘 개발이 AI 도구 (Chat-gpt 및 Cursor, 코파일럿 등)들이 IDE 형태로 제공되는 경우가 많아지고 있다 보니까 보일러플레이트 코드나 간단하거나 템플릿이 있는 코드 같은 경우에는 자동완성되는 경우가 많아지는데 이런 경우 간단한 코드 작성 또한 중요해질 수 있으니까 기본적인 코딩 실력은 반드시 필요하다고 생각한다.</p>

<p>손코딩의 경우에는 내가 받아봤던 문제들은</p>

<ul>
  <li>별찍기 문제</li>
  <li>피보나치 수열 문제</li>
  <li><strong>팩토리 메서드 패턴</strong> 구현</li>
  <li><strong>SQL 쿼리 문제</strong> « <strong>안나왔던 회사가 하나도 없을 정도로 중요하다</strong></li>
  <li>상속 관련 문제</li>
  <li>js 프로미스 구현 문제</li>
  <li>정보처리기사 실기형 문제</li>
  <li>재귀함수(메소드 작성)</li>
</ul>

<p>등등이 있었는데, 대부분이 그렇게 어렵다고는 할 수 없는 문제들이었지만 문제 다 합쳐서 A4용지 기준 다섯 장 정도는 썼던 것 같다. 기본적인 문법 문제(프로미스나 상속, 예외처리)가 중심이고, SQL 쿼리 및 조인문제가 대부분이었다.</p>

<p>그리고 당연하겠지만, 지정한 언어로 문제를 풀이해야 하는데, 나같은 경우는 자바 개발자를 목표로 하고 있었기 때문에(대부분의 웹개발자들은 그렇겠지만) 자바로 문제를 풀이해야 했다. PS를 빠르게 준비하고자 할 때 파이썬을 주로 공부하는 경우도 있는데 그런 경우에는 낭패를 볼 수 있겠다.</p>

<p>또한 자바 개발자라고 해도 자바스크립트 문제도 같이 제시하는 경우도 꽤 많았다. 이 둘은 아무래도 웹개발에서는 필수이다 보니 어쩔 수 없긴 하다. 그런데 이제 자바만 공부한 경우에는 자바스크립트 문제에 대해서 모르는 경우가 많아질 수 있으니 조금 주의해야 한다.</p>

<p><strong>SQL 쿼리</strong>는 정말 농담이 아니라 단 한곳의 회사에서도 빠짐없이 출제가 되었는데. 테이블을 몇 개 주고, 두 테이블을 조인하고 정렬하거나, 조인해서 집계함수를 사용하거나 하는 문제였다. 물론 SQL 쿼리 정도는 대부분 잘 작성하겠지만 막상 시험에서 처음부터 쓰라고 하면 곤란할 수도 있다. 갑자기 ORDER BY 절이 기억이 안날수도 있잖아.</p>

<p>조인을 하지 않는 경우는 없었다. 정말 한번도 없었는데, 조인이 SQL에서 가장 중요한 개념이기 때문에 그럴 수 있다고 생각하고.</p>

<p>각각 조인의 성질을 묻는 경우도 있었다. 예를 들어서, 사원 테이블과 카드 테이블이 있는데 사원이 어떤 카드도 이용하지 않는 경우에도 카드 테이블이 빈칸으로 나오도록 출력하려면 어떤 조인을 사용해야 할지 물어보는 경우도 있었다(LEFT OUTER JOIN을 물어보는 문제였다).</p>

<h3 id="22-개발자-취업-트렌드">2.2 개발자 취업 트렌드</h3>

<p>트렌드라고 해야하나? 대부분을 다대다 면접을 본 입장에서, 어느정도 다른 면접자들의 면접 질문도 듣고, 경쟁자들이 어느정도 준비해 왔는지 느껴볼 수 있는 시간이었는데 일단 정리해 보면</p>

<ul>
  <li><strong>전공자 + 부트캠프 출신이 생각보다 매우 많음.</strong></li>
</ul>

<p>(일단 나는 SSAFY 출신은 아니긴 하지만 부트캠프 출신이기는 하다) 나와 같이 지원한 지원자들의 대부분이 SSAFY 출신이셨고, 컴퓨터 공학 전공자들이었다. 전공자들이라고 해도, 실제 포트폴리오 준비를 하려면 어쩔 수 없이 어느정도 부트캠프(국비교육)에 들어가야 하기 때문에 그런 것 같기는 하다.</p>

<p>커뮤니티에서는 국비교육이나 부트캠프를 엄청 내려치고 뭐라고 하는 경우가 좀 있었는데, 실제 면접장에서 봤을 때 과장이 아니라 정말 전부가 국비교육이나 부트캠프를 이용한 경험이 있었다. 내가 느끼기엔 요즘 너무 취업이 어려워지기도 하고, 취업 준비를 하는 사람이 워낙 많다 보니 단순 전공자라고 해서 큰 메리트가 있지는 않기 때문인 것 같다.</p>

<p>비전공자이신 분들도 계셨는데, 이런 분들 중에서는 전부가 부트캠프를 수료하셨고 어느정도의 직무경험이 있으신 분들이 많았다.</p>

<p>실제로 내가 면접을 본 서울에 있는 서비스 기업에서 3대3 면접을 했었는데, 나 외의 두분 모두 SSAFY 출신이시고 약 1년정도의 경력을 가지고 있었다. 여담이지만 그래서 너무 면접도 잘 보시고 대답을 잘 하는 모습을 보고 멘탈이 갈려서 그냥 다른 지원자들의 질문을 듣고 다음에 다른 면접을 볼 때 참고해야겠다고 생각했다.</p>

<ul>
  <li><strong>1년정도의 중고신입인 경우가 많음.</strong></li>
</ul>

<p>괜찮은 기업으로 가면 갈 수록 1년정도의 경력을 가지고 있는 지원자들이 많아진다. 초봉 4600만원 정도의 중견기업에서 나를 제외한 두 사람 모두 1년정도의 경력(비정규직이나 정규직 가리지 않고)을 가지고 있었다. 최근 슈카월드에서도 올라왔지만 중고신입 및 경력직 선호 현상이 심해지고 있다 보니, <strong>신입 채용이라고 하더라도 싸워야 하는 상대가 경력직인 경우가 꽤나 많다.</strong></p>

<h3 id="3-포트폴리오">3. 포트폴리오</h3>

<p>흔히 개발자 취업에서 포트폴리오가 정말로 중요하다고 많이 말하고 실력이 뛰어나면 학벌이고 뭐고 상관없다고 많이 말하기는 하지만, 과연 그런가? 싶은 생각도 조금 든다.</p>

<p>결국 면접을 보기 위해서는 서류를 통과해야 하고, 서류를 통과하기 위해서는 이력서도 그만큼 중요한 것 같긴 하다.</p>

<p>그러니까 내가 말하고 싶은 건, <strong>포트폴리오와 기술스택도 정말 중요하지만 그게 전부가 아니고, 고도한 기술스택을 많이 사용한다고 점수가 올라가는건 아닌 것 같다.</strong> 어떤 상황에 어떤 기술을 써야할지, 어떤 프레임워크가 어떤 상황에서 적합한지 어느정도 자기 자신이 알고 있어야 하고, 문제를 해결하는 방법을 말로 잘 표현할 수 있는 것도 중요하다.</p>

<p>그리고 면접보기 전, 자신이 작성한 포트폴리오 결과물에 대해서 정말 자세히 알고 있는게 그 무엇보다도 중요하다.</p>

<p>대부분 지원자들의 포트폴리오를 보면, 자바 스프링 프레임워크 + 리액트로 작성된 프론트엔드 프로젝트가 대부분이고, 여기에 RDB를 사용하고, 젠킨스 및 도커 정도의 컨테이너 도구를 사용하는 경우가 많았다. 생각보다 레디스 같은 캐시 도구를 사용한다고 했을때 눈에 띄는지 면접관이 질문하는 경우가 있었고, 카프카 및 메시지 큐 같은 경우에는 왜 사용했는지 구체적으로 질문하는 경우가 있었다.</p>

<p>당연히 대부분은 오버엔지니어링이지만(내가 면접봤을 때 실제적으로 포트폴리오에서 대규모 서비스를 구현한 경우는 없었음), 그래도 최소한 왜 이런 기술을 사용했는지, 기술에 대해 자세한 이유를 말할 수 있는 것이 중요하다.</p>

<p>지원자들의 포트폴리오는 대부분이 자신들만의 새로운 웹 서비스 프로젝트였는데, 게시판같은 CRUD에 치중한 간단한 프로젝트는 없던 것 같다.</p>

<p>리액트가 거의 표준적인 프론트엔드 프레임워크이기는 하지만 Vue.js 와 같은 프레임워크를 사용해 봤냐고 물어보는 경우도 있었기 때문에 상대적으로 특별해 보일 것도 같다.</p>

<h3 id="4-면접">4. 면접</h3>

<p>그리고 대망의 면접인데, 솔직히 나는 면접을 정말 못해서 뭐라고 말해야 할지는 모르겠지만 일단 그래도 면접을 한 10개 이상 보면서 사소한 거라고 해도 내가 받은 질문 및, 같이 면접을 보는 면접자가 받은 질문과 그에 대한 답변을 정리해보고자 한다.</p>

<h4 id="41-기술면접">4.1 기술면접</h4>

<h5 id="q1-jpa를-누가-사용하자고-했나요">Q1. JPA를 누가 사용하자고 했나요?</h5>
<p>사실 나는 스프링 기반 웹 프로젝트에서 어쩌면 당연하게 JPA를 사용하는 경우가 많아서 팀 프로젝트에서 JPA를 기본적으로 깔고 접근을 했기 때문에 이 질문을 받았을때 조금 당황했다.</p>

<p>내가 팀장이었기 때문에 내가 사용하자고 했고, 사용한 이유를 덧붙여서 이야기 했다. JPA를 사용한 이유는:</p>
<ul>
  <li>JPA를 이용할 때 객체지향적으로 도메인을 설계할 수 있음</li>
  <li>데이터베이스 조작을 쉽게 할 수 있음</li>
  <li>쿼리 작성 시간을 줄일 수 있음</li>
</ul>

<h5 id="q2-jpa를-이용할-때-성능상의-단점은-없었나요">Q2. JPA를 이용할 때 성능상의 단점은 없었나요?</h5>
<p>이 질문은 받았을 때 조금 당황했는데, 왜냐하면 아무래도 실제 운영되는 프로젝트에서는 대규모 데이터를 처리해야 하기 때문에 JPA를 이용할 때 성능적인 문제가 체감 될 수 있겠지만, 소규모의, 흔히 말하는 포트폴리오용 웹 프로젝트에서는 성능적인 문제를 체감하기 힘들기 때문이다.</p>

<p>나의 답변:
<strong>“대규모 데이터를 다뤄본 적이 없기 때문에 실제 성능적인 문제를 겪어본 적은 없었지만, N+1 문제, 지연로딩이나 즉시로딩 문제 등 그런 문제를 겪어본 적이 있고 해당 문제를 해결한 적이 있다”</strong></p>

<h5 id="q3-웹-서버와-was의-차이는-무엇인가요">Q3. 웹 서버와 WAS의 차이는 무엇인가요?</h5>
<p>이건 중소 SI 기업에서 면접을 볼 때 받은 질문이었는데, 일단 웹 서버는 웹 브라우저에서 요청한 정적 컨텐츠를 제공하는 서버이고, WAS는 동적 컨텐츠를 제공하는 서버이다. DB에서 데이터를 가져온다거나 하는 작업을 하는 것이 WAS이다.</p>

<h5 id="q4-프로젝트를-살펴봤는데-크롤링을-하는-코드가-있었는데-회사에-들어오면-크롤링-보다는-크롤링을-막는-입장입니다-그럴-때-어떻게-방지할-수-있을까요">Q4. 프로젝트를 살펴봤는데 크롤링을 하는 코드가 있었는데, 회사에 들어오면 크롤링 보다는 크롤링을 막는 입장입니다. 그럴 때 어떻게 방지할 수 있을까요?</h5>
<p>나의 답변:</p>
<ul>
  <li><strong>Robots.txt 파일을 만들어서 크롤링을 금지한다고 공지</strong></li>
  <li>동적 페이지로 구현하여 셀레니움 같은 브라우저 자동화 도구 없이는 크롤링이 어렵게 만듦</li>
  <li>크롤링으로 의심되는 짧은 시간 내의 과도한 요청은 IP 차단</li>
</ul>

<h5 id="q5-그러면-세션으로-크롤링을-막을-수-있을까요">Q5. 그러면 세션으로 크롤링을 막을 수 있을까요?</h5>
<p>이 질문을 받고는 당황했는데 그래서 실제 면접에서 대답을 제대로 하지 못했다. 세션을 통해 크롤링을 완전히 막는 것은 어렵지만, 세션을 활용하여 크롤링을 어렵게 만들 수는 있다.</p>

<p>세션을 이용한 크롤링 방지 방법:</p>
<ol>
  <li><strong>세션 기반 인증</strong>
    <ul>
      <li>사용자가 로그인해야만 콘텐츠에 접근할 수 있도록 설정</li>
      <li>세션을 통해 사용자의 인증 상태를 확인하고, 인증되지 않은 요청은 차단</li>
    </ul>
  </li>
  <li><strong>세션 만료 시간 설정</strong>
    <ul>
      <li>세션의 유효 기간을 짧게 설정</li>
      <li>세션이 만료되면 다시 인증을 요구</li>
      <li>자동화된 스크립트가 지속적으로 세션을 갱신해야 하므로 크롤링을 어렵게 만듦</li>
    </ul>
  </li>
</ol>

<h5 id="q6-spring에서-어떤-디자인패턴이-활용되고-있나요">Q6. Spring에서 어떤 디자인패턴이 활용되고 있나요?</h5>
<p>처음엔 MVC 패턴이 사용된다고 대답했는데, 답이 아니라고 하길래 조금 당황했다. 면접관님이 원하는 답은 싱글톤 패턴이었다.</p>

<p>스프링의 주요 디자인 패턴:</p>
<ul>
  <li><strong>싱글톤 패턴</strong>: 스프링 컨테이너에서 빈을 관리하고 인스턴스를 하나만 생성하여 애플리케이션 전반에 걸쳐 공유</li>
  <li><strong>팩토리 패턴</strong>: 객체 생성을 캡슐화</li>
  <li><strong>프록시 패턴</strong>: AOP 구현에 활용</li>
</ul>

<h5 id="q7-spring에서-di를-사용하는-이유는-무엇인가요">Q7. Spring에서 DI를 사용하는 이유는 무엇인가요?</h5>
<p>나의 답변: “스프링에서 DI를 사용하는 이유는 빈의 생성이나 실행 순서등을 개발자가 관리하는 것이 아니라 스프링이 관리함으로써, 개발자는 서비스 로직에만 집중할 수 있다.”</p>

<p>DI의 장점:</p>
<ul>
  <li>객체 간의 결합도를 낮춤</li>
  <li>유연성을 높임</li>
  <li>테스트 용이성 증가</li>
  <li>객체 생성 로직을 캡슐화하여 코드를 더 깔끔하게 만듦</li>
</ul>

<h5 id="q7-1-이는-객체지향의-어떤-원칙을-지키는-것인가요">Q7-1. 이는 객체지향의 어떤 원칙을 지키는 것인가요?</h5>
<p>이는 객체지향의 원칙 중 하나인 의존성 역전 원칙(DIP)을 지키는 것이다. 이는 추상화에 의존하고, 구체화에 의존하지 않는 것을 의미한다.</p>

<p>나는 여기에서 제대로 대답을 못했는데, 면접에 익숙하지 않아서 그런 것도 있는 것 같다. 면접관 앞에서 SOLID 원칙을 일일이 나열하며 설명하기가 어려웠다.</p>

<h5 id="q8-spring을-사용해-보면서-spring은-어떤-프로젝트에-사용하기-좋은것-같나요">Q8. Spring을 사용해 보면서 Spring은 어떤 프로젝트에 사용하기 좋은것 같나요?</h5>
<p>나의 답변: “스프링 같은 경우에는 노드나 파이썬의 fast api에 비해서 보다 더 전문적인 엔터프라이즈, 즉 큰 프로젝트에서 사용하기 좋은 프레임워크라고 생각한다. 왜냐하면 스프링은 필터 및 인터셉터등을 이용해서 더 구체적인 접근 통제 및 인가 관리가 가능하다고 생각하기 때문이다.”</p>

<p>스프링의 장점:</p>
<ul>
  <li>풍부한 에코시스템: Spring Boot, Spring Data, Spring Security 등 다양한 모듈 제공</li>
  <li>강력한 커뮤니티 지원: 오랜 역사와 풍부한 문서</li>
  <li>유연한 설정: XML, Java Config, 어노테이션 기반 설정 지원</li>
</ul>

<h5 id="q9-프론트엔드와-백엔드-중-어떤-것이-더-중요한가요">Q9. 프론트엔드와 백엔드 중 어떤 것이 더 중요한가요?</h5>
<ul>
  <li>저는 백엔드 개발자를 희망하며 공부했기 때문에 백엔드가 더 중요하다고 생각하지만, 여러 프로젝트를 진행해보며, 중요하다고 생각했던 서비스 로직, 예를들어 카드 결제 시스템과 같은 로직을 구현할 때 백엔드가 아닌 프론트엔드에서 구현하는 경우를 겪은 적이 있었다. 이런 경험을 보았을 때, 프론트엔드와 백엔드가 모두 중요하다고 생각하게 되었고 프론트엔드 라이브러리 즉, 리액트 및 자바스크립트 모두 사용할 수 있다.</li>
</ul>

<h5 id="q10-실제-서버에-데이터베이스를-설치해보셨나요">Q10. 실제 서버에 데이터베이스를 설치해보셨나요?</h5>
<p>이 질문은 중소 SI에서 면접을 볼 때 받은 질문이었는데, 이런 질문을 받고 조금 당황했다. <strong>그러면 면접보러 오는 사람중에 혹시 DB를 깔아본 적이 없는 사람이 있기도 한건가? 그러니까 물어보는 거겠지?</strong></p>

<p>나의 답변: “당연히 설치해 봤고, 그 외에도 젠킨스등을 설치하고 이용해서 간단한 배포 자동화를 진행해 본 적이 있을 뿐만 아니라 실제 프로젝트를 클라우드 서버를 이용해서 배포를 한 적이 있습니다.”</p>

<h5 id="q11-데이터베이스를-단순히-조회해서-표시하는-게-아니라-데이터를-가공해서-서빙해-본-경험이-있나요">Q11. 데이터베이스를 단순히 조회해서 표시하는 게 아니라, 데이터를 가공해서 서빙해 본 경험이 있나요?</h5>
<p>나의 경험:</p>
<ul>
  <li>Open API의 chat-gpt API를 사용한 프로젝트에서는 단순 데이터 표시만 했음</li>
  <li>공공주차장 조회 프로젝트에서는 선형회귀를 이용해서 예상 주차가능 대수를 제공한 경험이 있음</li>
</ul>

<h5 id="q11-1-해당-예측-결과는-잘-맞았나요">Q11-1. 해당 예측 결과는 잘 맞았나요?</h5>
<p>솔직히 잘 맞지 않았다고 대답했다.</p>

<h5 id="q12-어떤-db를-사용해-보셨나요">Q12. 어떤 DB를 사용해 보셨나요?</h5>

<h5 id="q13-쿼리는-잘-작성하세요">Q13. 쿼리는 잘 작성하세요?</h5>

<h5 id="q14-http-에러-코드-400번대와-500번대는-어떤-차이가-있나요">Q14. HTTP 에러 코드 400번대와 500번대는 어떤 차이가 있나요?</h5>
<ul>
  <li>400번대: 클라이언트 오류 (400, 401, 403, 404 등)</li>
  <li>500번대: 서버 오류</li>
</ul>

<p>클라이언트 오류는 공부하는 입장에서 많이 봤던 경우가 많은데, 서버 오류는 보기 드물어서 모르는 경우가 많다.</p>

<h5 id="q15-기술-스택에-안드로이드-스튜디오가-적혀있는데-안드로이드를-어느정도로-개발할-수-있으신가요">Q15. 기술 스택에 안드로이드 스튜디오가 적혀있는데, 안드로이드를 어느정도로 개발할 수 있으신가요?</h5>
<p>의외로 안드로이드 관련 질문을 꽤 많이 받았는데(서비스 기업 및 SI 기업 둘 모두) 웹개발 직무라고 해도 자사 서비스 또는 SI 프로젝트에서 웹 기반 서비스를 모바일로 확장해야 하는 경우가 많기 때문인 것 같다.</p>

<p>나의 경험:</p>
<ul>
  <li>학교에서 모바일 프로그래밍이라는 과목을 수강</li>
  <li>안드로이드 개발 경험 보유</li>
</ul>

<p>실제 현업에서도 <strong>전문적으로 모바일 개발을 하지는 않더라도 담당자가 자리를 비우거나 했을 때 오류를 잡을 수 있는 정도만 된다고 하더라도 많은 도움이 되고 메리트가 있다</strong>고 한다. 이력서를 쓸 때 기술스택에 도움이 될 수 있는 정보라고 생각된다.</p>

<h5 id="q16-프로젝트를-진행할-때-협업을-어떻게-진행하나요">Q16. 프로젝트를 진행할 때 협업을 어떻게 진행하나요?</h5>

<h5 id="q17-성장하는-개발자가-되고-싶다고-말씀하시고-현재-기술스택을-보면-최신-프레임워크를-사용하고-있는데-실제-입사한다면-레거시-코드를-다루는-경우가-많을-것-같은데-어떻게-할-생각입니까">Q17. 성장하는 개발자가 되고 싶다고 말씀하시고, 현재 기술스택을 보면 최신 프레임워크를 사용하고 있는데, 실제 입사한다면 레거시 코드를 다루는 경우가 많을 것 같은데 어떻게 할 생각입니까?</h5>
<p>개별적으로 답변을 준비해 가면 좋을 것 같다.</p>

<h5 id="q18-포트폴리오를-보니-카프카가-있는데-왜-카프카를-사용하셨죠">Q18. 포트폴리오를 보니 카프카가 있는데, 왜 카프카를 사용하셨죠?</h5>
<p>카프카는 비동기 메시징 시스템으로, 데이터 스트림 처리에 특화되어 있다.</p>

<p>카프카를 사용한 이유:</p>
<ol>
  <li><strong>높은 처리량</strong>
    <ul>
      <li>대량의 데이터를 신속하게 처리 가능</li>
    </ul>
  </li>
  <li><strong>분산 시스템</strong>
    <ul>
      <li>여러 대의 서버에서 데이터를 분산 처리 가능</li>
    </ul>
  </li>
</ol>

<p>이렇게 대답했어야 했지만, 이 부분에서 대답을 제대로 하지 못했다. 내 실패한 면접 대부분이 카프카로 주접떠다가 망한게 좀 있다. 오버 엔지니어링이었지만, 학습하는 과정에서 카프카를 사용해 봤다는 식으로 대답했는데, 이런 경우에는 카프카에 대한 자세한 설명을 해야 되지 않을까 하는 생각이 든다.</p>

<h5 id="q19-정보처리기사를-졸업-이후에-취득했는데-왜-학교다닐때-취득하지-않았나요">Q19. 정보처리기사를 졸업 이후에 취득했는데, 왜 학교다닐때 취득하지 않았나요?</h5>
<p>이 질문은 다대다 면접에서 공통질문으로 받았다.</p>

<p>답변 사례들:</p>
<ul>
  <li>나의 답변: “4학년때 3회차 정보처리기사를 취득하려고 했지만 떨어졌기 때문에 졸업 이후에 취득했습니다.”</li>
  <li>다른 지원자의 답변: “정보처리기사의 쓸모가 없다고 생각했기 때문에 취득하지 않았습니다”</li>
</ul>

<p>이 질문을 받은 회사가 엄청 영세한 회사도 아니고 꽤 규모가 있는 솔루션 회사였기 때문에 왜 이런 질문을 했는지 아직도 궁금하다.</p>

<h5 id="q20-2025년의-기술-트렌드는-무엇이-있을까요">Q20. 2025년의 기술 트렌드는 무엇이 있을까요?</h5>
<p>대부분의 답변:</p>
<ul>
  <li>양자컴퓨팅</li>
  <li>생성형 AI</li>
</ul>]]></content><author><name>ash tensor</name></author><category term="WEB" /><category term="JAVA" /><summary type="html"><![CDATA[[WEB][JAVA] 개발자 취업 후기 및 백엔드 및 웹개발, IT 직군 기술면접 준비]]></summary></entry><entry><title type="html">[WEB][REVIEW] 커서 IDE 롱텀 리뷰- AI 에이전트라고 할 만 한가?</title><link href="http://localhost:4000/web/review/2025/03/29/cursor-ai-longterm-review.html" rel="alternate" type="text/html" title="[WEB][REVIEW] 커서 IDE 롱텀 리뷰- AI 에이전트라고 할 만 한가?" /><published>2025-03-29T00:00:00+09:00</published><updated>2025-03-29T00:00:00+09:00</updated><id>http://localhost:4000/web/review/2025/03/29/cursor-ai-longterm-review</id><content type="html" xml:base="http://localhost:4000/web/review/2025/03/29/cursor-ai-longterm-review.html"><![CDATA[<h2 id="webreview-커서-ide-롱텀-리뷰--ai-에이전트라고-할-만-한가">[WEB][REVIEW] 커서 IDE 롱텀 리뷰- AI 에이전트라고 할 만 한가?</h2>

<h3 id="1-서론">1. 서론</h3>

<p>커서를 이제 약 3개월째 사용하는 중이다. 예전에 후기 비슷한 글을 올린 적이 있는데, 커서 업데이트가 많이 되면서 그때와 지금과는 사용환경이 많이 달라졌다.
일단 그 때는 그냥 개인 프로젝트용으로 사용했었지만 지금은 실제 업무에도 사용해보려고 노력하고, 여러 시행착오도 해 가며 개발환경을 꾸리려고 노력했었기 때문에 말할 수 있는 내용이 더 많다.</p>

<p>일단 거두절미하고 말하자면</p>

<p>아직 <strong>완벽한 AI 에이전트라고 말할 수는 없지만 적어도 한 30% 정도는 그렇게 말해줘도 좋지 않을까?</strong> 싶다.</p>

<h3 id="2-ai-에이전트">2. AI 에이전트</h3>

<blockquote>
  <p>인공 지능 에이전트는 환경과 상호 작용하고, 데이터를 수집하고, 
데이터를 사용하여 사전 결정된 목표를 달성하기 위해 필요한 작업을 스스로 결정해서 수행할 수 있는 소프트웨어 프로그램입니다. 
사람이 목표를 설정하면 AI 에이전트는 목표를 달성하기 위해 필요한 최적의 조치를 독립적으로 선택합니다. 
예를 들어 고객 문의를 해결해야 하는 상담 센터 AI 상담원을 생각해 보세요. 
상담원은 자동으로 고객에게 여러 질문을 하고, 내부 문서의 정보를 조회하고, 해결책을 찾아 대응합니다. 
고객의 대답에 따라 고객 문의 자체를 해결할 수 있는지 아니면 사람에게 전달해야 하는지 결정합니다.</p>
</blockquote>

<p>AWS에서 말하기로는 이렇다는데, 이걸 개발로 치환해 보면 다음과 같지 않을까 싶다.</p>

<ol>
  <li><strong>알아서 개발환경 및 OS와 상호작용하고 -&gt; 이를 통해서 각 PC마다 다른 Configuration 데이터를 수집하고</strong></li>
  <li><strong>이를 통해서 사전 결정된 목표 -&gt; 개발자가 지시한 구현 또는 문제 해결을 스스로 결정해서 수행할 수 있는 소프트웨어 프로그램이다.</strong></li>
  <li><strong>사람이 디렉션을 주면 목표를 달성하기 위해 필요한 최적의 조치를 독립적으로 선택한다.</strong></li>
</ol>

<p>인데, chat -gpt로 대표되는 LLM 인공지능 도구와는 다른 면이 있다. 
만약 당신이 코딩을 많이 해 봤다면 답답한 적이 있었을 텐데, 왜냐하면 gpt는 내 개발환경과 유리된 곳에 있어서 맥락을 잘 이해하지도 못할 뿐만 아니라
코드베이스를 직접 집어 던지기도 어렵고, 또 설정 정보도 모르기 때문에 헛소리를 계속 내뱉어서 디렉션을 꾸준히 줘야 했기 때문이다.</p>

<p>이런 AI IDE가 기존 Chat gpt와 다른 점이 있다면 바로 이 점인데.</p>

<h4 id="알아서-터미널을-친다">알아서 터미널을 친다</h4>

<p><img src="/img/posts/cursor/cursor_2/1.png" style="width: 80%" /></p>

<p>지금 이 사진은 내가 퇴근하고 나서 개별적으로 작성하는 사이드 프로젝트인데 대부분은 커서에게 디렉션을 넣는 방향으로 개발했다.
요즘 들려오는 신조어인 바이브코딩이 이런 맥락일까? 싶기도 한데, 해당 프로젝트는 주가 인공지능 관련 프로젝트이다.</p>

<p>사진의 오른쪽을 보면</p>

<p><img src="/img/posts/cursor/cursor_2/2.png" style="width: 80%" /></p>

<p>바로 이 부분인데, 알아서 독립된 터미널 창에서 ls를 쳐서 그 응답을 가지고 해당 프로젝트 구조, src에 어떤 파일들이 있는지를 받고, 
IDE에서 해당 파일들을 직접 불러와서 읽는다.</p>

<p>이건 예전 기록이라 Run command 나 터미널창이 꺼져있어서 이해가 안될수도 있어 이해가 쉽게 가기 위한 사진을 가져와 보면</p>

<p><img src="/img/posts/cursor/cursor_2/4.png" style="width: 80%" /></p>

<p>이런식으로, 내가 방금 만든 간단한 예제지만 내가 DB가 연결이 안된다고 테스트를 해보라고 하는 간단한 과제를 주면 실제로 터미널을 이용해서
oracle 커넥터를 설치하고 또 알아서 오라클 접속을 하는 간단한 스크립트도 작성한다.</p>

<ol>
  <li><strong>알아서 개발환경 및 OS와 상호작용하고 -&gt; 이를 통해서 각 PC마다 다른 Configuration 데이터를 수집하고</strong></li>
</ol>

<p>어쩌면 앞서 말한 개발자 AI Agent의 프로토타입이 이런게 아닐까 싶다.</p>

<h4 id="알아서-코드를-수정한다">알아서 코드를 수정한다</h4>

<p><img src="/img/posts/cursor/cursor_2/3.png" style="width: 80%" /></p>

<p>또한 이렇게 알아서 코드를 수정해가며, <strong>제대로 될 때까지 코드를 스스로 실행한다</strong>. 내 디렉팅이 데이터를 제대로 수집하기 않고 있다는 것에 대한 요청이었으므로
 오류를 수정하기 위해 이에 대한 명령을 독립적으로 판단해서 수행하는 모습이다.</p>

<p>이는 예전 Composer 라고 하는 기능에서 더 나아가 해당 기능이 Agent라고 하는 기능에 통합된 내용인데</p>

<p>개인적으로 조금 무서웠던 점은 내가 요청한 구현 내용이 어쩌면 정말 마이너한 한국의 대신증권이라는 한 증권사의 
cybos라고 하는 api 요청을 구현해 달라고 한 것인데</p>

<p>완벽하지는 않았지만 초안을 쭉쭉 만들어서 <strong>실제로 데이터를 수집가능한 코드</strong>를 만들어 냈다는 것이다.</p>

<p>아마존이나 구글의 메이저한 API 구현이라면 이해할 수 있지만 어쩌면 정말 로컬하고 마이너한 이런 한국의 증권회사의 API를 이용하는데 무리없이 
단 30초 안에 500라인 600라인 코드를 줄줄 써낼 수 있는게 조금 무서웠다.</p>

<p>꾸준히 이야기가 나오는 <strong>AI가 개발자를 모두 대체한다</strong>는 시나리오가 점점 현실화가 되어 가고 있다는 것을 느꼈다.</p>

<h4 id="세달간-사용하면서-느낀점">세달간 사용하면서 느낀점</h4>

<p>일단 생산성의 향상이 아주 크다고 느꼈다. 
그러니까 일을 다니면서 사실 집에서 내 사이드 프로젝트에 투자할 시간이 정말 매우 적다.
5시에 퇴근하고 집에 6시 반에 도착해서 저녁을 먹고 씻으면 8시인데 피곤한 몸을 이끌고 두시간 이상 집중하기란 불가능에 가깝다.</p>

<p>내일 아침에 출근해야 하는데…</p>

<p>하지만 현재 앞서 사진에 나온 내 사이드 프로젝트의 코드 량이 벌써 수천 라인 가까이 되는데, 실제 내가 이런 도구의 도움을 받지 않고 직접 코드를 썼다면,
생소한 기술 문서를 찾아보고 테스트 해가며 프로토타입을 만드는 데에만 몇달 걸렸을 지 모른다.</p>

<p><img src="/img/posts/cursor/3.png" style="width: 80%" /></p>

<p>하지만 커서를 이용하면 디렉션을 넣고, 코드를 한번 훑어보고, 왜 이렇게 짰는지 궁금하면 물어보거나 ctrl + k를 눌러서 주석을 상세히 달라고 요청하면
어느정도 돌아가는 프로토타입이 제공된다. 또 특정 마이너한 API를 이 친구가 이해하지 모르는 것 같아 보이면 내가 기술 문서를 서칭해서 방법을 알려줘도 된다. 그럼 이해하니까.</p>

<h3 id="3-단점">3. 단점</h3>

<h4 id="지능떡락">지능떡락</h4>

<p><img src="/img/posts/cursor/cursor_2/5.jpg" style="width: 80%" /></p>

<p>하지만 단점도 있는데 일단 AI가 지능이 아직은 좀 낮다는 것이다.</p>

<blockquote>
  <p>아니 그게 무슨 소리냐, 니가 아까 이세상의 모든 기술 문서를 전부 수억번씩 학습한 AI라며?</p>
</blockquote>

<p>그렇긴 한데, 아직 LLM의 한계가 너무 명확하다.
Open AI나 앤트로픽 모두 자기들의 모델이 수천만 개의 토큰을 한번에 받고 컨텍스트를 기억한다고 하고 있지만 실제 내가 사용해 본 결과
그렇지 않다.</p>

<p>현재 이런 인공지능 모델들은 응답을 보낼때 지금까지 했던 모든 대화들을 입력으로 보내는데, 
그러는 과정에서 기본 시스템 메시지들과 응답, 요청, 코드가 뒤섞여서 신경망의 지능이 실시간으로 떡락한다.</p>

<p>내 체감상 <strong>한 파일의 코드가 300 라인 이상 넘어가면 그 이상부터는 제대로 작동하던 AI도 순식간에 멍청해진다.</strong></p>

<p>그러니까 300라인 정도가 넘어가는 복잡한 클래스 부터는 슬슬 컨텍스트를 잃어서 헷갈려하기 시작하는게 눈에 보인다.</p>

<p>제대로 작동하게 고쳐놓은 메소드나 코드도 작동 안되는 리비전으로 돌려 놓는다거나(예를 들자면 시작일 종료일 등을 계속 혼동하는 등)
작동이 안되면 특정 부분을 수정하고 다시 원상복귀하고 다시 수정하고 다시 원상복구 하는 등, 맥락을 제대로 이해하지 못하는 모습을 계속 보인다.</p>

<p>이런 부분은 결국 사람이 직접 고칠 필요가 있다. 나의 경우에도 이런 부분은 항상 직접 문서를 찾아가며 하나씩 고치거나 디버깅을 찍어 본다.</p>

<p><strong>실제로 앞서 보여줬던 저 위의 사진에 나온 예시, 결국 내가 손으로 고쳤다. API 예제 문서 보면서.</strong></p>

<p>그러니까 프로젝트 자체를 이해하는건 아직 너무너무너무 먼 이야기고 파일, 클래스 하나가 복잡해지기 시작하면 그것조차도 이해하기 어려워 한다는 말이다.</p>

<h4 id="ide로서의-완성도">IDE로서의 완성도</h4>

<p>이 부분은 결국 Intellij와의 비교인데, 아직도 레거시한 JSP와 스프링, 그리고 <strong>스트럿츠</strong> 가 현업으로 돌아가고 있는 한국 상황 상, VSCODE 기반인 커서는 
현업에서 제대로 활용하기는 쉽지 않다.</p>

<p>Intellij도 제대로 불러올 수 없는 레거시한 이클립스 종속적인 프로젝트도 셀 수 없이 많은데 vscode 기반인 커서가 IDE라고 주장하기는 좀 어렵다고 보인다.</p>

<h3 id="결론">결론</h3>

<p>내가 내린 결론은, 음,</p>

<p><strong>사이드 프로젝트 용 개발 도구나 스타트업이 쓰면 아주 좋을 도구</strong></p>

<p>라는 느낌이 들었다.
최신 프레임워크나 기술들, 웹으로 예를 들자면 스프링부트 부터는 VSCODE에서 플러그인 등으로 아주 원활하게 지원할 뿐더러 
사실 레거시한 프로젝트들도 시간만 들이면 VSCODE에서 빌드하고 실행하고 다 할 수 있다.
하지만 그게 개발하는 시간보다 더 오래 걸릴 뿐만 아니라 그러한 프로젝트는 유지보수하는데 중점이 되어 있기 때문이다.</p>

<p><strong>커서는 새로 뭔가를 만들어내기 아주 좋은 도구이다.</strong> 손이 정말 네개는 더 달린 느낌이다. 개발자가 아닌 사람이 써도 좋다.</p>

<p>여기서 AI의 미래는 머지 않았다, 개발자는 대체되지 않을 거다, AI가 금방 대체할거다, 이런 뜬구름 잡는 이야기는 하지 않을 거다. 그런데</p>

<p><strong>적어도 커서는 20달러인데, gpt 유료 구독도 20달러이면 그림을 안뽑을 거라면 gpt 구독보다는 커서를 사용하는게 훨신 낫지 않을까?</strong></p>]]></content><author><name>ash tensor</name></author><category term="WEB" /><category term="REVIEW" /><summary type="html"><![CDATA[[WEB][REVIEW] 커서 IDE 롱텀 리뷰- AI 에이전트라고 할 만 한가?]]></summary></entry><entry><title type="html">[WEB][JAVA] JPA 상속 및 심화</title><link href="http://localhost:4000/web/java/2024/12/28/jpa-inheritance.html" rel="alternate" type="text/html" title="[WEB][JAVA] JPA 상속 및 심화" /><published>2024-12-28T00:00:00+09:00</published><updated>2024-12-28T00:00:00+09:00</updated><id>http://localhost:4000/web/java/2024/12/28/jpa-inheritance</id><content type="html" xml:base="http://localhost:4000/web/java/2024/12/28/jpa-inheritance.html"><![CDATA[<h2 id="webjava-jpa-상속-및-심화">[WEB][JAVA] JPA 상속 및 심화</h2>

<h3 id="1-서론">1. 서론</h3>

<p>JPA는 편리한 기능을 제공하는 프레임워크이다. 그렇다고 JPA가 <strong>“단순 쿼리를 치지 않아서 좋다.”</strong> 라는 의미만 있는 것은 아니라고 생각한다.</p>

<blockquote>
  <blockquote>
    <p>JPA는 객체지향적으로 데이터를 다루는 프레임워크이다.</p>
  </blockquote>
</blockquote>

<p>여기에 초점이 맞춰져야 한다고 본다.</p>

<p>네가 뭔데 심화된 내용을 적냐고 말하는 사람이 있을 수 있긴 하지만, 도서관에서 스프링 책을 찾아보거나 JPA 관련 포스트를 찾아보며 공부하면서 JPA를 단순 ORM 매핑 프레임워크로 설명하고 넘어갔기 때문에, 최근 DB 스키마를 작성하며 JPA에서 객체지향을 다루며 상속이나 다형성이 어떻게 구현되는지 이용하며 더 심화된 내용을 적는 것이다.</p>

<h3 id="2-상속">2. 상속</h3>

<p>일단 다형성이란 무엇인가?</p>

<p>자바에서 다형성이란 객체지향적으로 프로그래밍을 할 때, 상위 클래스의 타입으로 하위 클래스의 인스턴스를 참조할 수 있는 것을 의미한다.</p>

<p>내가 생각하는 가장 흔한 예시로는 컬렉션 프레임워크인데,</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">testList</span><span class="o">;</span>
            <span class="n">testList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="o">}</span>
    <span class="o">}</span>

</code></pre></div></div>

<p>이런 식으로, 리스트 인터페이스를 구현한 클래스들을 사용할 때, 리스트 인터페이스의 메서드를 사용할 수 있는 것이다.
JPA에서도 마찬가지로 상속을 이용한 다형성을 이용할 수 있는데,</p>

<p>예를 들어서 이런 User 엔티티가 있다고 가정해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nd">@Getter</span> <span class="nd">@Setter</span>
<span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"users"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="nd">@Column</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>

    <span class="c1">// 생략</span>
    <span class="c1">// User는 스케쥴을 가지고 있다고 할 때를 생각해 보자.</span>
    <span class="c1">// 이런 식으로 스케쥴을 가지고 있는 것이다.</span>
    <span class="nd">@JsonManagedReference</span> <span class="c1">// 순환참조 방지(User에서 참조하는 WeddingSchedule을 참조하는 것을 방지)</span>
    <span class="nd">@OneToMany</span><span class="o">(</span><span class="n">mappedBy</span> <span class="o">=</span> <span class="s">"user"</span><span class="o">,</span> <span class="n">cascade</span> <span class="o">=</span> <span class="nc">CascadeType</span><span class="o">.</span><span class="na">ALL</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">PersonalSchedule</span><span class="o">&gt;</span> <span class="n">clearedSchedule</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

    <span class="nd">@Column</span>
    <span class="kd">private</span> <span class="nc">Sex</span> <span class="n">sex</span><span class="o">;</span>
    
    <span class="nd">@Column</span>
    <span class="kd">private</span> <span class="nc">UserType</span> <span class="n">userType</span><span class="o">;</span>
<span class="o">}</span>

</code></pre></div></div>

<p>뭐 이런 식으로, User가 어떤 일정을 가지고 있을 때, DB 스키마에 따라 정규화를 하거나 혹은 서비스의 로직에 따라 일정, 즉 스케쥴이 세분화된 타입이 있을 수가 있다.</p>

<p>예를 들어 회사 스케쥴, 즉 CompanySchedule 이 있을 수가 있고, 또 PersonalSchedule 이 있을 수도 있고, 더 세분화된 일정이라면 WeddingSchedule 이 있을 수도 있다.</p>

<p>이런 상황에서, User가 이미 완료한 일정을 가지고 있을 때, 이런 식으로 다형성을 이용할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">// 생략</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Schedule</span><span class="o">&gt;</span> <span class="n">clearedSchedule</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

</code></pre></div></div>

<p>그리고 Schedule 클래스를 상속받은 클래스들을 생성하고, 이런 식으로 다형성을 이용할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nd">@Getter</span> <span class="nd">@Setter</span>
<span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"schedule"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Schedule</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">LocalDate</span> <span class="n">startDate</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">LocalDate</span> <span class="n">endDate</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"place_id"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Place</span> <span class="n">place</span><span class="o">;</span> <span class="c1">// 실제 타입은 구글 맵 API 또는 네이버 맵 API를 사용해야 함. 아직 잘 몰름..</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">memo</span><span class="o">;</span>

    <span class="c1">// 생략</span>

    <span class="nd">@ManyToOne</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"user_id"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">User</span> <span class="n">user</span><span class="o">;</span>

<span class="o">}</span>


</code></pre></div></div>
<p>그리고 각각의 스케쥴 타입을 상속받은 클래스들을 생성하면</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nd">@Getter</span> <span class="nd">@Setter</span>
<span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"company_schedule"</span><span class="o">)</span>
<span class="nd">@Inheritance</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">InheritanceType</span><span class="o">.</span><span class="na">JOINED</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CompanySchedule</span> <span class="kd">extends</span> <span class="nc">Schedule</span> <span class="o">{</span>

    <span class="nd">@Column</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">companyName</span><span class="o">;</span>

    <span class="nd">@Column</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">companyAddress</span><span class="o">;</span>

    <span class="nd">@Column</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">companyPhone</span><span class="o">;</span>

    <span class="c1">// 생략</span>
<span class="o">}</span>

<span class="nd">@Getter</span> <span class="nd">@Setter</span>
<span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"personal_schedule"</span><span class="o">)</span>
<span class="nd">@Inheritance</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">InheritanceType</span><span class="o">.</span><span class="na">JOINED</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PersonalSchedule</span> <span class="kd">extends</span> <span class="nc">Schedule</span> <span class="o">{</span>

    <span class="nd">@Column</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">phone</span><span class="o">;</span>

    <span class="c1">// 생략</span>
<span class="o">}</span>

<span class="o">....</span>

</code></pre></div></div>

<p>이렇게 되면, User 엔티티는 이런 식으로 다형성을 이용할 수 있게 된다.
이런 경우에 JPA는 다음과 같이 DB에 저장하는데</p>

<p><img src="/img/posts/JAVA/jpa/2.png" width="80%" /></p>

<p>Schedule 테이블의 id를 외래키로 가지고 있어서, 스케쥴의 공통적인 속성은 스케쥴에 저장되고, 각각의 스케쥴 타입의 고유한 속성은 각각의 스케쥴 타입에 저장된다.</p>

<p>그렇다고 해서 Schedule을 생성하고, CompanySchedule을 생성해서 저장하는 것이 아니라,</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Schedule</span> <span class="n">scadule</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Schedule</span><span class="o">();</span> 
<span class="n">scadule</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"스케쥴 이름"</span><span class="o">);</span>
<span class="c1">// 이런식으로 스케쥴의 공통적인 속성을 설정하고 회사 스케쥴에 지정하는 것</span>
<span class="nc">CompanySchedule</span> <span class="n">companySchedule</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CompanySchedule</span><span class="o">()</span>
<span class="n">companySchedule</span><span class="o">.</span><span class="na">setSchedule</span><span class="o">(</span><span class="n">schedule</span><span class="o">);</span>

</code></pre></div></div>

<p>이런 식으로 생성하는 것이 아니라,</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nc">CompanySchedule</span> <span class="n">companySchedule</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CompanySchedule</span><span class="o">();</span>

<span class="c1">// Schedule 테이블에 저장되는 것</span>
<span class="n">companySchedule</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"회사 스케쥴 이름"</span><span class="o">);</span>
<span class="n">companySchedule</span><span class="o">.</span><span class="na">setStartDate</span><span class="o">(</span><span class="nc">LocalDate</span><span class="o">.</span><span class="na">now</span><span class="o">());</span>
<span class="n">companySchedule</span><span class="o">.</span><span class="na">setEndDate</span><span class="o">(</span><span class="nc">LocalDate</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">plusDays</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>

<span class="c1">// CompanySchedule 테이블에 저장되는 것</span>
<span class="n">companySchedule</span><span class="o">.</span><span class="na">setCompanyName</span><span class="o">(</span><span class="s">"회사 이름"</span><span class="o">);</span>
<span class="n">companySchedule</span><span class="o">.</span><span class="na">setCompanyAddress</span><span class="o">(</span><span class="s">"회사 주소"</span><span class="o">);</span>
<span class="n">companySchedule</span><span class="o">.</span><span class="na">setCompanyPhone</span><span class="o">(</span><span class="s">"회사 전화번호"</span><span class="o">);</span>

</code></pre></div></div>

<p>이런 식으로 생성이 된다는 것이다. CompanyShedule은 Schedule을 상속받았기 때문에, Schedule의 속성을 가지고 있고, 또 CompanySchedule의 고유한 속성도 가지고 있는 것이다.</p>

<h4 id="21-상속-전략">2.1 상속 전략</h4>

<p>위에서 보여드린 예시는 JOINED 전략을 사용한 것이다. 
대부분 JPA에서 상속을 사용할 때 JOINED 전략을 사용하는데 그 이유는 <strong>정규화</strong>를 통해 데이터를 중복 저장하지 않기 위해서이다.</p>

<p>JOINED 전략은 부모 클래스와 자식 클래스를 모두 테이블로 생성하고, 자식 클래스의 고유한 속성을 저장하는 것이다.</p>

<p>JOINED 전략이 아닌 다른 전략을 사용하는 경우에는 정규화가 제대로 이루어지지 않는데, 예를 들어서 <strong>TABLE_PER_CLASS</strong> 전략과 <strong>SINGLE_TABLE</strong> 전략을 사용하는 경우를 한 번 보자.</p>

<p>이 경우는 SINGLE_TABLE 전략을 사용하는 경우이다.</p>

<p><img src="/img/posts/JAVA/jpa/3.png" width="80%" /></p>

<p>이 경우는 TABLE_PER_CLASS 전략을 사용하는 경우이다.</p>

<p><img src="/img/posts/JAVA/jpa/4.png" width="80%" /></p>

<p>SINGLE_TABLE 전략은 이렇듯 모든 자식 클래스의 속성을 하나의 테이블에 저장하는 것이고, TABLE_PER_CLASS 전략은 각각의 자식 클래스를 하나의 테이블로 생성하는 것이다.</p>

<p>간단히 예시를 들자면 <strong>회사 이름</strong>이라는 속성이 변경되는 경우를 생각해 볼 때(물론 그럴 일이 쉽사리 일어난다는 말은 아니다)</p>

<p>JOINED 전략을 사용하는 경우에는 회사 이름이 변경되면 CompanySchedule 테이블에 저장된 회사 테이블 하나만 변경될 테니 문제가 되지 않지만,
SINGLE_TABLE 전략을 사용하는 경우에는 회사 이름이 변경되면 모든 테이블에 저장된 회사 이름이 변경되는 것이고, TABLE_PER_CLASS 전략을 사용하는 경우에도 회사 이름이 변경되면 모든 테이블에 저장된 회사 이름이 변경될 것이고, 정규화가 제대로 이루어지지 않아 수천건의 쿼리가 나가게 될 것이다.</p>

<p>그렇기는 해도 SINGLE_TABLE 전략은 사용하는 경우가 있는데, JOIN이 발생하지 않기 때문에 성능이 좋다는 장점이 있고, 테이블이 가장 적어 관리가 편하다는 장점이 있다.</p>

<p>그러나 이런 전략들은 정규화가 제대로 이루어지지 않기 때문에 데이터를 중복 저장하게 되는 문제가 있다는 점은 명심해야 한다.</p>

<h5 id="joined-전략">JOINED 전략</h5>
<ul>
  <li>부모 클래스와 자식 클래스를 각각 테이블로 생성.</li>
  <li>자식 클래스의 고유한 속성은 자식 테이블에 저장.</li>
  <li>데이터 중복을 피하고 정규화를 유지.</li>
</ul>

<h5 id="single_table-전략">SINGLE_TABLE 전략</h5>
<ul>
  <li>모든 자식 클래스의 속성을 하나의 테이블에 저장.</li>
  <li>JOIN이 발생하지 않아 성능이 좋고, 테이블 수가 적어 관리가 편리.</li>
  <li>정규화 위반 및 데이터 중복 발생.</li>
</ul>

<h5 id="table_per_class-전략">TABLE_PER_CLASS 전략</h5>
<ul>
  <li>각 자식 클래스를 별도의 테이블로 생성.</li>
  <li>정규화 위반 및 데이터 중복 발생.</li>
</ul>

<h3 id="3-그러면-인터페이스-구현은-안-돼">3. 그러면 인터페이스 구현은 안 돼?</h3>

<p><strong>안된다.</strong> JPA에서 인터페이스를 구현하는 것은 불가능하다. <strong>JPA에서 상속 메커니즘은 반드시 클래스를 상속받아야 한다.</strong></p>

<p>이유는 여러가지가 있는데,</p>

<ol>
  <li>인터페이스는 구현체가 없기 때문에 상속을 할 수 없다.</li>
  <li>인터페이스는 필드가 없기 때문에 인터페이스를 엔티티로 매핑할 수는 없다.</li>
  <li>인터페이스는 추상 메서드만 가지고 있기 때문에 구현체가 없다.</li>
</ol>

<h3 id="4-추상-클래스는-돼">4. 추상 클래스는 돼?</h3>

<p><strong>된다.</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nd">@MappedSuperclass</span>
<span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">BaseEntity</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">LocalDate</span> <span class="n">createdDate</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">LocalDate</span> <span class="n">modifiedDate</span><span class="o">;</span>

    <span class="c1">// 공통 메서드</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateTimestamps</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">modifiedDate</span> <span class="o">=</span> <span class="nc">LocalDate</span><span class="o">.</span><span class="na">now</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="kd">extends</span> <span class="nc">BaseEntity</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">username</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
    <span class="c1">// 기타 속성 및 메서드</span>
<span class="o">}</span>

<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Product</span> <span class="kd">extends</span> <span class="nc">BaseEntity</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">BigDecimal</span> <span class="n">price</span><span class="o">;</span>
    <span class="c1">// 기타 속성 및 메서드</span>
<span class="o">}</span>

</code></pre></div></div>

<p>이렇게 추상 클래스를 상속받으면, 하위 클래스에서 추상 클래스의 필드를 사용할 수 있다.</p>

<p>하지만 추상 클래스는 일반 클래스와의 상속과는 다르게, 상속 전략 설정이 불가능하고(JOINED, SINGLE_TABLE, TABLE_PER_CLASS) 그 대신 @MappedSuperclass 어노테이션을 사용해야 한다.</p>

<p>@MappedSuperclass는 테이블과 매핑되지 않는다는 것이고, 즉 실제 DBMS에 테이블이 생성되지 않는다.</p>

<h3 id="5-정리">5. 정리</h3>

<p>JPA의 상속 전략을 잘 이해하고 활용하는 것은 객체지향 설계를 DB에 잘 반영하기 위해 매우 중요하다. 다음은 JPA 상속 전략의 핵심 내용이다:</p>

<ol>
  <li><strong>JOINED 전략</strong>
    <ul>
      <li>부모 클래스와 자식 클래스를 각각의 테이블로 만든다.</li>
      <li>데이터 정규화를 유지하고, 상속 구조를 명확하게 표현할 수 있다.</li>
      <li>일반적으로 가장 많이 사용되는 전략이다.</li>
    </ul>
  </li>
  <li><strong>SINGLE_TABLE 전략</strong>
    <ul>
      <li>모든 자식 클래스의 속성을 하나의 테이블에 저장한다.</li>
      <li>JOIN이 없어서 성능이 좋고, 테이블 수가 적어 관리하기 편하다.</li>
      <li>하지만 데이터 중복의 위험이 있다.</li>
    </ul>
  </li>
  <li><strong>TABLE_PER_CLASS 전략</strong>
    <ul>
      <li>각 자식 클래스를 별도의 테이블로 만든다.</li>
      <li>데이터가 중복될 수 있고, 정규화가 제대로 안 될 수 있다.</li>
    </ul>
  </li>
  <li><strong>추상 클래스 사용</strong>
    <ul>
      <li>JPA에서는 인터페이스를 상속받을 수는 없지만, 추상 클래스로 공통 필드와 메서드를 상속받아 쓸 수 있다.</li>
      <li><code class="language-plaintext highlighter-rouge">@MappedSuperclass</code> 어노테이션으로 추상 클래스의 필드를 하위 엔티티에서 쓸 수 있다.</li>
      <li>추상 클래스는 테이블과 매핑되지 않고, 실제 DBMS에 테이블이 생성되지 않는다.</li>
    </ul>
  </li>
</ol>

<p>JPA의 상속 기능을 잘 활용하면 더 유연하고 유지보수하기 쉬운 애플리케이션을 만들 수 있다. 각 전략의 장단점을 잘 따져보고 애플리케이션에 맞는 적절한 전략을 선택하는 게 중요하다.</p>]]></content><author><name>ash tensor</name></author><category term="WEB" /><category term="JAVA" /><summary type="html"><![CDATA[[WEB][JAVA] JPA 상속 및 심화]]></summary></entry><entry><title type="html">[후기] 이카운트 코딩 테스트 및 인터뷰 리뷰</title><link href="http://localhost:4000/web/%EB%A6%AC%EB%B7%B0/2024/12/11/ecount-interview.html" rel="alternate" type="text/html" title="[후기] 이카운트 코딩 테스트 및 인터뷰 리뷰" /><published>2024-12-11T00:00:00+09:00</published><updated>2024-12-11T00:00:00+09:00</updated><id>http://localhost:4000/web/%EB%A6%AC%EB%B7%B0/2024/12/11/ecount-interview</id><content type="html" xml:base="http://localhost:4000/web/%EB%A6%AC%EB%B7%B0/2024/12/11/ecount-interview.html"><![CDATA[<h2 id="후기-이카운트-코딩-테스트-및-인터뷰-리뷰">[후기] 이카운트 코딩 테스트 및 인터뷰 리뷰</h2>

<h3 id="1-서론">1. 서론</h3>

<p><img src="/img/posts/interview/1.png" width="80%" /></p>

<p>항상 업로드를 꾸준히 해야겠다고 생각하지만, 마음에만 그치고 꾸준히 하지 못하는 것 같다.
근데 어쩔 수 없는게, 좀 새로운 내용을 적고 싶은데, 이미 다른 사람이 올린 내용의 변주밖에는 안되니까 안적는 것도 많기는 하다.
아무튼.
음 일단 코딩 테스트 후기부터 적는게 좋을 것 같다. 사실 코딩 테스트는 일주일, 그러니까 12월 2일, 화요일날 있었는데</p>

<p><img src="/img/posts/interview/2.png" width="80%" /></p>

<p>총 세 문제로 이루어져 있었고, 코딩 테스트 플랫폼은 구름이었다.</p>

<h3 id="2-코딩-테스트">2. 코딩 테스트</h3>

<p>일단 사실 코딩 테스트를 처음 받아봤을 때, 어렵다는 느낌은 받지 못했다. 
오히려 쉽다는 인상을 좀 받았는데, 일단 기본적으로 내가 예상했던 코딩 테스트 문제는 일단 자료구조 문제 하나와 그래프 순회 문제(BFS, DFS)와 같은 문제, 그리고 어렵게 나오면 
동적 계획법 같은 문제가 나오지 않을까? 싶었는데, 그래프 순회 문제가 하나도 안 나왔다는 점에서 좀 특이했다고 느꼈다. 그러니까 그만큼, <strong>올바른 자료구조</strong>를 사용하는게 너무 중요한 코테였다.</p>

<p>1번 문제는 문자열 치환 문제? 였는데 백준에서 비슷한 문제를 찾아보지는 않았지만 암호문을 주어지고, 대응되는 해독 규칙이 주어진 뒤, 암호문을 평문으로 해독하는 문제였다.
하지만 해독 규칙이 무한 루프에 빠질 수 있기 때문에 무한 루프에 빠지는 경우를 잘 처리해야 하는 문제였고</p>

<p>2번 문제는 자료구조 문제였다. 아 여기서 내가 실수를 하지 않았나 싶은데, 일단 문제는 산의 높이가 주어지고(ex: 9, 10, 3, 10, 9) 각 산에 다리를 놓는 문제인데 다리를 놓기 위해서는 각 산의 높이가 동일해야만 하고, 산 사이에 해당 산 보다 더 높은 산이 존재해서는 안 되는 문제였다.</p>

<p>아 이건 내가 면접에 들어가서야 내가 잘못 풀이했다고 느꼈는데, 나는 각 산의 높이를 해시 맵에 넣고, 이런 식으로 풀었는데, 다른 사람이 대답하는 것을 들어보니 스택 문제이지 않았나, 그런 생각이 그제서야 들었다.</p>

<p>3번 문제는 시간이 오래 걸리는 구현 문제였다. 로그 파일이 주어지고, 해당 로그 파일을 특수한 규칙을 가지고 정렬하는 문제였다. 나는 처음에 1번 2번 문제에 집중하다가 3번 문제를 제대로 못풀었는데, 아쉽긴 했다.</p>

<p><img src="/img/posts/interview/3.png" width="80%" /></p>

<h3 id="3-기술면접">3. 기술면접</h3>

<p>면접은 5명이 1조를 이뤄서 진행되었는데, 면접 전 대기시간에 간단한 문제를 풀이하고(종이에) 면접을 들어갔다.</p>

<p>면접은 두 차례로 진행되었는데 기술면접과 이력서 기반 면접 이렇게 두 번으로 진행되었다.</p>

<p>일단 기술면접에서 해당 코딩테스트 코드를 가지고 물어보는 것이 많았는데, 문제가 모두 자료구조 문제였던 만큼 막 무척이나 어려웠던 문제는 아니었지만 자료구조를 잘 사용했어야만 하고, 개발자 면접관 두 분이서 해당 자료구조를 잘 이해했는지, 잘 사용했는지 계속 물어봤다는 인상이 들었다.</p>

<p>일단 첫번째 문자열 치환 문제에서는 해시 셋을 사용해서 이미 도달했던 노드인지를 체크했어야 하는데, 다른 지원자 분들이 그냥 리스트를 사용했다고 했나? 아무튼 그래서 혹시 다르게 풀이한 사람이 있는지 지원자들에게 물어보고 보통은 이렇게 해시 셋, 집합을 이용해서 풀이하는 것이 맞다고 설명하거나, 하는 식의 질문이 주를 이뤘다.</p>

<p>구름IDE에서 코딩 테스트를 진행했던 만큼, 자신의 코드를 제대로 기억하지 못한 경우도 있었을 텐데 그러지 않게 조심해야 했고</p>

<p>음, 그 이후에는 특정 상황을 제시하고 그 상황에서 어떤 문제가 발생할 수 있는지 물어봤는데 동시성 제어? 관련 질문이었던 것 같다.</p>

<p>특정 서버에 접속하는 클라이언트가 있고, 그 서버에 접속하는 클라이언트가 너무 많이 몰려서 서버가 뻗어버리는 상황이 발생했다고 가정하고, 이런 상황에서 어떻게 해결할 수 있는지 물어봤다.
여기서 내가 카프카가지고 헛소리 좀 하다가 그게 안되면 라운드 로빈 등의 방식으로 클라이언트의 요청을 시간적으로 분산시켜야 한다고 대답했는데 이 대답이 조금 후회되기는 한다.</p>

<p>그래서 카프카의 구조를 알려달라는 질문에 내가 예전에 했던 프로젝트에서 4개의 EC2 인스턴스 어쩌구저쩌구 하다가 허무하게 끝났던 것 같다. 아마도 내 생각에는 이런 메시지 큐 같은 대답이 아니라 시간적 분산 등에 초점을 맞춰서 대답했어야 하지 않을까, 싶은 생각이 들기는 했다. 면접관의 반응도 그렇고, 내 옆의 분도 카프카 가지고 대답하다가 조금 핀트가 어긋났다는 대답을 들은 걸 보면…</p>

<p>사실 이런 기술 면접에서 Node.js나 프레임워크 등의 질문이 나올 거라고 생각해서 호이스팅과 같은 ㅋㅋ Node.js 백엔드 개발자 관련 질문을 좀 준비해 갔는데 다른 질문이 나와서 조금 당황하기는 했다.</p>

<h3 id="4-전반적인-면접-후기">4. 전반적인 면접 후기</h3>

<p>그리고 이후에는 인성면접? 이력서 기반 면접을 진행했는데, 1분 자기소개나 지원 동기 등을 물어보지 않을까 생각했는데 그런 질문은 없었다. 
그럴 수 밖에는 없었던 게, 음 일단 5명? 4명이 1조로 이뤄서 약 30분 정도 면접을 진행했는데
일단 요구했던 대답이 전부 <strong>“두문장 세문장 정도로 대답해 달라”</strong> 였다. 그러니까 대답할 시간을 많이 주지 않았고, 산술적으로 계산해 본다고 해도 한사람당 대략 6분에서 7분 정도 면접을 진행하는? 그런 식의 면접이었다.
면접결과는 바로 다음 날 오전에 나온다.</p>

<p>면접 경쟁률은 약 6대 1정도라고 들었다.
물론 면접이 나쁜 경험은 아니었다. 그리고 내가 부족했다는 점도 절대적으로 인정한다!! 뭔가 알더라도 제대로 알아야겠다는 생각도 들었고, 면접비 3만원 주신 것도 뭐 나쁘지 않았다.
그래도 1분 자기소개랑 지원동기, 예상 질문에 대한 대답 같은것도 열심히 외워갔는데 아예 물어보지도 않으니ㅠㅠ 좀 서운하긴 했다. 뭐 물어보셨어도 떨어지긴 했겠지만, 아쉬운 면접이었다. 내가 너무 못하더라…</p>

<p>면접비 받은 걸로 커피나 마셔야겠다.</p>

<p><img src="/img/posts/interview/4.png" width="80%" /></p>

<p>한잔해~</p>]]></content><author><name>ash tensor</name></author><category term="WEB" /><category term="리뷰" /><summary type="html"><![CDATA[[후기] 이카운트 코딩 테스트 및 인터뷰 리뷰]]></summary></entry><entry><title type="html">[후기] 웹 개발자의 Cursor AI 사용기</title><link href="http://localhost:4000/web/%EB%A6%AC%EB%B7%B0/2024/11/02/cursor-ai-review.html" rel="alternate" type="text/html" title="[후기] 웹 개발자의 Cursor AI 사용기" /><published>2024-11-02T00:00:00+09:00</published><updated>2024-11-02T00:00:00+09:00</updated><id>http://localhost:4000/web/%EB%A6%AC%EB%B7%B0/2024/11/02/cursor-ai-review</id><content type="html" xml:base="http://localhost:4000/web/%EB%A6%AC%EB%B7%B0/2024/11/02/cursor-ai-review.html"><![CDATA[<h2 id="후기-웹-개발자의-cursor-ai-사용기">[후기] 웹 개발자의 Cursor AI 사용기</h2>

<h3 id="1-서론">1. 서론</h3>

<p><img src="/img/posts/cursor/copilot1.png" width="80%" /></p>

<p>원래 내 개발환경은 Intelij에서 github copilot을 추가해서 사용하고 있었는데 처음에는 무척이나 편리하다고 느꼈다. 
그런데 시간이 지나면서 코파일럿이 뭐랄까, 거슬리는 점이 많아지기 시작했다.</p>

<p>첫번째로 맥락 부분에서 이야기하자면 코파일럿은 맥락을 파악하기 보다는 그냥 내 코드 베이스나 해당 코드 파일에서 이미 존재하는 코드를 단순 참고, 및 붙여넣기 하는 정도의 수준이었다.</p>

<p>코파일럿을 사용하면서 느꼈던 가장 큰 문제가 되는 점은, <strong>Copliot이 오류가 발생하는 코드를 작성한다는 점이다.</strong> 
그러니까 맥락성이 너무 강한 나머지, 무분별한 복사 및 붙여넣기로 오히려 오류가 발생하는 코드를 자동완성하는 경우가 너무 많았다. 
예를 들어서, 해당 클래스에는 .isFalse() 메소드가 없는데 이를 자동완성해 버리는 경우같은 게 그렇다. 또 <strong>내 코드를 참고해서 그냥 복사 붙여넣기 하는 수준의 자동완성을 제공하는 경우도 많았다. 예를 들어서, 내가 해당 코드 파일에 testToken 이라는 변수를 사용했다고 치자, 내가 다시 testToken을 치면 맥락을 단순히 내가 썼던 코드로 자동완성 해 버린다.</strong></p>

<p>또 이 문제도 좀 치명적인 문제였는데, 추천해주는 코드가 Depricated된 코드인 경우가 너무 많았다. 이 부분은 코파일럿이 GPT, 언어모델을 사용하기 때문에 발생하는 문제라고 느껴지지만 그래도 짜증나는건 마찬가지다.</p>

<p>두번째 큰 문제점은, <strong>Copilot Chat이 너무 성능이 떨어져서 쓰기가 불편했다는 점이다. 진짜 너무 쓸모없고 오히려 사용에 있어서 개발 시간을 줄여주는 도구가 아니라 여기서 대답을 못찾아서 시간 낭비를 하고 더 많은 시간을 써야하는 경우가 너무 많았다.</strong></p>

<p>지금 gpt 4o는 물론이고, 클로드 및 라이트형 모델들 중에서도 오히려 더 좋은 성능을 보여주는 모델이 수없이 많은데 코파일럿이 이런 성능을 보여주는게 너무 아쉬웠다. 아무리 자세히 대답을 요구해도 대답이 너무 간략하고, 완전히 헛소리를 하는 경우도 많았고, 한글로 질문했는데 계속 이악물고 영어로 대답하는 경우가 많았다.</p>

<p>이해는 한다. 왜냐하면 코파일럿의 시스템 메시지가 영어로 되어 있을테니까. 그래도 계속 한글로 대답을 하라고 채팅을 치는것도 너무 짜증나는 부분이다.</p>

<p>코파일럿이 gpt-4를 사용한다고 하는데 왜 이런 성능을 보여주는지 잘 모르겠다.</p>

<p>물론 코파일럿이 없는 것보다는 있는게 개발 속도가 훨씬 빨라서 좋기는 하지만, 10$를 내고 사용하는데
그냥 참고용으로만 쓰는 것도 아깝고, 너무, 너무 성능이 떨어져서 쓰기가 불편했다.</p>

<p>그러던 참에 Cursor AI를 알게 되었고, 이 때문에 코파일럿 대신 Cursor AI를 사용해 보았다.</p>

<h3 id="2-cursor-ai">2. Cursor AI</h3>

<h4 id="장점">장점</h4>

<p><img src="/img/posts/cursor/cursor.jpeg" width="80%" /></p>

<p>장점은 아무래도 일단 <strong>성능</strong>이다.</p>

<p>Cursor AI는 코파일럿과 비교했을 때 코드 자동완성과 챗봇 기능 모두에서 훨씬 더 뛰어난 성능을 보여주고 있다. 특히 맥락 파악 능력이 뛰어나서, 기존 코드베이스의 맥락을 정확하게 이해하고 이에 맞는 제안을 해준다는 점이 인상적이다.</p>

<p>예를 들어, JWT 토큰 발급 코드를 작성할 때의 경우를 보자. 코파일럿은 내가 이미 ‘TokenProvider’라는 클래스명을 사용하고 있음에도 불구하고, 일반적으로 많이 사용되는 ‘JwtTokenProvider’와 같은 이름을 무분별하게 제안하곤 했다. 반면 Cursor AI는 기존 코드의 네이밍 패턴을 정확히 파악하고 일관성 있는 제안을 해준다.</p>

<p>최신 언어 모델을 사용해서인지 코파일럿보다 훨씬 더 정확한 코드 자동완성을 제공해주기 때문에 단순히 이미 존재하는 코드들을 복사 붙여넣기 하는 코파일럿 수준의 컴플리션보다도 훨신 더 나은 성능을 보여준다.</p>

<p>또한 Cursor AI의 대화형 챗 모드는 코파일럿과 비교했을 때 응답의 정확도와 상세함이 월등히 뛰어나다. 개발 과정에서 발생하는 질문에 대해 더 구체적이고 실용적인 답변을 제공하며, 코드 예시도 현재 프로젝트의 맥락에 맞게 제시해준다.</p>

<p><img src="/img/posts/cursor/2.png" width="80%" /></p>

<p>사진에서 볼 수 있듯, 원하는 용도에 맞게 언어 모델을 선택할 수 있는것도 꽤 장점이다. 평상시에는 4o로 작동하다가도 어려운 문제에 대해서는 o1 mini로 선택해서 더 정확한 답변을 요청할 수도 있다.</p>

<p>그리고 챗 모드에서 ctrl + l을 눌러서 선택한 코드를 바로 챗 모드의 맥락으로 사용할 수 있는것도 편리할 뿐만 아니라 언어 모델이 개선한 코드를 apply 버튼을 눌러 바로 적용할 수 있는것도 매우 편리하다.</p>

<p><img src="/img/posts/cursor/1.png" width="80%" /></p>

<p>이런 식으로 마치 git conflict 해결 과정처럼 어떤 코드를 적용할건지 선택하는 식으로 작동하는데, 해당 사진은 ctrl + k를 눌러서 채팅 모드가 아니라 언어 모델에 디렉션을 주고 편집기 내에서 코드 개선을 시도하는 기능도 주석을 작성할 때 특히 유용했다.</p>

<p><img src="/img/posts/cursor/3.png" width="80%" /></p>

<p>javadoc 주석을 작성하는 데 있어서도 마찬가지로 코파일럿보다 훨씬 더 정확하게 주석을 작성해주는 것을 볼 수 있다.</p>

<h4 id="cursor-ai-composer">Cursor AI Composer</h4>

<p>(2024-12-11 추가)</p>

<p>커서 이야기를 하면서 컴포저를 이야기 하지 않을 수가 없다. 왜 커서에서 컴포저가 킬러 기능이라고 하는지 좀 알겠다.
그렇다고 해도 다른 리뷰들에서 호들갑 떨 만큼 차원이 다른 기능이냐라고 한다면, 꼭 그런가? 싶긴 하다. 내가 원래 이렇게 모든지 호들갑 떠는걸 썩 좋아하지는 않기 때문일지도 모른다.</p>

<p>아무튼. 컴포저는 챗 모드와는 다르게 <strong>실제 파일을 대규모로 생성해주고, 편집해주는 기능</strong>이다.</p>

<p>예를 들어 볼까? 일단 리액트 프로젝트에서 이미 작은 버튼 컴포넌트가 존재하는데, 이와 비슷하지만 그냥 크기가 큰 버튼을 만들어 주고 싶다고 하자.</p>

<p><img src="/img/posts/cursor/6.png" width="80%" /></p>

<p>그럼 이런식으로 요청하면 컴포저가 실제로 파일을 생성해가며, 그리고 해당 파일을 이용하기 위해 다른 파일을 수정해야 한다면, <strong>다른 파일까지 수정해가며</strong> 컴포저가 자동으로 파일을 생성해주고 수정해주는 것을 볼 수 있다.</p>

<p><img src="/img/posts/cursor/7.png" width="80%" /></p>

<p>이런식으로 컴포저가 자동으로 파일을 생성해주고 수정해주는 것을 볼 수 있다. 해당 버튼을 위한 css 파일도 생성하고, 필요하다면 다른 컴포넌트까지 수정해주는 것을 볼 수 있다.</p>

<p>컴포저의 장점은 일단 파일을 대규모로 생성하고 수정해 준다는 점이다. 이 점이 컴포저의 가장 큰 장점이라고 생각한다. 사실 챗 모드와 딱히 엄청 다른 건 없기는 하다.
이렇게 말하면 뭔소리지? 싶긴 하겠지만, 컴포저를 이용한다고 해도, <strong>결국 GPT 엔진 성능 이상의 결과를 얻는건 불가능하다.</strong></p>

<p>그러니까 GPT가 못 만들어 주는건 컴포저라고 만들 수 있는 건 아니라는 말이다. 물론 내가 우물안 개구리라 커서의 더 많은 성능을 끌어 올리지 못하는 것일 수도 있지만, 
결국에는 프레임워크의, 프로젝트의 구성을 제대로 알고 있는 개발자가 컴포저가 생성한 코드를 정리해주고 수정해주는 것이 필요하다.</p>

<p>그런데 그럼에도, 컴포저는 챗 모드보다 훨씬 더 빠르게 코드를 생성해주고 수정하는데 도움을 주는 건 사실이다.
나는 컴포저를 어떻게 이용하냐면, 일단 컴포저를 이용해서 코드의 뼈대를 잡고, 그걸 수정하는 식으로 이용하고 있다.</p>

<h4 id="단점">단점</h4>

<p><img src="/img/posts/cursor/4.png" width="80%" /></p>

<p>일단 단점으로는 비용이다. 코파일럿은 학생이면 무료, 아니면 10$를 내고 사용할 수 있는데, 커서는 월 20$, 한화 약 3만원을 내고 사용해야 한다.</p>

<p>솔직히 조금 비싸다고 느껴지긴 했는데, 챗 GPT 구독료도 이정도 한다는 걸 생각하면 그럭저럭 납득이 되긴 한다.</p>

<p>그리고 또 내가 느끼는 개인적인 단점으로는, 베이스가 VSCODE라는 점이다. 일단 커서를 이용하기 전에는 Intelij에 코파일럿 애드온을 설치해서 사용하고 있었는데, 인텔리제이에 익숙해져서 그럴 수도 있지만 VSCODE는 인텔리제이에 비해 좀 더 불편한 점이 있다.</p>

<p>익스텐션이나 플러그인을 추가해야만 사용할 수 있는 기능들도 많기도 하고, Auto import 기능도 좀 Intelij에 비해 불편한 점이 있다. Intelij는 모든 파일을 인덱싱해두기 때문에 빠르게 오류를 잡아주거나, 자동 import를 해주는데 비해서 커서는 그런 점에 있어서는 조금 떨어진다.</p>

<p>IDE의 기본기는 아무래도 Intelij가 훨신 좋은 편이다.</p>

<p>내가 커서를 사용하면서 겪은 문제점으로는 vscode의 문제점이기도 했는데, 예를 들어서 <strong>내가 해당 패키지를 import 했음에도 불구하고 java에서 해당 패키지를 resolve 하지 못했다고 헛소리하는 이슈</strong>가 몇 번 발생하기도 했다. 아무리 Clean Build를 하고, 빌드가 제대로 수행됨에도 불구하고 계속 java can not be resolved 에러가 발생해서 너무 짜증났다.</p>

<p>또한 오류가 아닌 것 같은데 계속 오류라고 표시해서 짜증나는 경우도 있었다(이 경우에는 커서를 종료하고 Intelij로 돌아가서 불러오니까 오류가 결국 아니었다).</p>

<p>또 어떤 문제인지 정확히는 모르겠는데, <strong>자동 저장을 켜놨음에도 불구하고 실행할 때 자꾸 예전 코드를 실행해서 문제가 발생하는 경우도 있었다.</strong> 이 경우에도 커서를 껐다가 다시 실행하니까 문제가 해결되긴 했지만 오류가 아니었고, 빌드 및 실행도 문제없이 잘 됐음에도 불구하고 결과가 이상하게 나오니까 필요없는 디버깅만 수없이 발생했다.</p>

<p><img src="/img/posts/cursor/5.png" width="80%" /></p>

<p>이런 경우에 Stack Overflow에 찾아보니까, F1을 눌러서 Java Language Server 작업 공간 디렉토리를 삭제하면 깨끗한 상태로 돌아가는 데 도움이 된다고 하고, 실제로 그 방법을 이용해서 문제를 해결할 수 있었다.</p>

<p>(2024-12-11 추가)</p>

<p>그리고 컴포저의 단점을 설명해 보자면, <strong>앞서 말했듯 대규모로 다른 파일까지 수정한다</strong> 고 했는데, 이 부분은 컴포저가 코드를 생성하고 수정하는 과정에서 문제가 발생할 수 있는 부분이다. 예를 들어 보자면, 나는 앞선 맥락은 유지하면서 새로운 기능을 추가하고 싶은데, 컴포저는 새로운 기능에 맥락을 깊게 맞춰, 앞선 맥락을 무시하는 경우가 종종 있었다.</p>

<p>이런 경우에 발생할 수 있는 문제가, 주 파일은 괜찮지만, 컴포저가 건드린 다른 파일에서 문제가 생기는 경우이다. 나같은 경우에는 메인 파일은 괜찮아서 Accept를 눌렀지만, 컴포저가 건드린 다른 파일에서 문제가 생겨서 되돌리는데 고생을 했던 적이 있다. 깃이 있긴 하지만 한줄 한줄 작성할 때마다 커밋을 올릴 수도 없는 노릇이기도 하고.</p>

<p>아무튼 이런 문제가 있다.</p>

<h3 id="마치며">마치며</h3>

<p>이러한 단점들이 있음에도 불구하고, Cursor AI는 충분히 투자할 가치가 있는 도구라고 생각한다. ChatGPT Plus를 따로 구독하는 것보다 Cursor AI를 사용하는 것이 개발 생산성 향상에 더 도움이 되며, GitHub Copilot과 비교했을 때도 월 10$ 더 비싸지만 훨씬 뛰어난 성능과 기능을 제공한다. 특히 Copilot은 기본적인 코드 자동완성 외에는 제한적인 기능을 제공하는 반면, Cursor AI는 강력한 대화형 AI 기능과 코드 분석 능력을 갖추고 있어 추가 비용을 충분히 정당화한다고 볼 수 있다.</p>

<p>결국 Intelij보다 IDE로써의 불편함은 있긴 해도 pro 버전을 결제해서 사용하고 있다. 
Intelij도 엄청 비싼 도구임을 생각하면(나는 아직 학생 무료 기간이 남아서 무료로 사용하고 있지만) 커서의 20$를 내고 사용하는 것이 낫다고 생각한다.</p>

<p>그리고 나는 Intelij에 익숙해져 있지만, 오히려 vscode에 익숙한 사람이라면 훨신 더 유용한 툴일 것이다.</p>

<p>내가 추가해서 사용하고 있는 플러그인은 Spring Boot, Spring Boot Dashboard, Spring Initializr, Maven Helper, Rainbow Brackets, Auto Import, Extension Pack for Java, Gradle for Java, Korean Language Pack 등이다.</p>

<p>그럼 끝!!</p>]]></content><author><name>ash tensor</name></author><category term="WEB" /><category term="리뷰" /><summary type="html"><![CDATA[[후기] 웹 개발자의 Cursor AI 사용기]]></summary></entry><entry><title type="html">[WEB][Spring] 스프링으로 Chat-GPT 페이지 구현하기 - 2</title><link href="http://localhost:4000/web/java/2024/10/24/spring-gpt-frontend.html" rel="alternate" type="text/html" title="[WEB][Spring] 스프링으로 Chat-GPT 페이지 구현하기 - 2" /><published>2024-10-24T00:00:00+09:00</published><updated>2024-10-24T00:00:00+09:00</updated><id>http://localhost:4000/web/java/2024/10/24/spring-gpt-frontend</id><content type="html" xml:base="http://localhost:4000/web/java/2024/10/24/spring-gpt-frontend.html"><![CDATA[<h2 id="webspring-스프링으로-간단한-chat-gpt-페이지-구현하기---2">[WEB][Spring] 스프링으로 간단한 Chat-GPT 페이지 구현하기 - 2</h2>

<h3 id="1-서론">1. 서론</h3>

<p>이전 포스트에서 백엔드를 구현했으니, 이제 프론트엔드를 구현해 보자. 솔직히 이미 예전에 다 구현하긴 했는데,
이제서야 포스팅하게 되었다.</p>

<p>이전 포스팅은, 백엔드는 <a href="https://ash-tensor.github.io/web/java/2024/09/30/spring-gpt-backend.html">여기</a>에서 확인할 수 있다.
실제 작성한 예제는 <a href="https://github.com/Ash-tensor/simple-gpt-page">여기</a>에서 확인할 수 있다.</p>

<p><img src="/img/posts/spring/gpt/1.png" width="80%" /></p>

<h3 id="2-프론트엔드-구현">2. 프론트엔드 구현</h3>

<h4 id="chattingcontrollerjava">ChattingController.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">com.chatgptspring.controller</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.chatgptspring.service.ChatService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.RequiredArgsConstructor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.ui.Model</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.GetMapping</span><span class="o">;</span>

<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChattingController</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ChatService</span> <span class="n">chatService</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/chatpage"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">modelController</span><span class="o">(</span><span class="nc">Model</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"chats"</span><span class="o">,</span> <span class="n">chatService</span><span class="o">.</span><span class="na">FindAllChats</span><span class="o">());</span>
        <span class="k">return</span> <span class="s">"chatting"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>이름을 너무 못짓긴 했는데, 일단 챗 페이지 자체를 리턴하는 컨트롤러를 작성했다.
비록 리액트를 쓰지 않긴 하지만, 리액트처럼 나머지는 js로 작성한 RestAPI를 이용해서 구현할 것이다.</p>

<h4 id="chattinghtml">Chatting.html</h4>

<p>이 부분은 딱히 중요하지 않다. 중요한 부분은 타임리프 템플릿을 이용해서 챗 목록을 그리는 부분과, 
js를 이용해서 메시지를 추가하는 부분이다.</p>

<p>엄청 긴데, 별 내용은 없고, 사실 에셋은 괜찮아 보이는 부분을 가져온 거라서 중요한 부분은 아니다.
아래 js부분을 보거나 아니면 깃허브에서 예제를 확인하면 더 이해가 쉬울 것이다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>Title<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"/static/css/chatting.css"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> 
  <span class="na">integrity=</span><span class="s">"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"</span> <span class="na">crossorigin=</span><span class="s">"anonymous"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"</span> 
  <span class="na">integrity=</span><span class="s">"sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"</span> <span class="na">crossorigin=</span><span class="s">"anonymous"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/static/js/chatting.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/static/js/message.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex-box"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"sidebar d-flex flex-column flex-shrink-0 p-3 text-bg-dark"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/static"</span> <span class="na">class=</span><span class="s">"d-flex align-items-center mb-3 
        mb-md-0 me-md-auto text-white text-decoration-none"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;svg</span> <span class="na">class=</span><span class="s">"bi pe-none me-2"</span> <span class="na">width=</span><span class="s">"40"</span> <span class="na">height=</span><span class="s">"32"</span><span class="nt">&gt;&lt;use</span> <span class="na">xlink:href=</span><span class="s">"#bootstrap"</span><span class="nt">&gt;&lt;/use&gt;&lt;/svg&gt;</span>
            <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"fs-4"</span><span class="nt">&gt;</span>Sidebar<span class="nt">&lt;/span&gt;</span>
        <span class="nt">&lt;/a&gt;</span>
        <span class="nt">&lt;hr&gt;</span>
        <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"nav nav-pills flex-column mb-auto"</span> <span class="na">id=</span><span class="s">"chatList"</span><span class="nt">&gt;</span>
            <span class="c">&lt;!-- 기존 채팅 목록 표시 --&gt;</span>
            <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"nav-item"</span> <span class="na">th:each=</span><span class="s">"chat : ${chats}"</span> 
            <span class="na">style=</span><span class="s">"padding: 5px"</span> <span class="na">th:onclick=</span><span class="s">"'drawChat(' + ${chat.id} + ')'"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"#"</span> <span class="na">class=</span><span class="s">"nav-link active"</span> <span class="na">th:text=</span><span class="s">"'채팅 ' + ${chat.id}"</span> <span class="na">aria-current=</span><span class="s">"page"</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;svg</span> <span class="na">class=</span><span class="s">"bi pe-none me-2"</span> <span class="na">width=</span><span class="s">"16"</span> <span class="na">height=</span><span class="s">"16"</span><span class="nt">&gt;&lt;use</span> <span class="na">xlink:href=</span><span class="s">"#home"</span><span class="nt">&gt;&lt;/use&gt;&lt;/svg&gt;</span>
                    <span class="nt">&lt;span</span> <span class="na">th:text=</span><span class="s">"'채팅 ' + ${chat.id}"</span><span class="nt">&gt;</span>채팅 ID<span class="nt">&lt;/span&gt;</span>
                <span class="nt">&lt;/a&gt;</span>
            <span class="nt">&lt;/li&gt;</span>
        <span class="nt">&lt;/ul&gt;</span>

        <span class="c">&lt;!-- 새 채팅 생성 폼 --&gt;</span>
        <span class="nt">&lt;form</span> <span class="na">id=</span><span class="s">"createChatForm"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;li&gt;</span>
                <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">class=</span><span class="s">"nav-link text-white"</span> 
                <span class="na">style=</span><span class="s">"background: none; border: none; padding: 0;"</span> <span class="na">onclick=</span><span class="s">"createNewChat()"</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;svg</span> <span class="na">class=</span><span class="s">"bi pe-none me-2"</span> <span class="na">width=</span><span class="s">"16"</span> 
                    <span class="na">height=</span><span class="s">"16"</span><span class="nt">&gt;&lt;use</span> <span class="na">xlink:href=</span><span class="s">"#people-circle"</span><span class="nt">&gt;&lt;/use&gt;&lt;/svg&gt;</span>
                    Create New Chat
                <span class="nt">&lt;/button&gt;</span>
            <span class="nt">&lt;/li&gt;</span>
        <span class="nt">&lt;/form&gt;</span>

        <span class="nt">&lt;/ul&gt;</span>
        <span class="nt">&lt;hr&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"dropdown"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"#"</span> <span class="na">class=</span><span class="s">"d-flex align-items-center text-white text-decoration-none dropdown-toggle"</span>
             <span class="na">data-bs-toggle=</span><span class="s">"dropdown"</span> <span class="na">aria-expanded=</span><span class="s">"false"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"https://github.com/mdo.png"</span> <span class="na">alt=</span><span class="s">""</span> <span class="na">width=</span><span class="s">"32"</span> <span class="na">height=</span><span class="s">"32"</span> <span class="na">class=</span><span class="s">"rounded-circle me-2"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;strong&gt;</span>mdo<span class="nt">&lt;/strong&gt;</span>
            <span class="nt">&lt;/a&gt;</span>
            <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"dropdown-menu dropdown-menu-dark text-small shadow"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">class=</span><span class="s">"dropdown-item"</span> <span class="na">href=</span><span class="s">"#"</span><span class="nt">&gt;</span>New project...<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
                <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">class=</span><span class="s">"dropdown-item"</span> <span class="na">href=</span><span class="s">"#"</span><span class="nt">&gt;</span>Settings<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
                <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">class=</span><span class="s">"dropdown-item"</span> <span class="na">href=</span><span class="s">"#"</span><span class="nt">&gt;</span>Profile<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
                <span class="nt">&lt;li&gt;&lt;hr</span> <span class="na">class=</span><span class="s">"dropdown-divider"</span><span class="nt">&gt;&lt;/li&gt;</span>
                <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">class=</span><span class="s">"dropdown-item"</span> <span class="na">href=</span><span class="s">"#"</span><span class="nt">&gt;</span>Sign out<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
            <span class="nt">&lt;/ul&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>

    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"card"</span> <span class="na">style=</span><span class="s">"height: 100%"</span> <span class="na">id=</span><span class="s">"chat-box"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"title"</span><span class="nt">&gt;</span>Comments<span class="nt">&lt;/span&gt;</span>

        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"comment-box"</span> <span class="na">id=</span><span class="s">"message-box"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"comments"</span> <span class="na">th:each=</span><span class="s">"message: ${chats[0].messages}"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"comment-react"</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;button&gt;</span>
                        <span class="nt">&lt;svg</span> <span class="na">fill=</span><span class="s">"none"</span> <span class="na">viewBox=</span><span class="s">"0 0 24 24"</span> <span class="na">height=</span><span class="s">"16"</span> <span class="na">width=</span><span class="s">"16"</span> <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/svg"</span><span class="nt">&gt;</span>

                            <span class="nt">&lt;path</span> <span class="na">fill=</span><span class="s">"#707277"</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2"</span> <span class="na">stroke=</span><span class="s">"#707277"</span> <span class="na">d=</span><span class="s">"M19.4626 3.
                            99415C16.7809 2.34923 14.4404 3.01211 13.0344 4.06801C12.4578 4.50096 12.1696 4.71743 12 4.
                            71743C11.8304 4.71743 11.5422 4.50096 10.9656 4.06801C9.55962 3.01211 7.21909 2.34923 4.
                            53744 3.99415C1.01807 6.15294 0.221721 13.2749 8.33953 19.2834C9.88572 20.4278 10.6588 21 12
                             21C13.3412 21 14.1143 20.4278 15.6605 19.2834C23.7783 13.2749 22.9819 6.15294 19.4626 3.
                             99415Z"</span><span class="nt">&gt;&lt;/path&gt;</span>
                        <span class="nt">&lt;/svg&gt;</span>
                    <span class="nt">&lt;/button&gt;</span>
                    <span class="nt">&lt;hr&gt;</span>
                    <span class="nt">&lt;span&gt;</span>14<span class="nt">&lt;/span&gt;</span>
                <span class="nt">&lt;/div&gt;</span>
                <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"comment-container"</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;div</span> <span class="na">th:classappend=</span><span class="s">"${message.role=='user'} ? 'user' : 'gpt'"</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"user-pic"</span><span class="nt">&gt;</span>
                            <span class="nt">&lt;svg</span> <span class="na">fill=</span><span class="s">"none"</span> <span class="na">viewBox=</span><span class="s">"0 0 24 24"</span> <span class="na">height=</span><span class="s">"20"</span> <span class="na">width=</span><span class="s">"20"</span> <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/
                            svg"</span><span class="nt">&gt;</span>
                                <span class="nt">&lt;path</span> <span class="na">stroke-linejoin=</span><span class="s">"round"</span> <span class="na">fill=</span><span class="s">"#707277"</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2"</span>
                                 <span class="na">stroke=</span><span class="s">"#707277"</span> <span class="na">d=</span><span class="s">"M6.57757 15.4816C5.1628 16.324 1.45336 18.0441 3.71266 20.1966C4.
                                 81631 21.248 6.04549 22 7.59087 22H16.4091C17.9545 22 19.1837 21.248 20.2873 20.1966C22.
                                 5466 18.0441 18.8372 16.324 17.4224 15.4816C14.1048 13.5061 9.89519 13.5061 6.57757 15.
                                 4816Z"</span><span class="nt">&gt;&lt;/path&gt;</span>
                                <span class="nt">&lt;path</span> <span class="na">stroke-width=</span><span class="s">"2"</span> <span class="na">fill=</span><span class="s">"#707277"</span> <span class="na">stroke=</span><span class="s">"#707277"</span> <span class="na">d=</span><span class="s">"M16.5 6.5C16.5 8.98528 14.4853
                                 11 12 11C9.51472 11 7.5 8.98528 7.5 6.5C7.5 4.01472 9.51472 2 12 2C14.4853 2 16.5 4.
                                 01472 16.5 6.5Z"</span><span class="nt">&gt;&lt;/path&gt;</span>
                            <span class="nt">&lt;/svg&gt;</span>
                        <span class="nt">&lt;/div&gt;</span>
                        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"user-info"</span><span class="nt">&gt;</span>
                            <span class="nt">&lt;span</span> <span class="na">th:text=</span><span class="s">"${message.role}"</span><span class="nt">&gt;</span>Yassine Zanina<span class="nt">&lt;/span&gt;</span>
                            <span class="nt">&lt;p&gt;</span>Wednesday, March 13th at 2:45pm<span class="nt">&lt;/p&gt;</span>
                        <span class="nt">&lt;/div&gt;</span>
                    <span class="nt">&lt;/div&gt;</span>
                    <span class="nt">&lt;p</span> <span class="na">th:if=</span><span class="s">"${message.role=='user'}"</span> <span class="na">class=</span><span class="s">"comment-content"</span> <span class="na">style=</span><span class="s">"text-align: left"</span> <span class="na">th:text=</span><span class="s">"$
                    {message.content}"</span><span class="nt">&gt;&lt;/p&gt;</span>
                    <span class="nt">&lt;p</span> <span class="na">th:if=</span><span class="s">"${message.role=='assistant'}"</span> <span class="na">class=</span><span class="s">"comment-content"</span> <span class="na">style=</span><span class="s">"text-align: right"</span> <span class="na">th:text=</span><span class="s">"$
                    {message.content}"</span><span class="nt">&gt;&lt;/p&gt;</span>
                <span class="nt">&lt;/div&gt;</span>
            <span class="nt">&lt;/div&gt;</span>

        <span class="nt">&lt;/div&gt;</span>

        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"text-box"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"box-container"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;textarea</span> <span class="na">id=</span><span class="s">"message-content"</span> <span class="na">placeholder=</span><span class="s">"Reply"</span><span class="nt">&gt;&lt;/textarea&gt;</span>
                <span class="nt">&lt;div&gt;</span>
                    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"formatting"</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span><span class="nt">&gt;</span>
                            <span class="nt">&lt;svg</span> <span class="na">fill=</span><span class="s">"none"</span> <span class="na">viewBox=</span><span class="s">"0 0 24 24"</span> <span class="na">height=</span><span class="s">"16"</span> <span class="na">width=</span><span class="s">"16"</span> <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/
                            svg"</span><span class="nt">&gt;</span>
                                <span class="nt">&lt;path</span> <span class="na">stroke-linejoin=</span><span class="s">"round"</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2.5"</span> <span class="na">stroke=</span><span class="s">"#707277"</span>
                                 <span class="na">d=</span><span class="s">"M5 6C5 4.58579 5 3.87868 5.43934 3.43934C5.87868 3 6.58579 3 8 3H12.5789C15.0206 3
                                  17 5.01472 17 7.5C17 9.98528 15.0206 12 12.5789 12H5V6Z"</span> <span class="na">clip-rule=</span><span class="s">"evenodd"</span>
                                   <span class="na">fill-rule=</span><span class="s">"evenodd"</span><span class="nt">&gt;&lt;/path&gt;</span>
                                <span class="nt">&lt;path</span> <span class="na">stroke-linejoin=</span><span class="s">"round"</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2.5"</span> <span class="na">stroke=</span><span class="s">"#707277"</span>
                                 <span class="na">d=</span><span class="s">"M12.4286 12H13.6667C16.0599 12 18 14.0147 18 16.5C18 18.9853 16.0599 21 13.6667
                                  21H8C6.58579 21 5.87868 21 5.43934 20.5607C5 20.1213 5 19.4142 5 18V12"</span><span class="nt">&gt;&lt;/path&gt;</span>
                            <span class="nt">&lt;/svg&gt;</span>
                        <span class="nt">&lt;/button&gt;</span>
                        <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span><span class="nt">&gt;</span>
                            <span class="nt">&lt;svg</span> <span class="na">fill=</span><span class="s">"none"</span> <span class="na">viewBox=</span><span class="s">"0 0 24 24"</span> <span class="na">height=</span><span class="s">"16"</span> <span class="na">width=</span><span class="s">"16"</span> <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/
                            svg"</span><span class="nt">&gt;</span>
                                <span class="nt">&lt;path</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2.5"</span> <span class="na">stroke=</span><span class="s">"#707277"</span> <span class="na">d=</span><span class="s">"M12 4H19"</span><span class="nt">&gt;&lt;/path&gt;</span>

                                <span class="nt">&lt;path</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2.5"</span> <span class="na">stroke=</span><span class="s">"#707277"</span> <span class="na">d=</span><span class="s">"M8 20L16 4"</span><span class="nt">&gt;&lt;/path&gt;</span>
                                <span class="nt">&lt;path</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2.5"</span> <span class="na">stroke=</span><span class="s">"#707277"</span> <span class="na">d=</span><span class="s">"M5 20H12"</span><span class="nt">&gt;&lt;/path&gt;</span>
                            <span class="nt">&lt;/svg&gt;</span>
                        <span class="nt">&lt;/button&gt;</span>
                        <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span><span class="nt">&gt;</span>
                            <span class="nt">&lt;svg</span> <span class="na">fill=</span><span class="s">"none"</span> <span class="na">viewBox=</span><span class="s">"0 0 24 24"</span> <span class="na">height=</span><span class="s">"16"</span> <span class="na">width=</span><span class="s">"16"</span> <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/
                            svg"</span><span class="nt">&gt;</span>
                                <span class="nt">&lt;path</span> <span class="na">stroke-linejoin=</span><span class="s">"round"</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2.5"</span> <span class="na">stroke=</span><span class="s">"#707277"</span>
                                 <span class="na">d=</span><span class="s">"M5.5 3V11.5C5.5 15.0899 8.41015 18 12 18C15.5899 18 18.5 15.0899 18.5 11.5V3"</span><span class="nt">&gt;&lt;/path&gt;</span>
                            
                                <span class="nt">&lt;path</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2.5"</span> <span class="na">stroke=</span><span class="s">"#707277"</span> <span class="na">d=</span><span class="s">"M3 21H21"</span><span class="nt">&gt;&lt;/path&gt;</span>
                            <span class="nt">&lt;/svg&gt;</span>
                        <span class="nt">&lt;/button&gt;</span>
                        <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span><span class="nt">&gt;</span>
                            <span class="nt">&lt;svg</span> <span class="na">fill=</span><span class="s">"none"</span> <span class="na">viewBox=</span><span class="s">"0 0 24 24"</span> <span class="na">height=</span><span class="s">"16"</span> <span class="na">width=</span><span class="s">"16"</span> <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/
                            svg"</span><span class="nt">&gt;</span>
                                <span class="nt">&lt;path</span> <span class="na">stroke-linejoin=</span><span class="s">"round"</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2.5"</span> <span class="na">stroke=</span><span class="s">"#707277"</span>
                                 <span class="na">d=</span><span class="s">"M4 12H20"</span><span class="nt">&gt;&lt;/path&gt;</span>
                                <span class="nt">&lt;path</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2.5"</span> <span class="na">stroke=</span><span class="s">"#707277"</span> <span class="na">d=</span><span class="s">"M17.5 7.66667C17.5 5.
                                08934 15.0376 3 12 3C8.96243 3 6.5 5.08934 6.5 7.66667C6.5 8.15279 6.55336 8.59783 6.
                                6668 9M6 16.3333C6 18.9107 8.68629 21 12 21C15.3137 21 18 19.6667 18 16.3333C18 13.9404
                                 16.9693 12.5782 14.9079 12"</span><span class="nt">&gt;&lt;/path&gt;</span>
                            <span class="nt">&lt;/svg&gt;</span>
                        <span class="nt">&lt;/button&gt;</span>
                        <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span><span class="nt">&gt;</span>
                            <span class="nt">&lt;svg</span> <span class="na">fill=</span><span class="s">"none"</span> <span class="na">viewBox=</span><span class="s">"0 0 24 24"</span> <span class="na">height=</span><span class="s">"16"</span> <span class="na">width=</span><span class="s">"16"</span> <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/
                            svg"</span><span class="nt">&gt;</span>
                                <span class="nt">&lt;circle</span> <span class="na">stroke-linejoin=</span><span class="s">"round"</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2.5"</span>
                                 <span class="na">stroke=</span><span class="s">"#707277"</span> <span class="na">r=</span><span class="s">"10"</span> <span class="na">cy=</span><span class="s">"12"</span> <span class="na">cx=</span><span class="s">"12"</span><span class="nt">&gt;&lt;/circle&gt;</span>
                                <span class="nt">&lt;path</span> <span class="na">stroke-linejoin=</span><span class="s">"round"</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2.5"</span> <span class="na">stroke=</span><span class="s">"#707277"</span>
                                 <span class="na">d=</span><span class="s">"M8 15C8.91212 16.2144 10.3643 17 12 17C13.6357 17 15.0879 16.2144 16 15"</span><span class="nt">&gt;&lt;/path&gt;</span>
                                <span class="nt">&lt;path</span> <span class="na">stroke-linejoin=</span><span class="s">"round"</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"3"</span> <span class="na">stroke=</span><span class="s">"#707277"</span>
                                 <span class="na">d=</span><span class="s">"M8.00897 9L8 9M16 9L15.991 9"</span><span class="nt">&gt;&lt;/path&gt;</span>
                            <span class="nt">&lt;/svg&gt;</span>
                        <span class="nt">&lt;/button&gt;</span>
                        <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"send"</span> <span class="na">title=</span><span class="s">"Send"</span> <span class="na">id=</span><span class="s">"send-message"</span> <span class="na">onclick=</span><span class="s">"sendMessage()"</span><span class="nt">&gt;</span>
                            <span class="nt">&lt;svg</span> <span class="na">fill=</span><span class="s">"none"</span> <span class="na">viewBox=</span><span class="s">"0 0 24 24"</span> <span class="na">height=</span><span class="s">"18"</span> <span class="na">width=</span><span class="s">"18"</span> <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/
                            svg"</span><span class="nt">&gt;</span>
                                <span class="nt">&lt;path</span> <span class="na">stroke-linejoin=</span><span class="s">"round"</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2.5"</span> <span class="na">stroke=</span><span class="s">"#ffffff"</span>
                                 <span class="na">d=</span><span class="s">"M12 5L12 20"</span><span class="nt">&gt;&lt;/path&gt;</span>
                                <span class="nt">&lt;path</span> <span class="na">stroke-linejoin=</span><span class="s">"round"</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-width=</span><span class="s">"2.5"</span> <span class="na">stroke=</span><span class="s">"#ffffff"</span>
                                 <span class="na">d=</span><span class="s">"M7 9L11.2929 4.70711C11.6262 4.37377 11.7929 4.20711 12 4.20711C12.2071 4.20711 12.
                                 3738 4.37377 12.7071 4.70711L17 9"</span><span class="nt">&gt;&lt;/path&gt;</span>
                            <span class="nt">&lt;/svg&gt;</span>
                        <span class="nt">&lt;/button&gt;</span>
                    <span class="nt">&lt;/div&gt;</span>
                <span class="nt">&lt;/div&gt;</span>
            <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>


</code></pre></div></div>

<p>일단 위 컴포넌트는 다른 사람이 작성한 코드를 참고했는데, 글자 크기가 너무 작긴 한것 같지만…
여기서</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">class=</span><span class="s">"nav-link text-white"</span> <span class="na">style=</span><span class="s">"background: none; border: none; padding: 0;"</span>
 <span class="na">onclick=</span><span class="s">"createNewChat()"</span><span class="nt">&gt;</span>
    
</code></pre></div></div>

<p>createNewChat() 함수는 새로운 챗 페이지를 생성하는 함수고,</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"send"</span> <span class="na">title=</span><span class="s">"Send"</span> <span class="na">id=</span><span class="s">"send-message"</span> <span class="na">onclick=</span><span class="s">"sendMessage()"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>sendMessage() 함수는 메시지를 보내는 함수이다. 
타임리프 템플릿을 이용해서 버튼을 누르거나 할 때마다 페이지 자체를 리로드하는 방식도 있겠지만, 
그런 방식은 성능이 떨어지기 때문에 이런 식으로 구현했다.</p>

<p>타임리프 템플릿은 처음 페이지를 로드할 때만 이용된다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"nav nav-pills flex-column mb-auto"</span> <span class="na">id=</span><span class="s">"chatList"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- 기존 채팅 목록 표시 --&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"nav-item"</span> <span class="na">th:each=</span><span class="s">"chat : ${chats}"</span> <span class="na">style=</span><span class="s">"padding: 5px"</span> <span class="na">th:onclick=</span><span class="s">"'drawChat(' + ${chat.id} + ')'"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"#"</span> <span class="na">class=</span><span class="s">"nav-link active"</span> <span class="na">th:text=</span><span class="s">"'채팅 ' + ${chat.id}"</span> <span class="na">aria-current=</span><span class="s">"page"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;svg</span> <span class="na">class=</span><span class="s">"bi pe-none me-2"</span> <span class="na">width=</span><span class="s">"16"</span> <span class="na">height=</span><span class="s">"16"</span><span class="nt">&gt;&lt;use</span> <span class="na">xlink:href=</span><span class="s">"#home"</span><span class="nt">&gt;&lt;/use&gt;&lt;/svg&gt;</span>
            <span class="nt">&lt;span</span> <span class="na">th:text=</span><span class="s">"'채팅 ' + ${chat.id}"</span><span class="nt">&gt;</span>채팅 ID<span class="nt">&lt;/span&gt;</span>
        <span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span>

</code></pre></div></div>

<p>이는 기존 채팅 목록을 표시하는 부분이다. 채팅 목록을 클릭하면 drawChat() 함수가 호출되고, 이는 해당 채팅 목록을 그리는 함수이다.</p>

<h4 id="chattingjs">Chatting.js</h4>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">function</span> <span class="nf">createNewChat</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Ajax POST 요청으로 새 채팅 생성</span>
    <span class="nf">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">/chat/new</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span>
    <span class="p">}).</span><span class="nf">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">ok</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// 새 채팅이 생성되면 채팅 목록을 다시 불러오는 함수 호출</span>
            <span class="nf">updateChatList</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">));</span>
<span class="p">}</span>

<span class="c1">// 채팅 목록을 새로 불러오는 함수</span>
<span class="kd">function</span> <span class="nf">updateChatList</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">/chat</span><span class="dl">'</span><span class="p">)</span>  <span class="c1">// 채팅 목록을 불러올 API 엔드포인트</span>
        <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>  <span class="c1">// JSON 응답을 파싱</span>
        <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">chatList</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">chatList</span><span class="dl">'</span><span class="p">);</span>
            <span class="nx">chatList</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>  <span class="c1">// 기존 채팅 목록 초기화</span>

            <span class="c1">// 불러온 데이터를 바탕으로 채팅 목록을 다시 렌더링</span>
            <span class="nx">data</span><span class="p">.</span><span class="nf">forEach</span><span class="p">(</span><span class="nx">chat</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="kd">const</span> <span class="nx">li</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">li</span><span class="dl">'</span><span class="p">);</span>
                <span class="nx">li</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="dl">'</span><span class="s1">nav-item</span><span class="dl">'</span><span class="p">);</span>
                <span class="nx">li</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">padding</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">5px</span><span class="dl">'</span><span class="p">;</span>

                <span class="nx">li</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">`
                    &lt;a href="#" class="nav-link active" aria-current="page"&gt;
                        &lt;svg class="bi pe-none me-2" width="16" height="16"&gt;&lt;use xlink:href="#home"&gt;&lt;/use&gt;&lt;/svg&gt;
                        채팅 </span><span class="p">${</span><span class="nx">chat</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="s2">
                    &lt;/a&gt;
                `</span><span class="p">;</span>
                <span class="nx">chatList</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">li</span><span class="p">);</span>  <span class="c1">// 새로 만든 항목을 목록에 추가</span>
            <span class="p">});</span>
        <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">));</span>
<span class="p">}</span>

</code></pre></div></div>

<h4 id="messagejs">message.js</h4>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">async</span> <span class="kd">function</span> <span class="nf">sendMessage</span><span class="p">()</span> <span class="p">{</span>

    <span class="kd">const</span> <span class="nx">chatId</span> <span class="o">=</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nf">getItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">chatId</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">content</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">message-content</span><span class="dl">'</span><span class="p">).</span><span class="nx">value</span><span class="p">;</span>

    <span class="kd">const</span> <span class="nx">sendedMessage</span> <span class="o">=</span> <span class="nf">createMessage</span><span class="p">({</span><span class="na">role</span><span class="p">:</span> <span class="dl">'</span><span class="s1">user</span><span class="dl">'</span><span class="p">,</span> <span class="na">content</span><span class="p">:</span> <span class="nx">content</span><span class="p">});</span>
    <span class="kd">const</span> <span class="nx">chatBox</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">message-box</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">chatBox</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">sendedMessage</span><span class="p">);</span>

    <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">/chat/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">chatId</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
            <span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="na">body</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">stringify</span><span class="p">({</span><span class="na">content</span><span class="p">:</span> <span class="nx">content</span><span class="p">}),</span>
    <span class="p">});</span>
    <span class="kd">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">recievedMessage</span> <span class="o">=</span> <span class="nf">createMessage</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>

    <span class="nx">chatBox</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">recievedMessage</span><span class="p">);</span>

<span class="p">}</span>

<span class="kd">function</span> <span class="nf">createMessage</span><span class="p">(</span><span class="nx">messageData</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">div</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">message</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="dl">'</span><span class="s1">comments</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">message</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">`
            &lt;div class="comment-react"&gt;
                &lt;button&gt;
                    &lt;svg fill="none" viewBox="0 0 24 24" height="16" width="16" xmlns="http://www.w3.org/2000/svg"&gt;
                        &lt;path fill="#707277" stroke-linecap="round" stroke-width="2" stroke="#707277" d="M19.4626 3.
                        99415C16.7809 2.34923 14.4404 3.01211 13.0344 4.06801C12.4578 4.50096 12.1696 4.71743 12 4.
                        71743C11.8304 4.71743 11.5422 4.50096 10.9656 4.06801C9.55962 3.01211 7.21909 2.34923 4.53744 3.
                        99415C1.01807 6.15294 0.221721 13.2749 8.33953 19.2834C9.88572 20.4278 10.6588 21 12 21C13.3412
                         21 14.1143 20.4278 15.6605 19.2834C23.7783 13.2749 22.9819 6.15294 19.4626 3.99415Z"&gt;&lt;/path&gt;
                    &lt;/svg&gt;
                &lt;/button&gt;
                &lt;hr&gt;
                &lt;span&gt;14&lt;/span&gt;
            &lt;/div&gt;
                &lt;div class="comment-container"&gt;
                    &lt;div class="</span><span class="p">${</span><span class="nx">messageData</span><span class="p">.</span><span class="nx">role</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">user</span><span class="dl">'</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">user</span><span class="dl">'</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">gpt</span><span class="dl">'</span><span class="p">}</span><span class="s2">"&gt;
                        &lt;div class="user-pic"&gt;
                            &lt;svg fill="none" viewBox="0 0 24 24" height="20" width="20" xmlns="http://www.w3.org/2000/
                            svg"&gt;
                                &lt;path stroke-linejoin="round" fill="#707277" stroke-linecap="round" stroke-width="2"
                                 stroke="#707277" d="M6.57757 15.4816C5.1628 16.324 1.45336 18.0441 3.71266 20.1966C4.
                                 81631 21.248 6.04549 22 7.59087 22H16.4091C17.9545 22 19.1837 21.248 20.2873 20.1966C22.
                                 5466 18.0441 18.8372 16.324 17.4224 15.4816C14.1048 13.5061 9.89519 13.5061 6.57757 15.
                                 4816Z"&gt;&lt;/path&gt;
                                &lt;path stroke-width="2" fill="#707277" stroke="#707277" d="M16.5 6.5C16.5 8.98528 14.4853
                                 11 12 11C9.51472 11 7.5 8.98528 7.5 6.5C7.5 4.01472 9.51472 2 12 2C14.4853 2 16.5 4.
                                 01472 16.5 6.5Z"&gt;&lt;/path&gt;
                            &lt;/svg&gt;
                        &lt;/div&gt;
                        &lt;div class="user-info"&gt;
                            &lt;span&gt;</span><span class="p">${</span><span class="nx">messageData</span><span class="p">.</span><span class="nx">role</span><span class="p">}</span><span class="s2">&lt;/span&gt;
                            &lt;p&gt;Wednesday, March 13th at 2:45pm&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                    &lt;p class="comment-content" style="text-align: </span><span class="p">${</span><span class="nx">messageData</span><span class="p">.</span><span class="nx">role</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">user</span><span class="dl">'</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">left</span><span class="dl">'</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">right</span><span class="dl">'</span><span class="p">}</span><span class="s2">"&gt;
                        </span><span class="p">${</span><span class="nx">messageData</span><span class="p">.</span><span class="nx">content</span><span class="p">}</span><span class="s2">
                    &lt;/p&gt;
                    
                &lt;/div&gt;
        `</span><span class="p">;</span>

    <span class="k">return</span> <span class="nx">message</span><span class="p">;</span>
    
<span class="p">}</span>

<span class="k">async</span> <span class="kd">function</span> <span class="nf">drawChat</span><span class="p">(</span><span class="nx">chatId</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">localStorage</span><span class="p">.</span><span class="nf">setItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">chatId</span><span class="dl">'</span><span class="p">,</span> <span class="nx">chatId</span><span class="p">);</span>

    <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">/chat/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">chatId</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">chat</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">messages</span> <span class="o">=</span> <span class="nx">chat</span><span class="p">.</span><span class="nx">messages</span><span class="p">;</span>

    <span class="kd">const</span> <span class="nx">chatBox</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">message-box</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">chatBox</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>

    <span class="nx">messages</span><span class="p">.</span><span class="nf">forEach</span><span class="p">(</span><span class="nx">messageData</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">div</span><span class="dl">'</span><span class="p">);</span>
        <span class="nx">message</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="dl">'</span><span class="s1">comments</span><span class="dl">'</span><span class="p">);</span>
        <span class="nx">message</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">`
            &lt;div class="comment-react"&gt;
                &lt;button&gt;
                    &lt;svg fill="none" viewBox="0 0 24 24" height="16" width="16" xmlns="http://www.w3.org/2000/svg"&gt;
                        &lt;path fill="#707277" stroke-linecap="round" stroke-width="2" stroke="#707277" d="M19.4626 3.
                        99415C16.7809 2.34923 14.4404 3.01211 13.0344 4.06801C12.4578 4.50096 12.1696 4.71743 12 4.
                        71743C11.8304 4.71743 11.5422 4.50096 10.9656 4.06801C9.55962 3.01211 7.21909 2.34923 4.53744 3.
                        99415C1.01807 6.15294 0.221721 13.2749 8.33953 19.2834C9.88572 20.4278 10.6588 21 12 21C13.3412
                         21 14.1143 20.4278 15.6605 19.2834C23.7783 13.2749 22.9819 6.15294 19.4626 3.99415Z"&gt;&lt;/path&gt;
                    &lt;/svg&gt;
                &lt;/button&gt;
                &lt;hr&gt;
                &lt;span&gt;14&lt;/span&gt;
            &lt;/div&gt;
                &lt;div class="comment-container"&gt;
                    &lt;div class="</span><span class="p">${</span><span class="nx">messageData</span><span class="p">.</span><span class="nx">role</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">user</span><span class="dl">'</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">user</span><span class="dl">'</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">gpt</span><span class="dl">'</span><span class="p">}</span><span class="s2">"&gt;
                        &lt;div class="user-pic"&gt;
                            &lt;svg fill="none" viewBox="0 0 24 24" height="20" width="20" xmlns="http://www.w3.org/2000/
                            svg"&gt;
                                &lt;path stroke-linejoin="round" fill="#707277" stroke-linecap="round" stroke-width="2"
                                 stroke="#707277" d="M6.57757 15.4816C5.1628 16.324 1.45336 18.0441 3.71266 20.1966C4.
                                 81631 21.248 6.04549 22 7.59087 22H16.4091C17.9545 22 19.1837 21.248 20.2873 20.1966C22.
                                 5466 18.0441 18.8372 16.324 17.4224 15.4816C14.1048 13.5061 9.89519 13.5061 6.57757 15.
                                 4816Z"&gt;&lt;/path&gt;
                                &lt;path stroke-width="2" fill="#707277" stroke="#707277" d="M16.5 6.5C16.5 8.98528 14.4853
                                 11 12 11C9.51472 11 7.5 8.98528 7.5 6.5C7.5 4.01472 9.51472 2 12 2C14.4853 2 16.5 4.
                                 01472 16.5 6.5Z"&gt;&lt;/path&gt;
                            &lt;/svg&gt;
                        &lt;/div&gt;
                        &lt;div class="user-info"&gt;
                            &lt;span&gt;</span><span class="p">${</span><span class="nx">messageData</span><span class="p">.</span><span class="nx">role</span><span class="p">}</span><span class="s2">&lt;/span&gt;
                            &lt;p&gt;Wednesday, March 13th at 2:45pm&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                    &lt;p class="comment-content" style="text-align: </span><span class="p">${</span><span class="nx">messageData</span><span class="p">.</span><span class="nx">role</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">user</span><span class="dl">'</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">left</span><span class="dl">'</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">right</span><span class="dl">'</span><span class="p">}</span><span class="s2">"&gt;
                        </span><span class="p">${</span><span class="nx">messageData</span><span class="p">.</span><span class="nx">content</span><span class="p">}</span><span class="s2">
                    &lt;/p&gt;
                    
                &lt;/div&gt;
        `</span><span class="p">;</span>
        <span class="nx">chatBox</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>솔직히 이렇게 할거면 그냥 리액트 쓸걸 그랬다. 그게 더 편리했을 것 같기도 하고…
아무튼, 이렇게 구현하면 페이지 자체를 리로드하지 않고도 메시지를 추가할 수 있다.</p>

<p>코드를 읽어보면 이해하겠지만, 챗 목록을 클릭하면 drawChat() 함수가 호출되고, 이 함수는 해당 챗의 메시지를 그리는 함수이다.
각각의 메시지는 createMessage() 함수를 통해 그려지는데, 이 함수는 메시지의 역할과 내용을 받아서 메시지를 그린다.</p>

<h3 id="마치며">마치며</h3>

<p>만약 실행이 안되거나 오류가 있으면 내가 작성한 테스트 코드를 
<a href="https://github.com/Ash-tensor/simple-gpt-page">https://github.com/Ash-tensor/simple-gpt-page</a> 에서 확인할 수 있다.</p>

<p>그럼 안녕!!</p>]]></content><author><name>ash tensor</name></author><category term="WEB" /><category term="JAVA" /><summary type="html"><![CDATA[[WEB][Spring] 스프링으로 간단한 Chat-GPT 페이지 구현하기 - 2]]></summary></entry><entry><title type="html">[WEB][react] Chat-gpt realtime api 구현 및 설명</title><link href="http://localhost:4000/web/react/2024/10/15/openai-realtime.html" rel="alternate" type="text/html" title="[WEB][react] Chat-gpt realtime api 구현 및 설명" /><published>2024-10-15T00:00:00+09:00</published><updated>2024-10-15T00:00:00+09:00</updated><id>http://localhost:4000/web/react/2024/10/15/openai-realtime</id><content type="html" xml:base="http://localhost:4000/web/react/2024/10/15/openai-realtime.html"><![CDATA[<h2 id="webreact-chat-gpt-realtime-api-구현-및-설명">[WEB][react] Chat-gpt realtime api 구현 및 설명</h2>

<h3 id="1-서론">1. 서론</h3>

<p>한 몇달 쯤 전인가? OpenAI에서 GPT앱을 출시하면서 엄청 대단한 기능으로 화제가 된 적이 있다.
실시간으로 카메라를 통해서 풍경을 이해하고, 음성을 실시간으로 이해하고 어조및 어투가 정말 사람같으며 사람의 농담을 제대로 이해하는 등
한국 언론은 물론이고 전세계적으로도 엄청난 화제가 되었는데.</p>

<p><img src="/img/posts/react/realtime/1.png" width="80%" /></p>

<p>마지 영화의 HER에서 나오는 AI와 비슷한 느낌이 든다고 화제였었다. 그리고 스칼렛 요한슨 목소리이냐 아니냐로 논란이 있었는데,
Open AI는 해당 API를 공개하지 않고 있었다. 지금까지 OpenAI의 음성인식은 whisper라고 하는 음성인식 api였는데, 이는 실시간과는 거리가 멀고,
음성파일을 집어 넣으면 텍스트로 변환해 주거나 하는 기능이었다.</p>

<p>하지만 10월에 들어서 OpenAI에서 realtime API를 일반 개발자들도 사용할 수 있게 공개했는데, 해당 기능으로 실시간으로 마이크를 통해서 
음성을 인식하는 기능을 구현할 수 있게 되었다.</p>

<p>이를 한번 구현해 보았는데 한국어로 된 자료도 없고, 영어로 된 자료도 마찬가지로 적어서 어디서 오류가 나는지 찾는데 어려움이 있었다.
그래서 이번 포스트에서는 해당 기능을 간단하게 구현하고, 설명하고자 한다.</p>

<h3 id="2-구현-예제">2. 구현 예제</h3>

<p><img src="/img/posts/react/realtime/2.png" width="80%" /></p>

<p>자세한 API 문서는 <a href="https://platform.openai.com/docs/guides/realtime">OpenAI API</a>을 참고하면 된다. 
하지만 해당 문서만 가지고 실제 구현해 보기는 어려워서 Open-AI에서 제공한 예제를 참고해서 구현해 보았다.</p>

<p><img src="/img/posts/react/realtime/3.png" width="80%" /></p>

<p>내가 구현한 예제는 <a href="https://github.com/Ash-tensor/realtime-api">VAD 예시</a>를 참고하면 된다. 
해당 예제는 Open AI에서 제공한 예제를 기반으로 하고 있는데, API를 이해하면서 VAD를 구현하는데 실제 필요하지 않은 기능들을 덜어내고 
VAD(Voice Activity Detection), 
즉 앞서 뉴스에서 봤던 것처럼 따로 음성을 올리거나, 아니면 말할때 호출어를 부르거나 버튼을 눌러서 구현하는 게 아니라, 
마이크를 통해서 실시간으로 음성을 인식하는 기능만을 구현해 놓은 예시이다.</p>

<p>Open ai 예제는 다양한 tool과 map 등, event를 다루는 기능들이 많아 한번에 이해하기 어려웠기 때문에 한번 구현해 보았다.</p>

<h3 id="3-설명">3. 설명</h3>

<h4 id="상태-변수">상태 변수</h4>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">export</span> <span class="kd">function</span> <span class="nf">ConsolePage</span><span class="p">()</span> <span class="p">{</span>

    <span class="c1">// API 키 설정</span>
    <span class="kd">const</span> <span class="nx">apiKey</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">본인 API 키</span><span class="dl">"</span>

    <span class="c1">// Ref 초기화</span>
    <span class="kd">const</span> <span class="nx">wavRecorderRef</span> <span class="o">=</span> <span class="nx">useRef</span><span class="o">&lt;</span><span class="nx">WavRecorder</span><span class="o">&gt;</span><span class="p">(</span>
        <span class="k">new</span> <span class="nc">WavRecorder</span><span class="p">({</span> <span class="na">sampleRate</span><span class="p">:</span> <span class="mi">24000</span> <span class="p">})</span>
    <span class="p">);</span>
    <span class="kd">const</span> <span class="nx">wavStreamPlayerRef</span> <span class="o">=</span> <span class="nx">useRef</span><span class="o">&lt;</span><span class="nx">WavStreamPlayer</span><span class="o">&gt;</span><span class="p">(</span>
        <span class="k">new</span> <span class="nc">WavStreamPlayer</span><span class="p">({</span> <span class="na">sampleRate</span><span class="p">:</span> <span class="mi">24000</span> <span class="p">})</span>
    <span class="p">);</span>
    <span class="kd">const</span> <span class="nx">clientRef</span> <span class="o">=</span> <span class="nx">useRef</span><span class="o">&lt;</span><span class="nx">RealtimeClient</span><span class="o">&gt;</span><span class="p">(</span>
        <span class="k">new</span> <span class="nc">RealtimeClient</span><span class="p">(</span>
            <span class="p">{</span>
                <span class="na">apiKey</span><span class="p">:</span> <span class="nx">apiKey</span><span class="p">,</span>
                <span class="na">dangerouslyAllowAPIKeyInBrowser</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="p">}</span>
        <span class="p">)</span>
    <span class="p">);</span>

    <span class="kd">const</span> <span class="p">[</span><span class="nx">realtimeEvents</span><span class="p">,</span> <span class="nx">setRealtimeEvents</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="nx">RealtimeEvent</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">([]);</span> <span class="c1">// vad만 구현하고자 하면 필요없음</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">expandedEvents</span><span class="p">,</span> <span class="nx">setExpandedEvents</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="p">{</span>  <span class="c1">// vad만 구현하고자 하면 필요없음</span>
        <span class="p">[</span><span class="na">key</span><span class="p">:</span> <span class="kr">string</span><span class="p">]:</span> <span class="nx">boolean</span><span class="p">;</span>
    <span class="p">}</span><span class="o">&gt;</span><span class="p">({});</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">items</span><span class="p">,</span> <span class="nx">setItems</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="nx">ItemType</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">([]);</span>
    
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">items</code>: 모든 대화 항목을 저장하는 배열.</li>
  <li><code class="language-plaintext highlighter-rouge">realtimeEvents</code>: 확장 가능한 이벤트 로그를 저장하는 배열.</li>
  <li><code class="language-plaintext highlighter-rouge">expandedEvents</code>: 각 이벤트의 확장 상태를 저장하는 객체.</li>
</ul>

<p>단순히 vad만을 구현하고자 하면 realtimeEvents 및 expandedEvents는 필요 없다.
items에 존재하는 대화 항목을 wavStreamPlayer 를 이용해서 음성으로 재생하는 구조이다.</p>

<h4 id="대화-연결-함수">대화 연결 함수</h4>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cm">/**
   * 대화 연결 함수
   */</span>
  <span class="kd">const</span> <span class="nx">connectConversation</span> <span class="o">=</span> <span class="nf">useCallback</span><span class="p">(</span><span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">clientRef</span><span class="p">.</span><span class="nx">current</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">wavRecorder</span> <span class="o">=</span> <span class="nx">wavRecorderRef</span><span class="p">.</span><span class="nx">current</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">wavStreamPlayer</span> <span class="o">=</span> <span class="nx">wavStreamPlayerRef</span><span class="p">.</span><span class="nx">current</span><span class="p">;</span>

    <span class="nf">setItems</span><span class="p">(</span><span class="nx">client</span><span class="p">.</span><span class="nx">conversation</span><span class="p">.</span><span class="nf">getItems</span><span class="p">());</span>

    <span class="k">if </span><span class="p">(</span><span class="nx">wavRecorder</span><span class="p">.</span><span class="nf">getStatus</span><span class="p">()</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">recording</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">await</span> <span class="nx">wavRecorder</span><span class="p">.</span><span class="nf">pause</span><span class="p">();</span> <span class="c1">// 또는 await wavRecorder.stop();</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">connectConversation</span><span class="dl">'</span><span class="p">,</span> <span class="nx">wavRecorder</span><span class="p">.</span><span class="nf">getStatus</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">await</span> <span class="nx">wavRecorder</span><span class="p">.</span><span class="nf">begin</span><span class="p">();</span>

    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">connectConversation : wavRecorder begin</span><span class="dl">'</span><span class="p">,</span> <span class="nx">wavRecorder</span><span class="p">.</span><span class="nf">getStatus</span><span class="p">());</span>

    <span class="k">await</span> <span class="nx">wavStreamPlayer</span><span class="p">.</span><span class="nf">connect</span><span class="p">();</span>
    <span class="k">await</span> <span class="nx">client</span><span class="p">.</span><span class="nf">connect</span><span class="p">();</span>

    <span class="nx">client</span><span class="p">.</span><span class="nf">updateSession</span><span class="p">({</span>
      <span class="na">turn_detection</span><span class="p">:</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">server_vad</span><span class="dl">'</span> <span class="p">},</span> <span class="c1">// VAD 활성화</span>
      <span class="na">input_audio_transcription</span><span class="p">:</span> <span class="p">{</span> <span class="na">model</span><span class="p">:</span> <span class="dl">'</span><span class="s1">whisper-1</span><span class="dl">'</span> <span class="p">},</span>
    <span class="p">});</span>

    <span class="c1">// 기본 인사 메시지 전송</span>
    <span class="nx">client</span><span class="p">.</span><span class="nf">sendUserMessageContent</span><span class="p">([</span>
      <span class="p">{</span>
        <span class="na">type</span><span class="p">:</span> <span class="s2">`input_text`</span><span class="p">,</span>
        <span class="na">text</span><span class="p">:</span> <span class="s2">`Hello!`</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">]);</span>

    <span class="k">if </span><span class="p">(</span><span class="nx">client</span><span class="p">.</span><span class="nf">getTurnDetectionType</span><span class="p">()</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">server_vad</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span> <span class="dl">'</span><span class="s1">wavRecorder.getStatus()</span><span class="dl">'</span> <span class="p">,</span><span class="nx">wavRecorder</span><span class="p">.</span><span class="nf">getStatus</span><span class="p">());</span>
      <span class="k">await</span> <span class="nx">wavRecorder</span><span class="p">.</span><span class="nf">record</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">client</span><span class="p">.</span><span class="nf">appendInputAudio</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">mono</span><span class="p">));</span>
    <span class="p">}</span>
  <span class="p">},</span> <span class="p">[]);</span>

</code></pre></div></div>

<p>여기서 중요한 게 client.updateSession 함수인데, 여기서 대부분의 세션 설정이 이루어진다.
중요한 옵션을 나열하자면</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">modalities</code>: 텍스트로 설정할 건지 음성으로 설정할 건지. [“audio”, “text”] 중 하나를 선택한다.</li>
  <li><code class="language-plaintext highlighter-rouge">tools</code>: chat completion에도 있는 함수 호출(미리 gpt가 해야할 특정 행동을 정의해놓고 그 행동을 호출하면 gpt가 해당 행동을 수행하게 하는 것)</li>
  <li><code class="language-plaintext highlighter-rouge">turn_detection</code>: VAD 활성화 또는 비활성화</li>
  <li><code class="language-plaintext highlighter-rouge">instruction</code>: <strong>시스템 설정 메시지</strong></li>
</ul>

<p>이 중에서 <code class="language-plaintext highlighter-rouge">instruction</code>은 꽤 중요한데, 이는 시스템 설정 메시지를 의미한다. 예전 gpt chat completion 에서 시스템 메시지를 보내는 것과 같은 역할을 한다.</p>

<h5 id="instructionts">instruction.ts</h5>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">instructions</span> <span class="o">=</span> <span class="s2">`System settings:
Tool use: enabled.

Instructions:
- You are an artificial intelligence agent responsible for helping test realtime voice capabilities
- Please make sure to respond with a helpful voice via audio
- Be kind, helpful, and curteous
- It is okay to ask the user questions
- Use tools and functions you have available liberally, it is part of the training apparatus
- Be open to exploration and conversation
- Remember: this is just for fun and testing!

Personality:
- Be upbeat and genuine
- Try speaking quickly as if excited
  `</span><span class="p">;</span>

</code></pre></div></div>

<p>이 메시지는 open ai가 설정했던 시스템 메시지로</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    <span class="nx">client</span><span class="p">.</span><span class="nf">updateSession</span><span class="p">({</span> <span class="na">instructions</span><span class="p">:</span> <span class="nx">instructions</span> <span class="p">});</span>

</code></pre></div></div>
<p>이런 식으로 open ai는 instruction을 설정했었다. 물론 그냥 string으로 박아도 괜찮다.</p>

<h4 id="useeffect">useEffect</h4>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
  <span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">connectConversation</span><span class="p">();</span>
  <span class="p">},</span> <span class="p">[]);</span>

  <span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">wavStreamPlayer</span> <span class="o">=</span> <span class="nx">wavStreamPlayerRef</span><span class="p">.</span><span class="nx">current</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">clientRef</span><span class="p">.</span><span class="nx">current</span><span class="p">;</span>
   
    <span class="nx">client</span><span class="p">.</span><span class="nf">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">conversation.updated</span><span class="dl">'</span><span class="p">,</span> <span class="k">async </span><span class="p">({</span> <span class="nx">item</span><span class="p">,</span> <span class="nx">delta</span> <span class="p">}:</span> <span class="kr">any</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">items</span> <span class="o">=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">conversation</span><span class="p">.</span><span class="nf">getItems</span><span class="p">();</span>
      <span class="k">if </span><span class="p">(</span><span class="nx">delta</span><span class="p">?.</span><span class="nx">audio</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">wavStreamPlayer</span><span class="p">.</span><span class="nf">add16BitPCM</span><span class="p">(</span><span class="nx">delta</span><span class="p">.</span><span class="nx">audio</span><span class="p">,</span> <span class="nx">item</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">if </span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">completed</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">formatted</span><span class="p">.</span><span class="nx">audio</span><span class="p">?.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">wavFile</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">WavRecorder</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span>
          <span class="nx">item</span><span class="p">.</span><span class="nx">formatted</span><span class="p">.</span><span class="nx">audio</span><span class="p">,</span>
          <span class="mi">24000</span><span class="p">,</span>
          <span class="mi">24000</span>
        <span class="p">);</span>
        <span class="nx">item</span><span class="p">.</span><span class="nx">formatted</span><span class="p">.</span><span class="nx">file</span> <span class="o">=</span> <span class="nx">wavFile</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="nf">setItems</span><span class="p">(</span><span class="nx">items</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="nf">setItems</span><span class="p">(</span><span class="nx">client</span><span class="p">.</span><span class="nx">conversation</span><span class="p">.</span><span class="nf">getItems</span><span class="p">());</span>

    <span class="k">return </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="c1">// cleanup; resets to defaults</span>
      <span class="nx">client</span><span class="p">.</span><span class="nf">reset</span><span class="p">();</span>
    <span class="p">};</span>
  <span class="p">},</span> <span class="p">[]);</span>

</code></pre></div></div>

<p>useEffect에서 connectConversation을 호출하고, conversation.updated 이벤트를 등록한다.
즉 realtime api는 conversation.updated 이벤트를 통해서 텍스트 데이터를 받아오고, 이를 wavStreamPlayer를 통해서 음성으로 재생하는 구조이다.</p>

<h4 id="세션-종료-함수">세션 종료 함수</h4>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
  <span class="kd">const</span> <span class="nx">disconnectConversation</span> <span class="o">=</span> <span class="nf">useCallback</span><span class="p">(</span><span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">clientRef</span><span class="p">.</span><span class="nx">current</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">wavRecorder</span> <span class="o">=</span> <span class="nx">wavRecorderRef</span><span class="p">.</span><span class="nx">current</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">wavStreamPlayer</span> <span class="o">=</span> <span class="nx">wavStreamPlayerRef</span><span class="p">.</span><span class="nx">current</span><span class="p">;</span>

    <span class="nx">client</span><span class="p">.</span><span class="nf">disconnect</span><span class="p">();</span>
    <span class="k">await</span> <span class="nx">wavRecorder</span><span class="p">.</span><span class="nf">end</span><span class="p">();</span>
    <span class="k">await</span> <span class="nx">wavStreamPlayer</span><span class="p">.</span><span class="nf">interrupt</span><span class="p">();</span>
  <span class="p">},</span> <span class="p">[]);</span>

</code></pre></div></div>

<h3 id="4-트러블-슈팅">4. 트러블 슈팅</h3>

<p>일단 위의 코드를 보면서 느꼈겠지만</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">// 이 부분이다.</span>
<span class="k">if </span><span class="p">(</span><span class="nx">wavRecorder</span><span class="p">.</span><span class="nf">getStatus</span><span class="p">()</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">recording</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">await</span> <span class="nx">wavRecorder</span><span class="p">.</span><span class="nf">pause</span><span class="p">();</span> <span class="c1">// 또는 await wavRecorder.stop();</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">connectConversation</span><span class="dl">'</span><span class="p">,</span> <span class="nx">wavRecorder</span><span class="p">.</span><span class="nf">getStatus</span><span class="p">());</span>
<span class="p">}</span>

</code></pre></div></div>
<p>위 부분은 트러블 슈팅을 하던 때의 흔적이다. 
wavRecorder.getStatus()가 recording이 아닌데 자꾸 이런 오류가 발생했다.</p>

<blockquote>
  <p>wav_recorder.js:438 Uncaught (in promise) Error: Already recording: please call .pause() first 
at WavRecorder.record (wav_recorder.js:438:1)
at ConsolePage.tsx:75:1</p>
</blockquote>

<p>이 오류는 strict mode에서 발생하는 오류로, strict mode를 해제하면 오류가 발생하지 않는다.
두 번 호출하기 때문에 상태 관리에서 오류가 있었던 것 같다.</p>

<p>별 것 아닌 오류였지만 은근 떠올리는데 몇시간 걸렸기도 하고, 인터넷에서 검색해도 이런 오류가 나는 사람도 없었기 때문에
이런 오류가 나면 strict mode를 한번 해제하고 해보길 바란다.</p>

<h3 id="5-결론">5. 결론</h3>

<p>이번 포스트에서는 OpenAI에서 제공하는 실시간 API를 이용해서 실시간으로 음성을 인식하는 기능을 구현해 보았다.
또한 더 구체적인 예제는 <a href="https://github.com/openai/openai-realtime-console">Open AI 예제</a>를 참고하면 된다.</p>

<p><strong>근데 realtime api 엄청 비싸다!!!! 농담 안하고 안녕? 반가워, 너 내 한국어 이해해? 이 정도 대화만 하는데 1.3달러 정도 과금한다ㅋㅋㅋ</strong>
솔직히 너무 비싸서 현업에서는 못쓰지 않을까 생각한다.</p>]]></content><author><name>ash tensor</name></author><category term="WEB" /><category term="REACT" /><summary type="html"><![CDATA[[WEB][react] Chat-gpt realtime api 구현 및 설명]]></summary></entry><entry><title type="html">[WEB][Spring] 스프링으로 Chat-GPT 기능 구현하기 - 1</title><link href="http://localhost:4000/web/java/2024/09/30/spring-gpt-backend.html" rel="alternate" type="text/html" title="[WEB][Spring] 스프링으로 Chat-GPT 기능 구현하기 - 1" /><published>2024-09-30T00:00:00+09:00</published><updated>2024-09-30T00:00:00+09:00</updated><id>http://localhost:4000/web/java/2024/09/30/spring-gpt-backend</id><content type="html" xml:base="http://localhost:4000/web/java/2024/09/30/spring-gpt-backend.html"><![CDATA[<h2 id="webspring-스프링으로-간단한-chat-gpt-페이지-구현하기---1">[WEB][Spring] 스프링으로 간단한 Chat-GPT 페이지 구현하기 - 1</h2>

<h3 id="1-서론">1. 서론</h3>

<p><img src="/img/posts/spring/gpt/1.png" width="80%" /></p>

<p>개인적으로 진행했던 프로젝트에서 스프링에 GPT-4o API를 이용해 현재 상황을 분석하고 앞으로의 전략을 제시하는 기능을 구현했었는데,
이번에는 GPT-4o API를 이용해서 간단한 채팅 페이지를 구현해 보고자 한다. 간단한 completion 기능을 이용하고자 한다면 굳이 구독하지는 않아도 
되지 않을까 싶기도 하고 스프링도 손에 익어서 몇 시간이면 구현이 가능할 것 같아서 완성해 보았다.</p>

<p>약 2일 정도 걸렸고 대부분은 프론트엔드에서 걸린 시간이 많았다. 
아직 불완전한 부분이 있긴 하지만 충분히 사용할만한 수준으로, 챗GPT 페이지와 유사한 형태의 채팅 페이지를 구현했다.</p>

<h3 id="2-api-요청-방법">2. API 요청 방법</h3>

<p>일단 OpenAI API를 사용하기 위해서는 API Key가 필요하다. 이는 OpenAi 홈페이지에서 계정을 만들고 API Key를 발급받으면 된다.
또한 OpenAI API를 사용하기 위해서는 요청을 보낼 때, JSON 형식으로 데이터를 보내야 한다.
이 JSON 형식은 다음과 같은데</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"model"</span><span class="p">:</span><span class="w"> </span><span class="s2">"요청 모델 명 (ex. gpt-3.5-turbo)"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"messages"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"role"</span><span class="p">:</span><span class="w"> </span><span class="s2">"user"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"content"</span><span class="p">:</span><span class="w"> </span><span class="s2">"사용자가 입력한 메시지"</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"role"</span><span class="p">:</span><span class="w"> </span><span class="s2">"assistant"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"content"</span><span class="p">:</span><span class="w"> </span><span class="s2">"사용자가 입력한 메시지에 대한 응답"</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>하나의 챗 페이지에서 대화한 내용을 GPT에 보낼 때 위와 같은 형식으로 보내야 한다.</p>

<p>보면 눈치채겠지만, <strong>GPT의 입력은 하나의 챗 페이지에서 대화한 메시지를 모두 다 입력으로 보낸다!!</strong></p>

<p>이는 GPT가 한번의 챗 페이지에서 대화한 내용을 계속 반복해서 입력받는다는 뜻이다. 이를 모르는 사람들이 꽤 있었는데,
다시 말하면 결국 하나의 대화가 길어지면 길어질수록 GPT의 맥락이 점점 한정되어서 성능이 떨어지게 된다. 
생각할 공간이 줄어드는 것과 비슷하다.</p>

<p>또한 토큰에서도 불이익이 있는데 이는 GPT가 한번에 처리할 수 있는 토큰의 수가 제한되어 있기 때문이다. 예를 들어서, GPT-3.5-turbo의 경우 4096개의 토큰을 처리할 수 있다.
게다가 GPT의 과금에 있어서, OpenAI는 1000개의 토큰을 처리할 때마다 일정량의 과금을 받는데, 한번의 대화가 길어지면 길어질수록 이전 대화의 메시지가 계속 입력되어서
보다 떨어지는 성능인데도 불구하고 더 많은 과금이 발생하게 된다.</p>

<p>그러니까 한번의 챗 페이지에서 대화를 길게 이어 나가는 것보다는, 짧은 대화를 여러 번 반복하는 것이 좋다.
한번의 대화에서 꼭 고맥락이 필요한 게 아니라면 성능상의 이점은 물론이고 과금적인 측면에서도 대화가 길어지면 길어질수록
더 많은 불이익이 발생하게 된다.</p>

<p>아무튼, 이러한 GPT의 입력 형식을 알았으니, 이제 이를 스프링에서 어떻게 구현할지 알아보자.</p>

<h3 id="2-configuration-파일">2. Configuration 파일</h3>

<p>인터넷에서 찾은 대부분의 코드는 WebClient를 사용한 것이 아니라 RestTemplate을 사용한 코드가 많았다.
하지만, RestTemplate은 더 이상 사용되지 않는다고 하니 WebClient를 사용해서 구현해 보았다.</p>

<h4 id="openaiconfigjava">OpenAIConfig.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">com.chatgptspring.config</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.JsonNode</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.ObjectMapper</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.node.ObjectNode</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.reactive.function.client.WebClient</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OpenAIConfig</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${openai.api.key}"</span><span class="o">)</span> <span class="c1">// application.properties에 저장된 openai.api.key를 불러온다.</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">openAiKey</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">WebClient</span> <span class="nf">webClient</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">WebClient</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">baseUrl</span><span class="o">(</span><span class="s">"https://api.openai.com"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">defaultHeader</span><span class="o">(</span><span class="s">"Authorization"</span><span class="o">,</span> <span class="s">"Bearer "</span> <span class="o">+</span> <span class="n">openAiKey</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
    
    <span class="c1">// ObjectMapper 빈 등록</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">ObjectMapper</span> <span class="nf">objectMapper</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ObjectMapper</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h4 id="applicationproperties">application.properties</h4>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="py">spring.application.name</span><span class="p">=</span><span class="s">chatgpt-spring</span>

<span class="py">spring.mvc.static-path-pattern</span><span class="p">=</span><span class="s">/static/**</span>
<span class="py">spring.thymeleaf.prefix</span><span class="p">=</span><span class="s">classpath:/templates/</span>
<span class="py">spring.thymeleaf.suffix</span><span class="p">=</span><span class="s">.html</span>

<span class="py">openai.api.key</span><span class="p">=</span> <span class="s">본인 키파일</span>

<span class="py">spring.datasource.url</span><span class="p">=</span><span class="s">본인 DB 호스트</span>
<span class="py">spring.datasource.username</span><span class="p">=</span><span class="s">본인 DB 유저</span>
<span class="py">spring.datasource.password</span><span class="p">=</span><span class="s">본인 DB 비밀번호</span>

</code></pre></div></div>

<p>이렇게 설정을 하면 OpenAIConfig 파일에서 WebClient를 빈으로 등록하고, application.properties에서 OpenAI API Key를 불러와서 사용할 수 있다.
DB 설정은 본인의 DB에 맞게 설정하면 된다. 나는 MariaDB를 사용했다.
이정도는 스프링을 사용하면서 자주 사용하는 설정이니까 크게 어렵지 않을 것이다. DB에 저장하지 않고, GPT의 응답만 받아서 사용하고 싶다면 DB 설정은 필요없다.</p>

<h3 id="3-domain-파일">3. Domain 파일</h3>

<p>여기에는 DB와 연결되는 엔티티 클래스를 정의한다. 만약 단순히 GPT를 이용해서 응답을 받는 기능을 스프링에 탑재하고자 한다면 이 부분은 필요없이 DTO만 작성하면 된다.
아무튼 나는 Chat-gpt 페이지와 유사한 형태의 채팅 페이지를 직접 구현해 보고자 했기 때문에 엔티티 클래스를 작성했다.</p>

<h4 id="chatjava">Chat.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">com.chatgptspring.domain</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.annotation.JsonManagedReference</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">jakarta.persistence.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Getter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Setter</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="nd">@Getter</span> <span class="nd">@Setter</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"chat"</span><span class="o">)</span>
<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Chat</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"user_id"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">User</span> <span class="n">user</span><span class="o">;</span>

    <span class="nd">@OneToMany</span><span class="o">(</span><span class="n">mappedBy</span> <span class="o">=</span> <span class="s">"chat"</span><span class="o">)</span>
    <span class="nd">@JsonManagedReference</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Message</span><span class="o">&gt;</span> <span class="n">messages</span><span class="o">;</span>

<span class="o">}</span>

</code></pre></div></div>

<p>이는 앞서 말했던 것처럼 Chat 페이지와 유사한 형태의 채팅 페이지를 구현하기 위한 엔티티 클래스이다. 챗은 맥락을 가지고 있는 메시지의 집합이라고 생각하면 된다.
흔히 이용하는 GPT 페이지에서 한 번의 챗 페이지에 해당한다.
어떤 유저의 채팅인지와 메시지의 리스트를 가지고 있다.</p>

<h4 id="messagejava">Message.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">com.chatgptspring.domain</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.annotation.JsonBackReference</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.annotation.JsonManagedReference</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">jakarta.persistence.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Getter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Setter</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>

<span class="nd">@Getter</span> <span class="nd">@Setter</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"message"</span><span class="o">)</span>
<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Message</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">role</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">length</span> <span class="o">=</span> <span class="mi">10000</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">content</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"chat_id"</span><span class="o">)</span>
    <span class="nd">@JsonBackReference</span>
    <span class="kd">private</span> <span class="nc">Chat</span> <span class="n">chat</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">Integer</span> <span class="n">tokenCount</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">model</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Date</span> <span class="n">datetime</span><span class="o">;</span>
<span class="o">}</span>

</code></pre></div></div>

<p>메시지는 챗의 메시지이다. 메시지는 역할, 내용, 토큰 수, 모델, 날짜를 가지고 있다. 역할은 사용자인지 GPT인지를 나타내고, 내용은 메시지의 내용을 나타낸다.
토큰 수는 GPT가 처리한 토큰의 총합을 나타내는데 보낸 메시지의 토큰 수와 받은 메시지의 토큰 수를 합한 값이다. 이게 조금 이상하다고 생각할 수 있지만,
어차피 Open-ai에서 과금을 계산할 때 보낸 메시지의 토큰 수, 받은 메시지의 토큰 수를 합해 계산하기 때문에 상관이 없기도 하고,</p>

<p>보낸 메시지의 한국어 토큰 계산은 결국 response를 받아야만 알 수 있기 때문에 이렇게 구현했다.</p>

<h4 id="userjava">User.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">com.chatgptspring.domain</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">jakarta.persistence.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Getter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.RequiredArgsConstructor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Setter</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="nd">@Getter</span> <span class="nd">@Setter</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"user"</span><span class="o">)</span>
<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>

    <span class="nd">@OneToMany</span><span class="o">(</span><span class="n">mappedBy</span> <span class="o">=</span> <span class="s">"user"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Chat</span><span class="o">&gt;</span> <span class="n">chats</span><span class="o">;</span>

<span class="o">}</span>

</code></pre></div></div>

<h3 id="4-repository-파일">4. Repository 파일</h3>

<p>빠른 개발을 위해서 필요한 부분만 간단히 작성했다. 성능이 나쁠수도 있다. 
DB설정이 안되어 있거나 DB에 저장하지 않고, GPT의 응답만 받아서 사용하고 싶다면 이 부분은 필요없다.</p>

<h4 id="chatrepositoryjava">ChatRepository.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">com.chatgptspring.repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.chatgptspring.domain.Chat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.JpaRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Repository</span><span class="o">;</span>

<span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ChatRepository</span> <span class="kd">extends</span> <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="nc">Chat</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>
<span class="o">}</span>

</code></pre></div></div>

<h4 id="messagerepositoryjava">MessageRepository.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">com.chatgptspring.repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.chatgptspring.domain.Message</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.JpaRepository</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MessageRepository</span> <span class="kd">extends</span> <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="nc">Message</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>
<span class="o">}</span>

</code></pre></div></div>

<h4 id="userrepositoryjava">UserRepository.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">com.chatgptspring.repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.chatgptspring.domain.User</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.JpaRepository</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserRepository</span> <span class="kd">extends</span> <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="5-dto-파일">5. DTO 파일</h3>

<h4 id="chatdtojava">ChatDto.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">dto</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.Data</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="nd">@Data</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChatDTO</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">model</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">MessageDTO</span><span class="o">&gt;</span> <span class="n">messages</span><span class="o">;</span>
<span class="o">}</span>

</code></pre></div></div>

<p>이 DTO는 GPT의 입력 형식과 동일하게 구성되어 있다. 즉, 단순히 페이지를 저장하거나 하고 싶지 않다면 해당 DTO만 작성해도 된다. 이를 JSON 형식으로 파싱해서 GPT에 보낼 것이다.</p>

<h4 id="messagedtojava">MessageDTO.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">dto</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.Data</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>

<span class="nd">@Data</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessageDTO</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">role</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">content</span><span class="o">;</span>
<span class="o">}</span>

</code></pre></div></div>

<p>role은 사용자인지 GPT인지를 나타내고, content는 메시지의 내용을 나타낸다. role의 경우 사용자의 메시지는 user, GPT의 응답은 assistant로 고정되어 있어서 다른 값을 넣으면 Bad Request가 발생한다.
<strong>system 롤이 있는데, 이는 해당 대화(Chat)의 GPT의 전반적인 맥락과 규칙을 지시하는 역할을 하고, 보통 가장 먼저 보내는 메시지에 사용된다.</strong>
assistant role은 사용자의 메시지에 대한 응답을 나타낸다. 이것 외에는 오류가 발생한다.
예를 들어서 해당 GPT를 카페의 점원으로 사용하고자 할 때 system role을 이용해서 “너는 카페의 점원이야”라는 메시지를 먼저 보내고, 그 다음에 사용자의 메시지를 보내는 식이다.</p>

<h3 id="6-service-파일">6. Service 파일</h3>

<h4 id="chatservicejava">ChatService.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">com.chatgptspring.service</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.chatgptspring.domain.Chat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.chatgptspring.repository.ChatRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.RequiredArgsConstructor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>

<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChatService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ChatRepository</span> <span class="n">chatRepository</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">Chat</span> <span class="nf">CreateChat</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Chat</span> <span class="n">chat</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Chat</span><span class="o">();</span>
        <span class="n">chatRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">chat</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">chat</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Iterable</span><span class="o">&lt;</span><span class="nc">Chat</span><span class="o">&gt;</span> <span class="nf">FindAllChats</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">chatRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">DeleteChat</span><span class="o">(</span><span class="nc">Long</span> <span class="n">chatId</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">chatRepository</span><span class="o">.</span><span class="na">deleteById</span><span class="o">(</span><span class="n">chatId</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Chat</span> <span class="nf">FindChatById</span><span class="o">(</span><span class="nc">Long</span> <span class="n">chatId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">chatRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">chatId</span><span class="o">).</span><span class="na">orElse</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<h4 id="messageservicejava">MessageService.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">com.chatgptspring.service</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.chatgptspring.domain.Chat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.chatgptspring.domain.Message</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.chatgptspring.repository.MessageRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.JsonNode</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.ObjectMapper</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">dto.ChatDTO</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">dto.MessageDTO</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.netty.handler.codec.http.HttpResponseStatus</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.RequiredArgsConstructor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.reactive.function.client.WebClient</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessageService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ChatService</span> <span class="n">chatService</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MessageRepository</span> <span class="n">messageRepository</span><span class="o">;</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">WebClient</span> <span class="n">webClient</span><span class="o">;</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">ObjectMapper</span> <span class="n">objectMapper</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">Message</span> <span class="nf">SendMessage</span><span class="o">(</span><span class="nc">Long</span> <span class="n">chatId</span><span class="o">,</span> <span class="nc">String</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Chat</span> <span class="n">chat</span> <span class="o">=</span> <span class="n">chatService</span><span class="o">.</span><span class="na">FindChatById</span><span class="o">(</span><span class="n">chatId</span><span class="o">);</span>
        <span class="nc">Message</span> <span class="n">message</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Message</span><span class="o">();</span>
        <span class="n">message</span><span class="o">.</span><span class="na">setChat</span><span class="o">(</span><span class="n">chat</span><span class="o">);</span>
        <span class="n">message</span><span class="o">.</span><span class="na">setRole</span><span class="o">(</span><span class="s">"user"</span><span class="o">);</span>
        <span class="n">message</span><span class="o">.</span><span class="na">setContent</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>
        <span class="n">messageRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>

        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Message</span><span class="o">&gt;</span> <span class="n">messages</span> <span class="o">=</span> <span class="n">chat</span><span class="o">.</span><span class="na">getMessages</span><span class="o">();</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">MessageDTO</span><span class="o">&gt;</span> <span class="n">messageDTOs</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Message</span> <span class="n">m</span> <span class="o">:</span> <span class="n">messages</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">MessageDTO</span> <span class="n">messageDTO</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MessageDTO</span><span class="o">();</span>
            <span class="n">messageDTO</span><span class="o">.</span><span class="na">setRole</span><span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">getRole</span><span class="o">());</span>
            <span class="n">messageDTO</span><span class="o">.</span><span class="na">setContent</span><span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">getContent</span><span class="o">());</span>
            <span class="n">messageDTOs</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">messageDTO</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nc">ChatDTO</span> <span class="n">chatDTO</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ChatDTO</span><span class="o">();</span>
        <span class="n">chatDTO</span><span class="o">.</span><span class="na">setMessages</span><span class="o">(</span><span class="n">messageDTOs</span><span class="o">);</span>
        <span class="n">chatDTO</span><span class="o">.</span><span class="na">setModel</span><span class="o">(</span><span class="s">"gpt-3.5-turbo"</span><span class="o">);</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">response</span> <span class="o">=</span> <span class="n">webClient</span><span class="o">.</span><span class="na">post</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">uri</span><span class="o">(</span><span class="s">"https://api.openai.com/v1/chat/completions"</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">bodyValue</span><span class="o">(</span><span class="n">chatDTO</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">retrieve</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">bodyToMono</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">block</span><span class="o">();</span>

            <span class="nc">JsonNode</span> <span class="n">root</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readTree</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>
            <span class="nc">String</span> <span class="n">assistantContent</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="na">path</span><span class="o">(</span><span class="s">"choices"</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">path</span><span class="o">(</span><span class="s">"message"</span><span class="o">).</span><span class="na">path</span><span class="o">(</span><span class="s">"content"</span><span class="o">).</span><span class="na">asText</span><span class="o">();</span>
            <span class="nc">Integer</span> <span class="n">totalTokens</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="na">path</span><span class="o">(</span><span class="s">"usage"</span><span class="o">).</span><span class="na">path</span><span class="o">(</span><span class="s">"total_tokens"</span><span class="o">).</span><span class="na">asInt</span><span class="o">();</span>

            <span class="nc">Message</span> <span class="n">responseMessage</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Message</span><span class="o">();</span>

            <span class="n">responseMessage</span><span class="o">.</span><span class="na">setChat</span><span class="o">(</span><span class="n">chat</span><span class="o">);</span>
            <span class="n">responseMessage</span><span class="o">.</span><span class="na">setModel</span><span class="o">(</span><span class="n">chatDTO</span><span class="o">.</span><span class="na">getModel</span><span class="o">());</span>
            <span class="n">responseMessage</span><span class="o">.</span><span class="na">setRole</span><span class="o">(</span><span class="s">"assistant"</span><span class="o">);</span>
            <span class="n">responseMessage</span><span class="o">.</span><span class="na">setContent</span><span class="o">(</span><span class="n">assistantContent</span><span class="o">);</span>
            <span class="n">responseMessage</span><span class="o">.</span><span class="na">setTokenCount</span><span class="o">(</span><span class="n">totalTokens</span><span class="o">);</span>
            <span class="n">messageRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">responseMessage</span><span class="o">);</span>
            <span class="k">return</span> <span class="n">responseMessage</span><span class="o">;</span>

        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>일단 빠른 테스트를 위해서 model을 고정시켰다. 필요하다면 이를 동적으로 변경하면 된다. 앞서 작성한 DTO 파일과 도메인을 이용해서 GPT에 요청을 보내고, 응답을 받아서 DB에 저장한다.
만약 도메인 저장이 필요가 없다면 해당 부분을 삭제하면 된다.</p>

<p>Configuration 파일에서 빈으로 등록했던 ObjectMapper를 이용해서 JSON 형식의 응답을 파싱한다.</p>

<h3 id="7-controller-파일">7. Controller 파일</h3>

<h4 id="chatcontrollerjava">ChatController.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">com.chatgptspring.controller</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.chatgptspring.domain.Chat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.chatgptspring.repository.ChatRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.chatgptspring.service.ChatService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.RequiredArgsConstructor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>

<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChatController</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ChatService</span> <span class="n">chatService</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/chat"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Iterable</span><span class="o">&lt;</span><span class="nc">Chat</span><span class="o">&gt;</span> <span class="nf">FindAllChats</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">chatService</span><span class="o">.</span><span class="na">FindAllChats</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/chat/new"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">CreateChat</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">chatService</span><span class="o">.</span><span class="na">CreateChat</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/chat/{chatId}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Chat</span> <span class="nf">FindChatById</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="nc">Long</span> <span class="n">chatId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">chatService</span><span class="o">.</span><span class="na">FindChatById</span><span class="o">(</span><span class="n">chatId</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h4 id="messagecontrollerjava">MessageController.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">com.chatgptspring.controller</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.chatgptspring.domain.Message</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.chatgptspring.service.ChatService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.chatgptspring.service.MessageService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">dto.ChatDTO</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">dto.MessageDTO</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.RequiredArgsConstructor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>


<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessageController</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ChatService</span> <span class="n">chatService</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MessageService</span> <span class="n">messageService</span><span class="o">;</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/chat/{chatId}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Message</span> <span class="nf">CreateMessage</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="nc">Long</span> <span class="n">chatId</span><span class="o">,</span> <span class="nd">@RequestBody</span> <span class="nc">MessageDTO</span> <span class="n">messageDTO</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">messageContent</span> <span class="o">=</span> <span class="n">messageDTO</span><span class="o">.</span><span class="na">getContent</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">messageService</span><span class="o">.</span><span class="na">SendMessage</span><span class="o">(</span><span class="n">chatId</span><span class="o">,</span> <span class="n">messageContent</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<h3 id="8-테스트">8. 테스트</h3>

<p>이제 Postman을 이용해서 테스트를 해보자. 먼저 챗을 생성하고, 챗의 id를 이용해서 메시지를 보내면 된다.</p>

<h4 id="chat-생성">Chat 생성</h4>

<p><img src="/img/posts/spring/gpt/2.png" width="90%" /></p>

<h4 id="메시지-보내기">메시지 보내기</h4>

<p><img src="/img/posts/spring/gpt/3.png" width="90%" />
<img src="/img/posts/spring/gpt/4.png" width="90%" /></p>

<p>간단한 시를 써보라고 했는데,</p>

<blockquote>
  <blockquote>
    <p>가을밤에 별빛이 찬란하고, 너의 손을 잡으면 행복해지는 마법 같아.</p>
  </blockquote>
</blockquote>

<p>라고 시를 작성해 주었다.</p>

<p>꽤나 문학적인걸, GPT.</p>

<h3 id="9-마치며">9. 마치며</h3>

<p>아직 백엔드가 완벽히 구현된 것은 아니다. 이를 이용해서 사용자 인증도 구현해야 하고, 더 많은 기능을 추가해야 한다.
프론트엔드와 연결하는 부분은 다음 포스트에서 다루도록 하겠다.</p>]]></content><author><name>ash tensor</name></author><category term="WEB" /><category term="JAVA" /><summary type="html"><![CDATA[[WEB][Spring] 스프링으로 간단한 Chat-GPT 페이지 구현하기 - 1]]></summary></entry><entry><title type="html">[WEB][Spring] 스프링 N + 1 문제</title><link href="http://localhost:4000/web/java/2024/08/26/spring-n-plus-1-problem.html" rel="alternate" type="text/html" title="[WEB][Spring] 스프링 N + 1 문제" /><published>2024-08-26T00:00:00+09:00</published><updated>2024-08-26T00:00:00+09:00</updated><id>http://localhost:4000/web/java/2024/08/26/spring-n-plus-1-problem</id><content type="html" xml:base="http://localhost:4000/web/java/2024/08/26/spring-n-plus-1-problem.html"><![CDATA[<h2 id="webspring-스프링-n--1-문제">[WEB][Spring] 스프링 N + 1 문제</h2>

<h3 id="1-서론">1. 서론</h3>

<p><img src="/img/posts/spring/1.png" width="80%" /></p>

<p>프로젝트를 진행 중에, 스프링에서 N + 1 문제가 발생했다. 현재 사진에서 보이는 것과 같이, 쿼리 시간이 약 30초 씩이나 걸리는 문제가 있었는데 
과거에 했던 프로젝트에서 해당 문제가 N+1 문제 때문에 발생한다는 것을 이미 알고 있었기 때문에 트러블 슈팅에 어려움을 겪지는 않았지만,
이번에 문제를 해결하면서 다시 한 번 정리해 보고자 했다.</p>

<p><img src="/img/posts/spring/2.png" width="80%" /></p>

<p>이는 해당 N + 1 문제를 해결한 뒤에 나온 API 테스트 결과이다. 30초에 달하던 쿼리 시간이 1.7초로 줄어든 것을 볼 수 있다.</p>

<h3 id="2-배경">2. 배경</h3>

<p><img src="/img/posts/spring/3.png" width="80%" /></p>

<p>문제가 되는 테이블은 다음과 같았다. (테이블 설계나 구조, 그리고 네이밍 컨벤션등이 이상하다고 지적한다면, 부끄럽지만 맞다. 
하지만, 이는 이미 구축된 시스템을 수정하는 과정에서 이미 데이터가 저장된 테이블 구조를 바꾸기 어려워서 그대로 사용하게 되었다.)
아무튼, 구조를 살펴보자면</p>

<ol>
  <li>주문을 저장하는 orders 라는 테이블이 존재하고</li>
  <li>각각 주문의 상세 내역을 저장하는 orderitem 라는 테이블이 존재한다. 그리고 이 테이블은 orders 테이블과 1:N 관계를 가지고 있다.
orderItem 테이블은 orders 테이블의 id를 참조하는 외래키를 가지고 있다. 
하지만 orderitem 테이블은 orders 테이블의 id를 참조하는 외래키를 가지고 있지 않다.</li>
</ol>

<p>이를 스프링 JPA로 구현하면 다음과 같다.</p>

<h4 id="orderjava">Order.java</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">jakarta.persistence.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Getter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Setter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.time.LocalDateTime</span><span class="o">;</span>

<span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"orders"</span><span class="o">)</span>
<span class="nd">@Getter</span> <span class="nd">@Setter</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Order</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span><span class="o">(</span><span class="n">fetch</span> <span class="o">=</span> <span class="nc">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">,</span> <span class="n">optional</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"customerID"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Customer</span> <span class="n">customer</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span><span class="o">(</span><span class="n">fetch</span> <span class="o">=</span> <span class="nc">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">,</span> <span class="n">optional</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"kioskID"</span><span class="o">,</span> <span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Kiosk</span> <span class="n">kiosk</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"date_time"</span><span class="o">,</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">LocalDateTime</span> <span class="n">dateTime</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"total_price"</span><span class="o">,</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">totalPrice</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"is_packaged"</span><span class="o">,</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">isPackaged</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"payment_uid"</span><span class="o">,</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">paymentUid</span><span class="o">;</span>

    <span class="c1">// 결제 환불을 위한 join</span>
    <span class="nd">@OneToOne</span><span class="o">(</span><span class="n">cascade</span> <span class="o">=</span> <span class="nc">CascadeType</span><span class="o">.</span><span class="na">REMOVE</span><span class="o">)</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"order_module_dto"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">OrderModuleDTO</span> <span class="n">orderModuleDTO</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="orderitemjava">OrderItem.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.annotation.JsonIgnoreProperties</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">jakarta.persistence.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Getter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Setter</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.math.BigDecimal</span><span class="o">;</span>

<span class="nd">@Entity</span>
<span class="nd">@Getter</span> <span class="nd">@Setter</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"orderitem"</span><span class="o">)</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderItem</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"orderID"</span><span class="o">,</span> <span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Order</span> <span class="n">order</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"menuID"</span><span class="o">,</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Menu</span> <span class="n">menu</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"custom_optionID"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">CustomOption</span> <span class="n">customOption</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kt">int</span> <span class="n">quantity</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="nc">Long</span> <span class="n">price</span><span class="o">;</span>

<span class="o">}</span>

</code></pre></div></div>

<ol>
  <li>여기서 ordermoduledto 라는 테이블이 존재하는데, 이 테이블은 orders 테이블과 1:1 관계를 가지고 있다.
ordermoduledto 테이블은 orders 테이블의 id를 참조하는 외래키를 가지고 있다.</li>
</ol>

<h3 id="3-문제-발생">3. 문제 발생</h3>

<p>그리고 문제가 발생했는데, order_complete를 이용해서 완료되지 않은 orders를 가져오는 API를 만들었는데,
이 API를 호출하면서 orders 테이블을 찾고, 그 과정에서 orders와 연결된 ordermoduledto 테이블을 추가적으로 찾는 N + 1 이 발생했고,
또 다시 orderitem 테이블을 쿼리하면서 약 30초간 쿼리 시간이 걸리는 문제가 발생했다.</p>

<p>다행히도, orderitem 테이블을 쿼리할 때는 N + 1 문제가 발생하지 않았다. 그 이유는 orderitem 테이블이 orders 테이블과 연결되어 있지만 
캐시되어 있기 때문이다.</p>

<h3 id="4-문제-해결">4. 문제 해결</h3>

<p>이 문제를 해결하기 위해서 일단 나는 <em>패치 조인</em>을 이용해서 해결했다.</p>

<h4 id="ordercompleterepositoryjava">OrderCompleteRepository.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">ac.su.kiosk.domain.OrderComplete</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">jakarta.transaction.Transactional</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.JpaRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.Modifying</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.Query</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">OrderCompleteRepository</span> <span class="kd">extends</span> <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="nc">OrderComplete</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">OrderComplete</span><span class="o">&gt;</span> <span class="nf">findAllByOrderId</span><span class="o">(</span><span class="nc">Long</span> <span class="n">orderId</span><span class="o">);</span>

    <span class="nd">@Transactional</span>
    <span class="nd">@Modifying</span>
    <span class="nd">@Query</span><span class="o">(</span><span class="s">"update OrderComplete oc set oc.complete = true where oc.id = :id"</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">updateById</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">);</span>

    <span class="nd">@Query</span><span class="o">(</span><span class="s">"select "</span> <span class="o">+</span>
            <span class="s">"oc from OrderComplete oc "</span> <span class="o">+</span>
            <span class="s">"JOIN FETCH oc.order o "</span> <span class="o">+</span>
            <span class="s">"JOIN FETCH o.orderModuleDTO omd "</span> <span class="o">+</span>
            <span class="s">"where oc.complete = :target"</span><span class="o">)</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">OrderComplete</span><span class="o">&gt;</span> <span class="nf">findAllByComplete</span><span class="o">(</span><span class="nc">Boolean</span> <span class="n">target</span><span class="o">);</span>

</code></pre></div></div>

<ol>
  <li>
    <p>처음에는 OrderComplete와 Order 테이블을 패치해 봤는데, 35초에 달하는 쿼리 속도가 약 28초 정도로 줄긴 했지만, 여전히 느리다.
그리고 ordermoduledto 테이블을 패치해 봤는데, 이 결과 약 1.7초로 줄어들어서 문제가 해결되었다.</p>
  </li>
  <li>
    <p><strong>Where in</strong> 을 이용해서 해결했는데, 이건 직접적으로 N + 1 쿼리를 줄이는 것은 아니지만,
이미 존재하던 코드의 방식으로는 select * from orderitem where orderID = ? 이런 식으로 쿼리를 날리는데,
이걸 where in을 이용해서 select * from orderitem where orderID in (?,?,?,…) 이런 식으로 쿼리를 날리는 방식으로 변경했다.
이는 타 프로젝트에서 쿼리 시간을 개선할 때 가장 큰 효과를 보았던 방식이다.</p>
  </li>
  <li>
    <p>그리고 <strong>batch size</strong>를 50으로 설정했는데, 프로젝트가 크지 않아서 이 정도의 배치 사이즈로도 큰 효과를 보았다.</p>
  </li>
</ol>

<h3 id="5-패치-조인">5. 패치 조인</h3>

<p>일단 패치 조인을 이용할 때, 내가 신경쓰였던 점은 List<OrderComplete> findAllByComplete(Boolean target); 이 메소드에서
리턴해야 할 객체가 List<OrderComplete> 인데,</OrderComplete></OrderComplete></p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    <span class="nv">"select "</span> <span class="o">+</span>
            <span class="nv">"oc from OrderComplete oc "</span> <span class="o">+</span>
            <span class="nv">"JOIN FETCH oc.order o "</span> <span class="o">+</span>
            <span class="nv">"JOIN FETCH o.orderModuleDTO omd "</span> <span class="o">+</span>
            <span class="nv">"where oc.complete = :target"</span>
            
</code></pre></div></div>

<p>이런 식으로 패치 조인을 이용하면 List<OrderComplete> 가 아닌 List&lt;Object[]&gt; 가 리턴될 수 있지 않을까? 라는 걱정이었다.
왜냐면 결과가 OrderComplete, Order, OrderModuleDTO 세 개의 객체가 조인된 객체가 리턴되기 때문이다.</OrderComplete></p>

<p>하지만 이런 걱정은 굳이 할 필요가 없었다. 스프링 JPA는 이런 경우에도 List<OrderComplete> 가 리턴된다.</OrderComplete></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>즉, JPQL 쿼리에서 

select oc from OrderComplete oc... 

와 같이 특정 엔티티를 선택하면, 
결과는 List&lt;OrderComplete&gt;로 반환되고, 이 경우 JPA는 OrderComplete 객체를 생성하고 
패치 조인으로 로드된 관련 엔티티(Order와 OrderModuleDTO)는 해당 객체의 필드에 자동으로 매핑된다.
</code></pre></div></div>

<p>그리고, 이번에 공부할 수 있었던 건, <strong>OrderComplete와 Order와는 연결되어 있지만, OrderModuleDTO는 연결되어 있지 않아도
패치 조인을 이용해서 Order를 타고 Order에 연결되어 있는 OrderModuleDTO를 가져올 수 있었다는 점이다.</strong></p>

<h3 id="6-마치며">6. 마치며</h3>

<p>N + 1 매핑을 해결하는 다양한 방법중에, 패치 조인을 이용한 방법을 정리해 보았다. 엔티티 그래프나 그 외의 
다양한 방법들이 존재하지만 과거에 이 방법을 사용했을 때 가장 효과적이었기 때문에 이 방법을 사용했고,
엔티티 그래프나 그 외의 방법들도 한 번 정리해 보고 싶다.</p>]]></content><author><name>ash tensor</name></author><category term="WEB" /><category term="JAVA" /><summary type="html"><![CDATA[[WEB][Spring] 스프링 N + 1 문제]]></summary></entry><entry><title type="html">[WEB][AWS] AWS Rekognition Face Detection Spring Boot 설정</title><link href="http://localhost:4000/web/java/2024/08/22/aws-rekognition-spring-setup.html" rel="alternate" type="text/html" title="[WEB][AWS] AWS Rekognition Face Detection Spring Boot 설정" /><published>2024-08-22T00:00:00+09:00</published><updated>2024-08-22T00:00:00+09:00</updated><id>http://localhost:4000/web/java/2024/08/22/aws-rekognition-spring-setup</id><content type="html" xml:base="http://localhost:4000/web/java/2024/08/22/aws-rekognition-spring-setup.html"><![CDATA[<h2 id="webaws-aws-rekognition-face-detection-spring-boot-설정">[WEB][AWS] AWS Rekognition Face Detection Spring Boot 설정</h2>

<h3 id="1-서론">1. 서론</h3>

<p>흔히 인터넷에서 많이 본 기능중에, 사진을 업로드하면 해당 사진 속의 얼굴을 인식하여 박스를 그리고, 얼굴의 감정 및 나이, 특징등을 
분석해서 보여주는 사진을 많이 보았을 것이다. 뜬금 없는 사진에서 역겨움이나 놀람, 행복 등으로 웃음을 주는 밈들을 생각해 보면 바로 떠올릴 수 있을 것이다.
…이런 식으로</p>

<p><img src="/img/posts/aws_face_rekognition/1.jpeg" width="80%" /></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
    </span><span class="nl">"faceDetails"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"boundingBox"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"width"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.38674828</span><span class="p">,</span><span class="w">
                </span><span class="nl">"height"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.37040558</span><span class="p">,</span><span class="w">
                </span><span class="nl">"left"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.30599424</span><span class="p">,</span><span class="w">
                </span><span class="nl">"top"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.19806679</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"ageRange"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"low"</span><span class="p">:</span><span class="w"> </span><span class="mi">20</span><span class="p">,</span><span class="w">
                </span><span class="nl">"high"</span><span class="p">:</span><span class="w"> </span><span class="mi">26</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"smile"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
                </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">99.86501</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"eyeglasses"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
                </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">99.99978</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"sunglasses"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
                </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">99.95743</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"gender"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">57.465927</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"beard"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
                </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">98.73258</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"mustache"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
                </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">99.56685</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"eyesOpen"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
                </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">99.998924</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"mouthOpen"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
                </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">99.27673</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"emotions"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CALM"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">100.0</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SAD"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.009685755</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CONFUSED"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.0065863132</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"DISGUSTED"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.0038862228</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ANGRY"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.003117323</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"HAPPY"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.0012536843</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SURPRISED"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">8.2701445E-4</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"FEAR"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">2.2947788E-4</span><span class="w">
                </span><span class="p">}</span><span class="w">
            </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p>일단 내 정장 사진을 입은 모습으로 테스트해 본 결과인데 나이는 20세에서 26세 정도로 나오고, 
웃음이 없고 안경을 썼으며, 남자로 판단하고, 수염은 없다고 판단하고, 눈은 떠있고, 입은 닫혀있으며, 감정은 차분하다고 판단했다.
혹시 몰라서 다른 사진으로도 테스트 해 보면</p>

<p><img src="/img/posts/aws_face_rekognition/2.jpeg" width="80%" /></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
    </span><span class="nl">"faceDetails"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
            </span><span class="s2">"ageRange"</span><span class="err">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"low"</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w">
                </span><span class="nl">"high"</span><span class="p">:</span><span class="w"> </span><span class="mi">16</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="err">...</span><span class="w">
            </span><span class="s2">"gender"</span><span class="err">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">99.85323</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="err">...</span><span class="w">
            </span><span class="s2">"emotions"</span><span class="err">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CALM"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">96.09375</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SURPRISED"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">2.1915436</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CONFUSED"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.54200494</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"DISGUSTED"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.11892319</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"HAPPY"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.086530045</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ANGRY"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.013077259</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SAD"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.003439188</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"FEAR"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">4.529953E-4</span><span class="w">
                </span><span class="p">}</span><span class="w">
            </span><span class="p">],</span><span class="w">
            </span><span class="err">...</span><span class="w">
</span><span class="err">}</span><span class="w">

</span></code></pre></div></div>

<p>일단 나이가 생각보다 정확하게 나온다는 점에서 놀랐는데, 일단 동양인의 얼굴은 나이가 보다 더 어려보이게 나오는 것 같기는 하다.
나의 경우에도 20세는 턱도 없이 어린 나이인데도 20세로 나오고, 카리나의 경우에는 10세에서 16세로 나왔다. 물론 AWS API이므로
만 나이겠지만, 아무리 그래도 10세는 너무 어린 나이로 나오는게 아닐까ㅋㅋㅋ 그리고 내 성별의 경우에도 남자일 확률이 57% 밖에는 
확신할 수 없다는 점이 좀 웃겼다.</p>

<p>아무튼, 이런 기능을 구현하기 위해서는 AWS Rekognition API를 사용하면 된다. 
내 다른 프로젝트에서 얼굴 인식, 즉 나이대와 성별을 체크하는 기능을 구현하고자 했는데 이를 위해서 AWS Rekognition API를 사용하였다.
그런데 AWS의 자습서 내용이 형편없기도 하고, 그리고 한국어로 된 Spring Boot에서 AWS Rekognition API를 사용하는 방법에 대한 자료가 많이 없어서
이렇게 직접 구현하면서 정리해보려고 한다.</p>

<h3 id="2-의존성-추가">2. 의존성 추가</h3>

<p>일단 메이븐의 경우에는 아래와 같이 의존성을 추가해주면 된다.</p>

<h4 id="pomxml">pom.xml</h4>
<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>com.amazonaws<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>aws-java-sdk-rekognition<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;version&gt;</span>1.12.770<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
   
</code></pre></div></div>

<p>자바 버전 17, 그리고 스프링 부트 버전 3.3.1을 사용했고, AWS Rekognition API의 버전은 1.12.770을 사용했다.
그래들의 경우에는</p>

<h4 id="buildgradle">build.gradle</h4>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
    </span><span class="err">implementation</span><span class="w"> </span><span class="err">'com.amazonaws:aws-java-sdk-rekognition:</span><span class="mf">1.12</span><span class="err">.</span><span class="mi">770</span><span class="err">'</span><span class="w">
    </span><span class="err">implementation</span><span class="w"> </span><span class="err">'com.amazonaws:aws-java-sdk-core:</span><span class="mf">1.12</span><span class="err">.</span><span class="mi">770</span><span class="err">'</span><span class="w">
    
</span></code></pre></div></div>

<p>이 의존성을 추가해 주어야 한다. 이 의존성을 추가해 주면 다음과 같은 경고 메시지가 나오는데</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2024-08-22T21:12:40.570+09:00  WARN 2168 --- [           main] com.amazonaws.util.VersionInfoUtils      : The 
AWS SDK for Java 1.x entered maintenance mode starting July 31, 2024 and will reach end of support on December 
31, 2025. For more information, see https://aws.amazon.com/blogs/developer/the-aws-sdk-for-java-1-x-is-in-
maintenance-mode-effective-july-31-2024/
You can print where on the file system the AWS SDK for Java 1.x core runtime is located by setting the AWS_JAVA_V1_
PRINT_LOCATION environment variable or aws.java.v1.printLocation system property to 'true'.
This message can be disabled by setting the AWS_JAVA_V1_DISABLE_DEPRECATION_ANNOUNCEMENT environment variable or 
aws.java.v1.disableDeprecationAnnouncement system property to 'true'.
The AWS SDK for Java 1.x is being used here:
</code></pre></div></div>

<p>이런 경고 메시지가 나오는데, 이는 AWS SDK for Java 1.x가 2025년 12월 31일까지 지원이 중단된다는 것을 알려주는 메시지이다.
메이븐 센트럴에서도 확인해 봤지만 일단 1.x 버전이 최신 버전이라서 1.x 버전을 사용해야 하는 것 같다. 2 버전은 출시되지는 않았다.</p>

<p><img src="/img/posts/aws_face_rekognition/3.png" width="80%" /></p>

<h3 id="3-aws-키-설정">3. AWS 키 설정</h3>

<p>그리고 AWS Rekognition API를 사용하기 위해서는 AWS키를 설정해 주어야 하는데, 나는 귀찮아서 루트키를 발급 받았지만 AWS에서는 IAM 사용자를 생성해서
키를 생성하는 것을 권장하고 있다. IAM 사용자를 생성하고, 해당 사용자에게 RekognitionFullAccess 권한을 부여하고, 해당 사용자의 키를 사용하면 된다.</p>

<p>혹시라도 어떻게 하는지 모르겠으면 <a href="&quot;https://aws.amazon.com/de/blogs/security/wheres-my-secret-access-key/&quot;">여기</a>를 참고하면 된다.</p>

<p><img src="/img/posts/aws_face_rekognition/4.png" width="80%" /></p>

<p>그리고 원래는 환경변수로 설정해 주는 것을 권장하지만, 일단 빠른 테스트를 위해 application.properties에 직접 삽입했다.</p>

<h4 id="applicationproperties">application.properties</h4>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="py">aws.accessKeyId</span><span class="p">=</span><span class="s">your-access-key</span>
<span class="py">aws.secretKey</span><span class="p">=</span><span class="s">your-secret-key</span>

</code></pre></div></div>

<h3 id="4-awsrekognitionconfiguration">4. AWSRekognitionConfiguration</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">com.amazonaws.auth.AWSStaticCredentialsProvider</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.auth.BasicAWSCredentials</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.regions.Regions</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.rekognition.AmazonRekognition</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.rekognition.AmazonRekognitionClientBuilder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AwsRekognitionConfiguration</span> <span class="o">{</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${aws.access-key}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">accessKey</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${aws.secret-key}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">secretKey</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">AmazonRekognition</span> <span class="nf">amazonRekognition</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">BasicAWSCredentials</span> <span class="n">credentials</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BasicAWSCredentials</span><span class="o">(</span><span class="n">accessKey</span><span class="o">,</span> <span class="n">secretKey</span><span class="o">);</span>
        <span class="k">return</span> <span class="nc">AmazonRekognitionClientBuilder</span>
                <span class="o">.</span><span class="na">standard</span><span class="o">()</span>
                <span class="o">.</span><span class="na">withRegion</span><span class="o">(</span><span class="nc">Regions</span><span class="o">.</span><span class="na">EU_WEST_1</span><span class="o">)</span>
                <span class="o">.</span><span class="na">withCredentials</span><span class="o">(</span><span class="k">new</span> <span class="nc">AWSStaticCredentialsProvider</span><span class="o">(</span><span class="n">credentials</span><span class="o">))</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<p>이렇게 AWSRekognitionConfiguration을 만들어서 AmazonRekognition 객체를 Bean으로 등록해 주면 된다. 
이 이후에는 AWSRekognitionService를 만들어서 실제 얼굴 인식을 하는 메소드를 만들어 주면 된다.</p>

<h3 id="5-awsrekognitionservice-및-awsrekognitioncontroller-생성">5. AWSRekognitionService 및 AWSRekognitionController 생성</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.rekognition.AmazonRekognition</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.rekognition.model.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.multipart.MultipartFile</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.ByteBuffer</span><span class="o">;</span>

<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AwsRekognitionService</span> <span class="o">{</span>
    
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">AmazonRekognition</span> <span class="n">client</span><span class="o">;</span>

    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">DetectFacesResult</span> <span class="nf">detectFacesRequest</span><span class="o">(</span><span class="nc">MultipartFile</span> <span class="n">multipartFile</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">DetectFacesRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DetectFacesRequest</span><span class="o">()</span>
                <span class="o">.</span><span class="na">withImage</span><span class="o">(</span><span class="k">new</span> <span class="nc">Image</span><span class="o">().</span><span class="na">withBytes</span><span class="o">(</span><span class="nc">ByteBuffer</span><span class="o">.</span><span class="na">wrap</span><span class="o">(</span><span class="n">multipartFile</span><span class="o">.</span><span class="na">getBytes</span><span class="o">())))</span>
                <span class="o">.</span><span class="na">withAttributes</span><span class="o">(</span><span class="nc">Attribute</span><span class="o">.</span><span class="na">ALL</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">client</span><span class="o">.</span><span class="na">detectFaces</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="kn">import</span> <span class="nn">com.amazonaws.services.rekognition.model.DetectFacesRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.rekognition.model.DetectFacesResult</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.example.awsrekognition.service.AwsRekognitionService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.http.ResponseEntity</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.multipart.MultipartFile</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>

<span class="nd">@RestController</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AwsRekognitionRestController</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">AwsRekognitionService</span> <span class="n">awsRekognitionService</span><span class="o">;</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/images/test-face"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">DetectFacesResult</span><span class="o">&gt;</span> <span class="nf">detectFaces</span><span class="o">(</span><span class="nd">@RequestPart</span> <span class="nc">MultipartFile</span> <span class="n">image</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">(</span><span class="n">awsRekognitionService</span><span class="o">.</span><span class="na">detectFacesRequest</span><span class="o">(</span><span class="n">image</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>이러면 이미지를 업로드하면 해당 이미지의 얼굴을 인식하는 기능을 구현할 수 있다.</p>

<h3 id="6-마무리">6. 마무리</h3>

<p>이렇게 AWS Rekognition API를 사용하여 Spring Boot에서 얼굴 인식을 구현하는 방법을 정리해 보았다.
이런 방법 말고도 S3 버킷에 이미지를 업로드하면 해당 이미지의 URL을 가져와서 얼굴 인식을 하는 방법도 있긴 하고,
여러 사진 중에서 해당 사진의 얼굴을 찾는 방법도 있다. 아마도 출입국 심사대나 보안 설정 같은 곳에서 유용하게 사용할 수 있지 않을까 싶다.</p>

<p>끝!</p>]]></content><author><name>ash tensor</name></author><category term="WEB" /><category term="JAVA" /><summary type="html"><![CDATA[AWS Rekognition API를 사용하여 Spring Boot에서 얼굴 인식을 구현.]]></summary></entry></feed>